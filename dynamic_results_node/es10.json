[{"path": "./test262-main/test/built-ins/Array/prototype/Symbol.unscopables/value.js", "esid": " sec-array.prototype-@@unscopables", "description": " >Initial value of `Symbol.unscopables` property\n", "info": " |22.1.3.32 Array.prototype [ @@unscopables ]\n\n1. Let unscopableList be ObjectCreate(null).\n2. Perform CreateDataProperty(unscopableList, \"copyWithin\", true).\n3. Perform CreateDataProperty(unscopableList, \"entries\", true).\n4. Perform CreateDataProperty(unscopableList, \"fill\", true).\n5. Perform CreateDataProperty(unscopableList, \"find\", true).\n6. Perform CreateDataProperty(unscopableList, \"findIndex\", true).\n7. Perform CreateDataProperty(unscopableList, \"flat\", true).\n8. Perform CreateDataProperty(unscopableList, \"flatMap\", true).\n9. Perform CreateDataProperty(unscopableList, \"includes\", true).\n10. Perform CreateDataProperty(unscopableList, \"keys\", true).\n11. Perform CreateDataProperty(unscopableList, \"values\", true).\n12. Assert: Each of the above calls returns true.\n13. Return unscopableList.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.unscopables"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/array-like-objects.js", "esid": " sec-array.prototype.flat", "description": " >array-like objects can be flattened\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/bound-function-call.js", "esid": " sec-array.prototype.flat", "description": " >using bound functions\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/call-with-boolean.js", "esid": " sec-array.prototype.flat", "description": " Array.prototype.flat applied to boolean primitive", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/empty-array-elements.js", "esid": " sec-array.prototype.flat", "description": " >arrays with empty arrays elements\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/empty-object-elements.js", "esid": " sec-array.prototype.flat", "description": " >arrays with empty object elements\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/length.js", "esid": " sec-array.prototype.flat", "description": " Array.prototype.flat.length value and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/name.js", "esid": " sec-array.prototype.flat", "description": " >Array.prototype.flat.name value and descriptor.\n", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/non-numeric-depth-should-not-throw.js", "esid": " sec-array.prototype.flat", "description": " >if the argument is a string or object, the depthNum is 0\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/non-object-ctor-throws.js", "esid": " sec-array.prototype.flat", "description": " >Behavior when `constructor` property is neither an Object nor undefined\n- if IsConstructor(C) is false, throw a TypeError exception.\n", "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/null-undefined-elements.js", "esid": " sec-array.prototype.flat", "description": " >arrays with null, and undefined\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/null-undefined-input-throws.js", "esid": " sec-array.prototype.flat", "description": " >null or undefined should throw TypeError Exception\n", "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/positive-infinity.js", "esid": " sec-array.prototype.flat", "description": " >if the argument is a positive infinity, the depthNum is max depth of the array\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/prop-desc.js", "esid": " sec-array.prototype.flat", "description": " Property type and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/proxy-access-count.js", "esid": " sec-array.prototype.flat", "description": " >properties are accessed correct number of times by .flat\n", "info": " |Array.prototype.flat( [ depth ] )\n\n...\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray (target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\n", "features": ["Array.prototype.flat"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/symbol-object-create-null-depth-throws.js", "esid": " sec-array.prototype.flat", "description": " >if the argument is a Symbol or Object null, it throws exception\n", "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/target-array-with-non-writable-property.js", "esid": " sec-array.prototype.flat", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, source array gets flattened)\n", "info": " |Array.prototype.flat ( [ depth ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\n[...]\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/array-like-objects-nested.js", "esid": " sec-array.prototype.flatMap", "description": " >Does not flatten array-like objects nested into the main array\n", "info": " |FlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n1. Let targetIndex be start.\n2. Let sourceIndex be 0.\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\nii. If mapperFunction is present, then\n1. Assert: thisArg is present.\n2. Set element to ? Call(mapperFunction, thisArg , \u00ab element, sourceIndex, source \u00bb).\niii. Let shouldFlatten be false.\niv. If depth > 0, then\n1. Set shouldFlatten to ? IsArray(element).\nv. If shouldFlatten is true, then\n1. Let elementLen be ? ToLength(? Get(element, \"length\")).\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\nvi. Else,\n1. If targetIndex \u2265 253-1, throw a TypeError exception.\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n3. Increase targetIndex by 1.\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap", "Int32Array"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/array-like-objects-poisoned-length.js", "esid": " sec-array.prototype.flatMap", "description": " >Observe abrupt completion in poisoned lengths of array-like objects\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n", "features": ["Array.prototype.flatMap", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/array-like-objects-typedarrays.js", "esid": " sec-array.prototype.flatMap", "description": " >array-like objects can be flattened (typedArrays)\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap", "Int32Array"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/array-like-objects.js", "esid": " sec-array.prototype.flatMap", "description": " >array-like objects can be flattened\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n\nFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n1. Let targetIndex be start.\n2. Let sourceIndex be 0.\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\n...\n** Skip if property does not exist **\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/bound-function-argument.js", "esid": " sec-array.prototype.flatMap", "description": " >Behavior when given a bound function\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/call-with-boolean.js", "esid": " sec-array.prototype.flatMap", "description": " Array.prototype.flatMap applied to boolean primitive", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/depth-always-one.js", "esid": " sec-array.prototype.flatMap", "description": " >Behavior when array is depth more than 1\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/length.js", "esid": " sec-array.prototype.flatMap", "description": " Array.prototype.flatMap.length value and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/name.js", "esid": " sec-array.prototype.flatmap", "description": " Array.prototype.flatmap name value and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/non-callable-argument-throws.js", "esid": " sec-array.prototype.flatMap", "description": " >non callable argument should throw TypeError Exception\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n3. If IsCallable(mapperFunction) is false, throw a TypeError exception.\n...\n", "features": ["Array.prototype.flatMap", "Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/prop-desc.js", "esid": " sec-array.prototype.flatMap", "description": " Property type and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/proxy-access-count.js", "esid": " sec-array.prototype.flatMap", "description": " >properties are accessed correct number of times by .flatMap\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n...\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n\nFlattenIntoArray (target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\n", "features": ["Array.prototype.flatMap"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/target-array-with-non-writable-property.js", "esid": " sec-array.prototype.flatmap", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, source array is not flattened)\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\nvi. Else,\n[...]\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n[...]\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-non-object.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a custom non-object constructor property\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n", "features": ["Array.prototype.flatMap", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-bad-throws.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a custom object constructor property species\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, \u00ab length \u00bb).\n", "features": ["Array.prototype.flatMap", "Symbol", "Symbol.species"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-custom-ctor-poisoned-throws.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a poisoned custom species constructor\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n7. Return A.\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\n...\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, \u00ab length \u00bb).\n", "features": ["Array.prototype.flatMap", "Symbol", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-custom-ctor.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a custom species constructor\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n7. Return A.\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\n...\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, \u00ab length \u00bb).\n\nFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\n...\nvi. Else,\n...\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n", "features": ["Array.prototype.flatMap", "Symbol", "Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a custom object constructor property\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, \u00ab length \u00bb).\n", "features": ["Array.prototype.flatMap", "Symbol", "Symbol.species"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-null-undefined-throws.js", "esid": " sec-array.prototype.flatMap", "description": " >Throw a TypeError if this value is null or undefined\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n...\n", "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/thisArg-argument.js", "esid": " sec-array.prototype.flatMap", "description": " >Behavior when thisArg is provided\nArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\n", "flags": ["onlyStrict"], "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/lastIndexOf/calls-only-has-on-prototype-after-length-zeroed.js", "esid": " sec-array.prototype.lastindexof", "description": " >Calls [[HasProperty]] on the prototype to check for existing elements.\n", "info": " |22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. If fromIndex is present, let n be ? ToInteger(fromIndex); else let n be len-1.\n...\n7. Repeat, while k \u2265 0\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\n...\n", "includes": ["proxyTrapsHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/reverse/length-exceeding-integer-limit-with-proxy.js", "esid": " sec-array.prototype.reverse", "description": " >Ensure correct MOP operations are called when length exceeds 2^53-1.\n", "includes": ["compareArray.js", "proxyTrapsHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/bug_596_1.js", "esid": " sec-array.prototype.sort", "description": " >The SortCompare abstract operation calls ToString() foridentical\nelements (step 14/15)\n", "author": " Thomas Dahlstrom (tdahlstrom@gmail.com)"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-comparefn-throws.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-appends-elements.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-decreases-length.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-deletes-predecessor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-increases-length.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-pops-elements.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-sets-predecessor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-prototype-accessors.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-prototype-element.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-appends-elements.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-decreases-length.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-deletes-predecessor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-deletes-successor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-increases-length.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-pops-elements.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-sets-predecessor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-sets-successor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/stability-11-elements.js", "esid": " sec-array.prototype.sort", "description": " >Stability of Array.prototype.sort for an array with 11 elements.\n", "info": " |The sort is required to be stable (that is, elements that compare equal\nremain in their original order).\nThe array length of 11 was chosen because V8 used an unstable\nQuickSort for arrays with more than 10 elements until v7.0 (September\n2018). https://v8.dev/blog/array-sort\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/stability-2048-elements.js", "esid": " sec-array.prototype.sort", "description": " >Stability of Array.prototype.sort for an array with 2048 elements.\n", "info": " |The sort is required to be stable (that is, elements that compare equal\nremain in their original order).\nThe array length of 2048 was chosen because as of late 2018, Chakra\nuses merge sort for arrays with 2048 or more elements. It uses\ninsertion sort for smaller arrays.\nhttps://github.com/Microsoft/ChakraCore/pull/5724/files#diff-85203ec16f5961eb4c18e4253bb42140R337\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/stability-513-elements.js", "esid": " sec-array.prototype.sort", "description": " >Stability of Array.prototype.sort for an array with 513 elements.\n", "info": " |The sort is required to be stable (that is, elements that compare equal\nremain in their original order).\nThe array length of 513 was chosen because until late 2018, Chakra\nused to apply an unstable QuickSort for arrays with more than 512\nelements, although it used a stable insertion sort for anything else.\nhttps://github.com/Microsoft/ChakraCore/pull/5724\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/create-species-length-exceeding-integer-limit.js", "esid": " sec-array.prototype.splice", "description": " >Create species constructor with length exceeding integer limit and ensure MOP\noperations are called in correct order.\n", "info": " |...\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n10. Let k be 0.\n11. Repeat, while k < actualDeleteCount\na. Let from be ! ToString(actualStart+k).\nb. Let fromPresent be ? HasProperty(O, from).\nc. If fromPresent is true, then\ni. Let fromValue be ? Get(O, from).\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\nd. Increment k by 1.\n12. Perform ? Set(A, \"length\", actualDeleteCount, true).\n...\n", "includes": ["compareArray.js", "proxyTrapsHelper.js"], "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/property-traps-order-with-species.js", "esid": " sec-array.prototype.splice", "description": " >Ensure the correct property traps are called on the new array.\n", "features": ["Proxy", "Symbol.species"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/constructor.js", "esid": " sec-asyncgenerator-prototype-constructor", "description": " >The GeneratorPrototype intrinsic's constructor.\n", "info": " |AsyncGenerator.prototype.constructor\n\nThe initial value of AsyncGenerator.prototype.constructor is the\nintrinsic object %AsyncGenerator%.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/Atomics/add/bigint/bad-range.js", "esid": " sec-atomics.add", "description": " >Test range checking of Atomics.add on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/bigint/good-views.js", "esid": " sec-atomics.add", "description": " Test Atomics.add on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/bigint/bad-range.js", "esid": " sec-atomics.and", "description": " >Test range checking of Atomics.and on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/bigint/good-views.js", "esid": " sec-atomics.and", "description": " Test Atomics.and on arrays that allow atomic operations", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/bigint/bad-range.js", "esid": " sec-atomics.compareexchange", "description": " >Test range checking of Atomics.compareExchange on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/bigint/good-views.js", "esid": " sec-atomics.compareexchange", "description": " Test Atomics.compareExchange on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/bigint/bad-range.js", "esid": " sec-atomics.exchange", "description": " >Test range checking of Atomics.exchange on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/bigint/good-views.js", "esid": " sec-atomics.exchange", "description": " Test Atomics.exchange on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/bigint/bad-range.js", "esid": " sec-atomics.load", "description": " >Test range checking of Atomics.load on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/bigint/good-views.js", "esid": " sec-atomics.load", "description": " Test Atomics.load on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/length.js", "esid": " sec-atomics.notify", "description": " >Atomics.notify.length is 3.\n", "info": " |Atomics.notify ( ia, index, count )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/bigint/bad-range.js", "esid": " sec-atomics.or", "description": " >Test range checking of Atomics.or on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/bigint/good-views.js", "esid": " sec-atomics.or", "description": " Test Atomics.or on arrays that allow atomic operations", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/bigint/bad-range.js", "esid": " sec-atomics.store", "description": " >Test range checking of Atomics.store on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/bigint/good-views.js", "esid": " sec-atomics.store", "description": " Test Atomics.store on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/bigint/bad-range.js", "esid": " sec-atomics.sub", "description": " >Test range checking of Atomics.sub on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/bigint/good-views.js", "esid": " sec-atomics.sub", "description": " Test Atomics.sub on arrays that allow atomic operations", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/bigint/bad-range.js", "esid": " sec-atomics.xor", "description": " >Test range checking of Atomics.xor on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/bigint/good-views.js", "esid": " sec-atomics.xor", "description": " Test Atomics.xor on arrays that allow atomic operations", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/DataView/length.js", "esid": " sec-dataview-constructor", "description": " >The length property of DataView has the default value of 1\n", "info": " |DataView ( buffer [ , byteOffset [ , byteLength ] ] )\n\nECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["DataView"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toDateString/negative-year.js", "description": " >Negative years must be serialized with at least four digits\n", "esid": " sec-date.prototype.todatestring", "info": " |Date.prototype.toDateString ( )\n\n5. Return DateString(_t_).\n"}, {"path": "./test262-main/test/built-ins/Date/prototype/toString/negative-year.js", "description": " >Negative years must be serialized with at least four digits\n", "esid": " sec-date.prototype.tostring", "info": " |Date.prototype.toString ( )\n\n2. Return ToDateString(_tv_).\n"}, {"path": "./test262-main/test/built-ins/Date/prototype/toUTCString/negative-year.js", "description": " >Negative years must be serialized with at least four digits\n", "esid": " sec-date.prototype.toutcstring", "info": " |Date.prototype.toUTCString ( )\n\n10. Return the string-concatenation of _weekday_, `\",\"`, the code unit 0x0020 (SPACE), _day_, the code unit 0x0020 (SPACE), _month_, the code unit 0x0020 (SPACE), _yearSign_, _year_, the code unit 0x0020 (SPACE), and TimeString(_tv_).\n"}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-bigint-tojson-receiver.js", "esid": " sec-serializejsonproperty", "description": " toJSON method called with BigInt as receiver", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-string-escape-unicode.js", "esid": " sec-quotejsonstring", "description": " >JSON.stringify strings containing surrogate code units\n", "features": ["well-formed-json-stringify"]}, {"path": "./test262-main/test/built-ins/Object/assign/strings-and-symbol-order.js", "esid": " sec-object.assign", "description": " >Symbol-valued properties are copied after String-valued properties.\n", "info": " |19.1.2.1 Object.assign ( target, ...sources )\n\n...\n4. For each element nextSource of sources, in ascending index order, do\na. ...\nb. Else,\ni. Let from be ! ToObject(nextSource).\nii. Let keys be ? from.[[OwnPropertyKeys]]().\nc. For each element nextKey of keys in List order, do\n...\n...\n\n9.1.11.1 OrdinaryOwnPropertyKeys ( O )\n\n...\n3. For each own property key P of O that is a String but is not an integer index,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n4. For each own property key P of O that is a Symbol, in ascending chronological\norder of property creation, do\na. Add P as the last element of keys.\n...\n\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/empty-iterable.js", "esid": " sec-object.fromentries", "description": " When given an empty list, makes an empty object.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\n", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/evaluation-order.js", "esid": " sec-object.fromentries", "description": " Evaluation order is iterator.next(), get '0', get '1', toPropertyKey, repeat.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\n", "includes": ["compareArray.js"], "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-null-entry.js", "esid": " sec-object.fromentries", "description": " Closes iterators when they return entries which are null.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\nd. If Type(nextItem) is not Object, then\ni. Let error be ThrowCompletion(a newly created TypeError object).\nii. Return ? IteratorClose(iteratorRecord, error).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-string-entry.js", "esid": " sec-object.fromentries", "description": " Closes iterators when they return entries which are strings.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\nd. If Type(nextItem) is not Object, then\ni. Let error be ThrowCompletion(a newly created TypeError object).\nii. Return ? IteratorClose(iteratorRecord, error).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-key-accessor.js", "esid": " sec-object.fromentries", "description": " Closes iterators when accessing an entry's key throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ne. Let k be Get(nextItem, \"0\").\nf. If k is an abrupt completion, return ? IteratorClose(iteratorRecord, k).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-key-tostring.js", "esid": " sec-object.fromentries", "description": " Closes iterators when toString on a key throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ne. Let k be Get(nextItem, \"0\").\nf. If k is an abrupt completion, return ? IteratorClose(iteratorRecord, k).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-value-accessor.js", "esid": " sec-object.fromentries", "description": " Closes iterators when accessing an entry's value throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ng. Let v be Get(nextItem, \"1\").\nh. If v is an abrupt completion, return ? IteratorClose(iteratorRecord, v).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-not-closed-for-next-returning-non-object.js", "esid": " sec-object.fromentries", "description": " Does not close iterators with a `next` method which returns a non-object.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-not-closed-for-throwing-done-accessor.js", "esid": " sec-object.fromentries", "description": " Does not close iterators with a `done` accessor which throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-not-closed-for-throwing-next.js", "esid": " sec-object.fromentries", "description": " Does not close iterators with a `next` method which throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-not-closed-for-uncallable-next.js", "esid": " sec-object.fromentries", "description": " Does not close iterators with an uncallable `next` property.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/key-order.js", "description": " Key enumeration order of result objects matches the order of entries in the iterable.", "esid": " sec-object.fromentries", "includes": ["compareArray.js"], "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/length.js", "description": " Object.fromEntries.length is 1.", "esid": " sec-object.fromentries", "includes": ["propertyHelper.js"], "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/name.js", "description": " Object.fromEntries.name is \"fromEntries\".", "esid": " sec-object.fromentries", "includes": ["propertyHelper.js"], "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/prototype.js", "description": " Created objects inherit from Object.prototype.", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/requires-argument.js", "esid": " sec-object.fromentries", "description": " Throws when called without an argument.", "info": " |Object.fromEntries ( iterable )\n\n1. Perform ? RequireObjectCoercible(iterable).\n...\n\n", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/simple-properties.js", "description": " Creates data properties which are enumerable, writable, and configurable.", "esid": " sec-object.fromentries", "includes": ["propertyHelper.js"], "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/string-entry-object-succeeds.js", "description": " Succeeds when an entry object is a boxed string.", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/string-entry-primitive-throws.js", "description": " Throws when an entry object is a primitive string.", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/string-entry-string-object-succeeds.js", "description": " Succeeds when an entry object is a boxed string.", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/supports-symbols.js", "description": " Allows symbol keys.", "esid": " sec-object.fromentries", "features": ["Symbol", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/to-property-key.js", "description": " Coerces keys to strings using ToPropertyKey.", "esid": " sec-object.fromentries", "features": ["Symbol.toPrimitive", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/uses-define-semantics.js", "description": " Uses [[DefineOwnProperty]] rather than [[Set]].", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/uses-keys-not-iterator.js", "description": " Reads properties rather than iterating.", "esid": " sec-object.fromentries", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/proxy-invariant-duplicate-symbol-entry.js", "esid": " sec-object.getownpropertynames", "description": " >Proxy [[OwnPropertyKeys]] trap does not skip symbol keys when validating invariant:\n* The returned List contains no duplicate entries.\n", "info": " |Object.getOwnPropertyNames ( O )\n\n1. Return ? GetOwnPropertyKeys(O, String).\n\nGetOwnPropertyKeys ( O, type )\n\n...\n2. Let keys be ? obj.[[OwnPropertyKeys]]().\n\n[[OwnPropertyKeys]] ( )\n\n...\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n9. If trapResult contains any duplicate entries, throw a TypeError exception.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertySymbols/proxy-invariant-duplicate-string-entry.js", "esid": " sec-object.getownpropertysymbols", "description": " >Proxy [[OwnPropertyKeys]] trap does not skip string keys when validating invariant:\n* The returned List contains no duplicate entries.\n", "info": " |Object.getOwnPropertySymbols ( O )\n\n1. Return ? GetOwnPropertyKeys(O, Symbol).\n\nGetOwnPropertyKeys ( O, type )\n\n...\n2. Let keys be ? obj.[[OwnPropertyKeys]]().\n\n[[OwnPropertyKeys]] ( )\n\n...\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n9. If trapResult contains any duplicate entries, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Object/keys/property-traps-order-with-proxied-array.js", "esid": " sec-object.keys", "description": " >Ensure the correct property traps are called on a proxy of an array.\n", "info": " |19.1.2.16 Object.keys ( O )\n...\n2. Let nameList be ? EnumerableOwnPropertyNames(obj, \"key\").\n...\n\n7.3.21 EnumerableOwnPropertyNames ( O, kind )\n...\n2. Let ownKeys be ? O.[[OwnPropertyKeys]]().\n...\n4. For each element key of ownKeys in List order, do\na. If Type(key) is String, then\ni. Let desc be ? O.[[GetOwnProperty]](key).\n...\n", "features": ["Proxy"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Promise/all/invoke-resolve-get-once-no-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.all", "info": " |Runtime Semantics: PerformPromiseAll\n\n1. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n...\n1. Repeat,\n...\n1. Let nextPromise be ? Call(promiseResolve, constructor, &laquo; nextValue &raquo;).\n"}, {"path": "./test262-main/test/built-ins/Promise/allSettled/call-resolve-element-after-return.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " >Cannot change result value of resolved Promise.allSettled element after Promise.allSettled() returned.\n", "info": " |Promise.allSettled Resolve Element Functions\n\n1. Let F be the active function object.\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n", "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/call-resolve-element-items.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " >Cannot change result value of resolved Promise.allSettled elements.\n", "info": " |Promise.allSettled Resolve Element Functions\n\n1. Let F be the active function object.\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n", "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/call-resolve-element.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " >Cannot change result value of resolved Promise.allSettled element.\n", "info": " |Promise.allSettled Resolve Element Functions\n\n1. Let F be the active function object.\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n", "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/capability-executor-called-twice.js", "esid": " sec-promise.allsettled", "description": " >Throws a TypeError if capabilities executor already called with non-undefined values.\n", "info": " |Promise.allSettled ( iterable )\n\n...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n\nGetCapabilitiesExecutor Functions\n\n...\n4. If promiseCapability.[[Resolve]] is not undefined, throw a TypeError exception.\n5. If promiseCapability.[[Reject]] is not undefined, throw a TypeError exception.\n6. Set promiseCapability.[[Resolve]] to resolve.\n7. Set promiseCapability.[[Reject]] to reject.\n...\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/capability-executor-not-callable.js", "esid": " sec-promise.allsettled", "description": " >Throws a TypeError if either resolve or reject capability is not callable.\n", "info": " |Promise.allSettled ( iterable )\n\n...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n\nNewPromiseCapability ( C )\n\n...\n5. Let executor be CreateBuiltinFunction(steps, \u00ab [[Capability]] \u00bb).\n6. Set executor.[[Capability]] to promiseCapability.\n7. Let promise be ? Construct(C, \u00ab executor \u00bb).\n8. If IsCallable(promiseCapability.[[Resolve]]) is false, throw a TypeError exception.\n9. If IsCallable(promiseCapability.[[Reject]]) is false, throw a TypeError exception.\n...\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/capability-resolve-throws-reject.js", "esid": " sec-promise.allsettled", "description": " >Promise is rejected when the \"resolve\" capability returns an abrupt\ncompletion.\n", "info": " |...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n8. Return Completion(result).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n...\n6. Repeat\n...\nd. If next is false, then\n...\niii. If remainingElementsCount.[[Value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n\n\nIfAbruptRejectPromise\n\n1. IfAbruptRejectPromise(value, capability).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/ctx-ctor-throws.js", "description": " >Promise.allSettled invoked on a constructor value that throws an error\n", "esid": " sec-promise.allsettled", "info": " |3. Let promiseCapability be ? NewPromiseCapability(C).\n\nNewPromiseCapability\n\n...\n7. Let promise be ? Construct(C, \u00ab executor \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/ctx-ctor.js", "description": " >Promise.allSettled invoked on a constructor value\n", "esid": " sec-promise.allsettled", "info": " |3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n...\n8. Return Completion(result).\n", "features": ["Promise.allSettled", "class"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/does-not-invoke-array-setters.js", "esid": " sec-performpromiseallsettled", "description": " >Indexed setter properties on Array.prototype are not invoked.\n", "info": " |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb, IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n...\n4. Let remainingElementsCount be a new Record { [[value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0,\n1. Let valuesArray be CreateArrayFromList(values).\n...\n...\n\n7.3.16 CreateArrayFromList (elements)\n...\n4. For each element e of elements\na. Let status be CreateDataProperty(array, ToString(n), e).\nb. Assert: status is true.\n...\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-error-reject.js", "description": " Promise rejection in response to error", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", \u00ab nextValue \u00bb).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-get-error-reject.js", "description": " >Error retrieving the constructor's `resolve` method (rejecting promise)\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", \u00ab nextValue \u00bb).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-get-error.js", "esid": " sec-promise.allsettled", "description": " >Promise.resolve is retrieved before GetIterator call (abrupt lookup).\n", "info": " |Promise.allSettled ( iterable )\n\n[...]\n3. Let promiseResolve be GetPromiseResolve(C).\n4. IfAbruptRejectPromise(promiseResolve, promiseCapability).\n\nGetPromiseResolve ( promiseConstructor )\n\n[...]\n2. Let promiseResolve be ? Get(promiseConstructor, \"resolve\").\n", "flags": ["async"], "features": ["Promise.allSettled", "Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-get-once-multiple-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n7. 1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n8. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, \u00ab nextValue \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-get-once-no-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n7. 1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n8. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, \u00ab nextValue \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-on-promises-every-iteration-of-custom.js", "description": " >Invocation of the constructor's `resolve` method for iterable with promise values\n", "esid": " sec-promise.allSettled", "info": " |7. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n7. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, \u00ab nextValue \u00bb).\n\n", "flags": ["async"], "features": ["Promise.allSettled", "class", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-on-promises-every-iteration-of-promise.js", "description": " >Invocation of the constructor's `resolve` method for iterable with promise values\n", "esid": " sec-promise.allSettled", "info": " |7. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n7. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, \u00ab nextValue \u00bb).\n\n", "flags": ["async"], "features": ["Promise.allSettled", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-on-values-every-iteration-of-promise.js", "description": " >Invocation of the constructor's `resolve` method for iterable with non-promise values\n", "esid": " sec-promise.allSettled", "info": " |5. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n8. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, \u00ab nextValue \u00bb).\n\n", "flags": ["async"], "features": ["Promise.allSettled", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-return.js", "description": " Use of the value returned by the constructor's `resolve` method.", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", \u00ab nextValue \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve.js", "description": " >Invocation of the constructor's `resolve` method\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", \u00ab nextValue \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-then-error-reject.js", "description": " >Error thrown when invoking the instance's `then` method (rejecting Promise)\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-then-get-error-reject.js", "description": " >Error thrown when accessing the instance's `then` method (rejecting Promise)\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-then.js", "description": " >Invocation of the instance's `then` method\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/is-function.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled is callable", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/iter-next-err-reject.js", "esid": " sec-promise.allsettled", "description": " >Error when call an iterator next step (rejecting promise)\n", "info": " |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n...\n6. Repeat\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\n...\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n1. If value is not present, then\na. Let result be ? Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]], \u00ab \u00bb).\n2. Else,\na. Let result be ? Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]], \u00ab value \u00bb).\n...\n", "features": ["Promise.allSettled", "Symbol.iterator"], "flags": ["async"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/iter-next-val-err-reject.js", "esid": " sec-promise.allsettled", "description": " >Error when accessing an iterator result's `value` property (rejecting promise)\n", "info": " |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n...\n6. Repeat\n...\ne. Let nextValue be IteratorValue(next).\nf. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.\ng. ReturnIfAbrupt(nextValue).\n", "features": ["Promise.allSettled", "Symbol.iterator"], "flags": ["async"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/iter-step-err-reject.js", "esid": " sec-promise.allsettled", "description": " >Error when advancing the provided iterable (rejecting promise)\n", "info": " |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n", "features": ["Promise.allSettled", "Symbol.iterator"], "flags": ["async"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/length.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled `length` property", "info": " |ES Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/name.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled `name` property", "info": " |ES Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/new-reject-function.js", "esid": " sec-performpromiseallsettled", "description": " >Each Promise.allSettled element is called with a new Promise.allSettled Reject Element function.\n", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n...\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/new-resolve-function.js", "esid": " sec-performpromiseallsettled", "description": " >Each Promise.allSettled element is called with a new Promise.allSettled Resolve Element function.\n", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n...\nk Let resolveElement be ! CreateBuiltinFunction(steps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n...\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/prop-desc.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled property descriptor", "info": " |ES Section 17\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-deferred.js", "description": " Rejecting through deferred invocation of the provided resolving function", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-extensible.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " The [[Extensible]] slot of Promise.allSettled Reject Element functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-length.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " The `length` property of Promise.allSettled Reject Element functions", "info": " |The length property of a Promise.allSettled Reject Element function is 1.\n\n17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-multiple-calls.js", "esid": " sec-performpromiseallsettled", "description": " >Cannot tamper with remainingElementsCount when Promise.allSettled reject element function is called multiple times.\n", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability, )\n\nIf alreadyCalled.[[Value]] is true, return undefined.\n\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-name.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " The `name` property of Promise.allSettled Reject Element functions", "info": " |A promise resolve function is an anonymous built-in function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-nonconstructor.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " Promise.allSettled Reject Element functions are not constructors", "info": " |17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-property-order.js", "esid": " sec-createbuiltinfunction", "description": " Promise.allSettled reject element function property order", "info": " |Set order: \"length\", \"name\"\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-prototype.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " The [[Prototype]] of Promise.allSettled Reject Element functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified every built-in function and every built-in\nconstructor has the Function prototype object, which is the initial\nvalue of the expression Function.prototype (19.2.3), as the value of\nits [[Prototype]] internal slot.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-ignored-deferred.js", "description": " >Resolved promises ignore rejections through deferred invocation of the\nprovided resolving function\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-ignored-immed.js", "description": " >Resolved promises ignore rejections through immediate invocation of the\nprovided resolving function\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-immed.js", "description": " Rejecting through immediate invocation of the provided resolving function", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-before-loop-exit-from-same.js", "esid": " sec-performpromiseallsettled", "description": " >Cannot tamper remainingElementsCount when Promise.allSettled resolve element function is called twice in a row.\n", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n\nPromise.allSettled Resolve Element Functions\n\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n", "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-before-loop-exit.js", "esid": " sec-performpromiseallsettled", "description": " >Cannot tamper remainingElementsCount when two Promise.allSettled resolve element functions are called in succession.\n", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n\nPromise.allSettled Resolve Element Functions\n\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n", "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-extensible.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " The [[Extensible]] slot of Promise.allSettled Resolve Element functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-length.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " The `length` property of Promise.allSettled Resolve Element functions", "info": " |The length property of a Promise.allSettled resolve element function is 1.\n\n17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-name.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " The `name` property of Promise.allSettled Resolve Element functions", "info": " |A promise resolve function is an anonymous built-in function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-nonconstructor.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " Promise.allSettled Resolve Element functions are not constructors", "info": " |17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-property-order.js", "esid": " sec-createbuiltinfunction", "description": " Promise.allSettled resolve element function property order", "info": " |Set order: \"length\", \"name\"\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-prototype.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " The [[Prototype]] of Promise.allSettled Resolve Element functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified every built-in function and every built-in\nconstructor has the Function prototype object, which is the initial\nvalue of the expression Function.prototype (19.2.3), as the value of\nits [[Prototype]] internal slot.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-from-same-thenable.js", "esid": " sec-performpromiseallsettled", "description": " >Cannot tamper remainingElementsCount when Promise.allSettled resolve element function is called multiple times.\n", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n\nPromise.allSettled Resolve Element Functions\n\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n", "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-ignores-late-rejection-deferred.js", "description": " >Resolved promises ignore rejections through deferred invocation of the\nprovided resolving function\n", "esid": " sec-promise.allSettled", "info": " |Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nRepeat\n...\nr. Perform ? Invoke(nextPromise, \"then\", \u00ab resultCapability.[[Resolve]], rejectElement \u00bb).\n\n", "flags": ["async"], "features": ["Promise.allSettled", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-ignores-late-rejection.js", "description": " >Resolved promises ignore rejections through immediate invocation of the\nprovided resolving function\n", "esid": " sec-promise.allSettled", "info": " |Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nRepeat\n...\nr. Perform ? Invoke(nextPromise, \"then\", \u00ab resultCapability.[[Resolve]], rejectElement \u00bb).\n\n", "flags": ["async"], "features": ["Promise.allSettled", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-non-callable.js", "esid": " sec-promise.allsettled", "description": " >Promise.resolve is retrieved before GetIterator call (non-callable).\n", "info": " |Promise.allSettled ( iterable )\n\n[...]\n3. Let promiseResolve be GetPromiseResolve(C).\n4. IfAbruptRejectPromise(promiseResolve, promiseCapability).\n\nGetPromiseResolve ( promiseConstructor )\n\n[...]\n2. Let promiseResolve be ? Get(promiseConstructor, \"resolve\").\n3. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n", "flags": ["async"], "features": ["Promise.allSettled", "Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-non-thenable.js", "description": " Resolving with a non-thenable object value", "esid": " sec-promise.allsettled", "info": " |Promise.allSettled Resolve Element Functions\n\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-poisoned-then.js", "description": " Resolving with an object with a \"poisoned\" `then` property", "esid": " sec-promise.allsettled", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-thenable.js", "description": " Resolving with a thenable object value", "esid": " sec-promise.allsettled", "info": " |Let promiseCapability be NewPromiseCapability(C).\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-all-fulfilled.js", "esid": " sec-promise.allsettled", "description": " >Resolution is a collection of all the settled values (all fulfilled)\n", "info": " |Runtime Semantics: PerformPromiseAllSettled\n\n6. Repeat,\n...\nj. Let steps be the algorithm steps defined in Promise.allSettled Resolve Element Functions.\nk. Let resolveElement be ! CreateBuiltinFunction(steps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nr. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.\ns. Let rejectElement be ! CreateBuiltinFunction(rejectSteps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n\nPromise.allSettled Resolve Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"fulfilled\").\n11. Perform ! CreateDataProperty(obj, \"value\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-all-mixed.js", "esid": " sec-promise.allsettled", "description": " >Resolution is a collection of all the settled values (fulfilled and rejected)\n", "info": " |Runtime Semantics: PerformPromiseAllSettled\n\n6. Repeat,\n...\nj. Let steps be the algorithm steps defined in Promise.allSettled Resolve Element Functions.\nk. Let resolveElement be ! CreateBuiltinFunction(steps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nr. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.\ns. Let rejectElement be ! CreateBuiltinFunction(rejectSteps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n\nPromise.allSettled Resolve Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"fulfilled\").\n11. Perform ! CreateDataProperty(obj, \"value\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-all-rejected.js", "esid": " sec-promise.allsettled", "description": " >Resolution is a collection of all the settled values (fulfiled and rejected promises)\n", "info": " |Runtime Semantics: PerformPromiseAllSettled\n\n6. Repeat,\n...\nj. Let steps be the algorithm steps defined in Promise.allSettled Resolve Element Functions.\nk. Let resolveElement be ! CreateBuiltinFunction(steps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nr. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.\ns. Let rejectElement be ! CreateBuiltinFunction(rejectSteps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n\nPromise.allSettled Resolve Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"fulfilled\").\n11. Perform ! CreateDataProperty(obj, \"value\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-immed.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled([]) returns immediately", "includes": ["promiseHelper.js"], "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-sequence-extra-ticks.js", "esid": " sec-promise.allsettled", "description": " Resolution ticks are set in a predictable sequence with extra then calls", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-sequence-mixed.js", "esid": " sec-promise.allsettled", "description": " >Resolution ticks are set in a predictable sequence of mixed fulfilled and rejected promises\n", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-sequence-with-rejections.js", "esid": " sec-promise.allsettled", "description": " Resolution ticks are set in a predictable sequence", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-sequence.js", "esid": " sec-promise.allsettled", "description": " Resolution ticks are set in a predictable sequence", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolved-then-catch-finally.js", "esid": " sec-promise.allsettled", "description": " >Resolution is a collection of all the settled values (all fulfilled)\n", "info": " |Runtime Semantics: PerformPromiseAllSettled\n\n6. Repeat,\n...\nj. Let steps be the algorithm steps defined in Promise.allSettled Resolve Element Functions.\nk. Let resolveElement be ! CreateBuiltinFunction(steps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nr. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.\ns. Let rejectElement be ! CreateBuiltinFunction(rejectSteps, \u00ab [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n\nPromise.allSettled Resolve Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"fulfilled\").\n11. Perform ! CreateDataProperty(obj, \"value\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolves-empty-array.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled([]) returns a Promise for an empty array", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n", "flags": ["async"], "includes": ["promiseHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolves-to-array.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled returned a promise resolves into an array", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] \u2212 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, \u00ab valuesArray \u00bb).\n...\n", "flags": ["async"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/returns-promise.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled returns a Promise", "info": " |Promise.allSettled ( iterable )\n\n3. Let promiseCapability be ? NewPromiseCapability(C).\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n8. Return Completion(result).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/species-get-error.js", "description": " >Promise.allSettled() does not retrieve `Symbol.species` property of the `this` value\n", "esid": " sec-promise.allsettled", "info": " |1. Let C be the this value.\n2. If Type(C) is not Object, throw a TypeError exception.\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n", "features": ["Promise.allSettled", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/Promise/race/invoke-resolve-get-once-multiple-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.race", "info": " |Runtime Semantics: PerformPromiseRace\n\n1. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n...\n1. Repeat,\n...\n1. Let nextPromise be ? Call(promiseResolve, constructor, &laquo; nextValue &raquo;).\n"}, {"path": "./test262-main/test/built-ins/Promise/race/invoke-resolve-get-once-no-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.race", "info": " |Runtime Semantics: PerformPromiseRace\n\n1. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n...\n1. Repeat,\n...\n1. Let nextPromise be ? Call(promiseResolve, constructor, &laquo; nextValue &raquo;).\n"}, {"path": "./test262-main/test/built-ins/Proxy/defineProperty/targetdesc-not-configurable-writable-desc-not-writable.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc", "description": " >Throw a TypeError exception if trap result is true, targetDesc is not configurable\nand writable, while Desc is not writable.\n", "info": " |[[DefineOwnProperty]] (P, Desc)\n\n...\n16. Else targetDesc is not undefined,\n...\nc. If IsDataDescriptor(targetDesc) is true, targetDesc.[[Configurable]] is\nfalse, and targetDesc.[[Writable]] is true, then\ni. If Desc has a [[Writable]] field and Desc.[[Writable]] is\nfalse, throw a TypeError exception.\n...\n", "features": ["Proxy", "Reflect", "proxy-missing-checks"]}, {"path": "./test262-main/test/built-ins/Proxy/deleteProperty/targetdesc-is-configurable-target-is-not-extensible.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-delete-p", "description": " >Throw a TypeError exception if trap result is true, targetDesc is configurable,\nand target is not extensible.\n", "info": " |[[Delete]] (P)\n\n...\n13. Let extensibleTarget be ? IsExtensible(target).\n14. If extensibleTarget is false, throw a TypeError exception.\n...\n", "features": ["Proxy", "Reflect", "proxy-missing-checks"]}, {"path": "./test262-main/test/built-ins/Proxy/getOwnPropertyDescriptor/resultdesc-is-not-configurable-not-writable-targetdesc-is-writable.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p", "description": " >Throws a TypeError exception if resultDesc is both non-configurable and\nnon-writable, while targetDesc is writable.\n", "info": " |[[GetOwnProperty]] (P)\n\n...\n17. If resultDesc.[[Configurable]] is false, then\n...\nb. If resultDesc has a [[Writable]] field and resultDesc.[[Writable]] is\nfalse, then\ni. If targetDesc.[[Writable]] is true, throw a TypeError exception.\n...\n", "features": ["Proxy", "proxy-missing-checks"]}, {"path": "./test262-main/test/built-ins/Proxy/getPrototypeOf/instanceof-custom-return-accepted.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-getprototypeof", "description": " >instanceof operator will return true if trap result is the prototype of the function.\n", "info": " |Runtime Semantics: InstanceofOperator ( V, target )\n\n5. Return ? OrdinaryHasInstance(target, V).\n\nOrdinaryHasInstance ( C, O )\n\n4. Let P be ? Get(C, \"prototype\").\n...\n6. Repeat,\na. Set O to ? O.[[GetPrototypeOf]]().\nb. If O is null, return false.\nc. If SameValue(P, O) is true, return true.\n\n[[GetPrototypeOf]] ( )\n\n7. Let handlerProto be ? Call(trap, handler, \u00ab target \u00bb).\n8. If Type(handlerProto) is neither Object nor Null, throw a TypeError exception.\n9. Let extensibleTarget be ? IsExtensible(target).\n10. If extensibleTarget is true, return handlerProto.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/return-duplicate-entries-throws.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >The returned list must not contain any duplicate entries.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n9. If trapResult contains any duplicate entries, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/return-duplicate-symbol-entries-throws.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >The returned list must not contain any duplicate entries.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n9. If trapResult contains any duplicate entries, throw a TypeError exception.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Currency_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Currency_Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Format.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Format`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Adlam.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Adlam`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Devanagari.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Devanagari`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Egyptian_Hieroglyphs.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Egyptian_Hieroglyphs`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Elymaic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Elymaic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Hiragana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Hiragana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Katakana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Katakana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Lao.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Lao`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Miao.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Miao`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Nandinagari.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Nandinagari`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Nyiakeng_Puachue_Hmong.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Nyiakeng_Puachue_Hmong`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Soyombo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Soyombo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Takri.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Takri`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tamil.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tamil`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Telugu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Telugu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Wancho.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Wancho`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Adlam.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Adlam`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Bengali.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Bengali`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Devanagari.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Devanagari`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Egyptian_Hieroglyphs.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Egyptian_Hieroglyphs`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Elymaic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Elymaic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Grantha.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Grantha`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Hiragana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Hiragana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Kannada.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Kannada`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Katakana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Katakana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Lao.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Lao`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Masaram_Gondi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Masaram_Gondi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Miao.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Miao`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Mongolian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Mongolian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Nandinagari.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Nandinagari`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Nyiakeng_Puachue_Hmong.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Nyiakeng_Puachue_Hmong`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Soyombo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Soyombo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Takri.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Takri`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tamil.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tamil`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Telugu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Telugu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tirhuta.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tirhuta`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Wancho.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Wancho`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/isregexp-called-once.js", "esid": " pending", "description": " IsRegExp should only be called once", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n1. Let R be the this value.\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, \u00ab R, flags \u00bb).\n\n21.2.3.1 RegExp ( pattern, flags )\n1. Let patternIsRegExp be ? IsRegExp(pattern).\n[...]\n", "features": ["Symbol.match", "Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/isregexp-this-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing RegExp's @@match property", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\n", "features": ["Symbol.match", "Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/length.js", "esid": " pending", "description": " RegExp.prototype[Symbol.matchAll] `length` property", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/name.js", "esid": " pending", "description": " RegExp.prototype[Symbol.matchAll] `name` property", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/prop-desc.js", "esid": " pending", "description": " RegExp.prototype[Symbol.matchAll] property descriptor", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/regexpcreate-this-throws.js", "esid": " pending", "description": " Re-throws errors while creating an internal RegExp", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\n3. Else,\na. Let flags be \"g\".\nb. Let matcher be ? RegExpCreate(R, flags).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-get-constructor-throws.js", "esid": " pending", "description": " |Re-throws errors thrown while accessing RegExp's constructor property\n", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-get-species-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing of @@species property", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-is-undefined.js", "esid": " pending", "description": " Throws TypeError if `constructor` property is not an object", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-species-is-null-or-undefined.js", "esid": " pending", "description": " |Default constructor is used when species constructor is null or undefined\n", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n2. Return ? [MatchAllIterator](#matchalliterator)(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n3. Let C be ? [SpeciesConstructor][species-constructor](R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n", "features": ["Symbol.matchAll", "Symbol.species"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-species-throws.js", "esid": " pending", "description": " Re-throws errors when calling constructor's @@species", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\nb. Let flags be ? ToString(? Get(R, \"flags\"))\nc. Let matcher be ? Construct(C, R, flags).\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor.js", "esid": " pending", "description": " Custom species constructor is called when creating internal RegExp", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, \u00ab R, flags \u00bb).\n[...]\n9. If flags contains \"g\", let global be true.\n10. Else, let global be false.\n[...]\n", "features": ["Symbol.matchAll", "Symbol.species"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-regexp-get-global-throws.js", "esid": " pending", "description": " |Doesn't access the \"global\" property of the constructed RegExp\n", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, \u00ab R, flags \u00bb).\n[...]\n9. If flags contains \"g\", let global be true.\n10. Else, let global be false.\n[...]\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-regexp-get-unicode-throws.js", "esid": " pending", "description": " |Doesn't access the \"unicode\" property of the constructed RegExp\n", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, \u00ab R, flags \u00bb).\n[...]\n11. If flags contains \"u\", let fullUnicode be true.\n12. Else, let fullUnicode be false.\n[...]\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/string-tostring-throws.js", "esid": " pending", "description": " String coercion of string parameter", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n1. Let S be ? ToString(O).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/string-tostring.js", "esid": " pending", "description": " String coercion of `string` argument", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n1. Let S be ? ToString(O).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-get-flags-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing RegExp's flags property", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-get-flags.js", "esid": " pending", "description": " Regexp's flags", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-lastindex-cached.js", "esid": " pending", "description": " Verify regexp's lastIndex is cached", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nf. Let lastIndex be ? ToLength(? Get(R, \"lastIndex\")).\ng. Perform ? Set(matcher, \"lastIndex\", lastIndex, true).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-tolength-lastindex-throws.js", "esid": " pending", "description": " Re-throws errors while coercing RegExp's lastIndex", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nf. Let lastIndex be ? ToLength(? Get(R, \"lastIndex\")).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-tostring-flags-throws.js", "esid": " pending", "description": " Re-throws errors while coercing RegExp's flags to a string", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-tostring-flags.js", "esid": " pending", "description": " Corercing regexp's flags", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/poisoned-stdlib.js", "esid": " sec-regexp.prototype-@@replace", "description": " >Both functional and pattern replacement performs as expected with poisoned stdlib.\n", "features": ["Symbol.iterator", "Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/source/value-line-terminator.js", "esid": " sec-get-regexp.prototype.source", "description": " >Return value can be used to create an equivalent RegExp when the\n[[OriginalSource]] internal slot contains a LineTerminator\n", "info": " |[...]\n5. Let src be R.[[OriginalSource]].\n6. Let flags be R.[[OriginalFlags]].\n7. Return EscapeRegExpPattern(src, flags).\n\n21.2.3.2.4 Runtime Semantics: EscapeRegExpPattern\n\n[...] the internal procedure that would result from evaluating S as a\nPattern[~U] (Pattern[+U] if F contains \"u\") must behave identically to the\ninternal procedure given by the constructed object's [[RegExpMatcher]]\ninternal slot.\n"}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/Symbol.toStringTag.js", "esid": " pending", "description": " |`Symbol.toStringTag` property descriptor\n", "info": " |The initial value of the @@toStringTag property is the string value \"String\nIterator\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "features": ["Symbol.matchAll", "Symbol.toStringTag"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/ancestry.js", "esid": " pending", "description": " |The [[Prototype]] internal slot ofthe %RegExpStringIteratorPrototype% is the\n%IteratorPrototype% intrinsic object (25.1.2).\n", "features": ["Symbol.iterator", "Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-call-throws.js", "esid": " pending", "description": " Re-throws errors when calling exec", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\na. Let result be ? Call(exec, R, \u00ab S \u00bb).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-get-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing RegExp's exec property", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing the first match", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-tostring-throws.js", "esid": " pending", "description": " Re-throws errors thrown from coercing first match to a string", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-tostring.js", "esid": " pending", "description": " Behavior when first match is coerced to a empty string", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n2. Let nextIndex be ! AdvanceStringIndex(S, thisIndex, fullUnicode).\n3. Perform ? Set(R, \"lastIndex\", nextIndex, true).\niii. Return ! CreateIterResultObject(match, false).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-not-callable.js", "esid": " pending", "description": " Behavior with a custom RegExp exec", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\n[...]\n5. If R does not have a [[RegExpMatcher]] internal slot, throw a\nTypeError exception.\n6. Return ? RegExpBuiltinExec(R, S).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec.js", "esid": " pending", "description": " Behavior with a custom RegExp exec", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\na. Let result be ? Call(exec, R, \u00ab S \u00bb).\nb. If Type(result) is neither Object or Null, throw a TypeError exception.\nc. Return result.\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/length.js", "esid": " pending", "description": " |%RegExpStringIteratorPrototype%.next `length` property\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/name.js", "esid": " pending", "description": " |%RegExpStringIteratorPrototype%.next `name` property\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/next-iteration-global.js", "esid": " pending", "description": " Iterates over each match", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n4. If O.[[Done]] is true, then\na. Return ! reateIterResultObject(undefined, true).\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\na. Set O.[[Done]] to true.\nb. Return ! CreateIterResultObject(undefined, true).\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n2. Let nextIndex be ! AdvanceStringIndex(S, thisIndex, fullUnicode).\n3. Perform ? Set(R, \"lastIndex\", nextIndex, true).\niii. Return ! CreateIterResultObject(match, false).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/next-iteration.js", "esid": " pending", "description": " Iterates over the first match", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n4. If O.[[Done]] is true, then\na. Return ! reateIterResultObject(undefined, true).\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\na. Set O.[[Done]] to true.\nb. Return ! CreateIterResultObject(undefined, true).\n11. Else,\na. If global is true,\n[...]\nb. Else,\ni. Set O.[[Done]] to true.\nii. Return ! CreateIterResultObject(match, false).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/next-missing-internal-slots.js", "esid": " pending", "description": " Throws TypeError when `this` does not have all internal slots", "info": " |%RegExpStringIteratorPrototype%.next ( )\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have all of the internal slots of a RegExp String Iterator\nObject Instance (see PropertiesOfRegExpStringIteratorInstances), throw a\nTypeError.\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/prop-desc.js", "esid": " pending", "description": " |%RegExpStringIteratorPrototype%.next property descriptor\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/regexp-tolength-lastindex-throws.js", "esid": " pending", "description": " Re-throws errors thrown coercing RegExp's lastIndex to a length", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/this-is-not-object-throws.js", "esid": " pending", "description": " Throws TypeError when `this` is not an Object", "info": " |%RegExpStringIteratorPrototype%.next ( )\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/length.js", "esid": " pending", "description": " String.prototype.matchAll `length` property", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/name.js", "esid": " pending", "description": " String.prototype.matchAll `name` property", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/prop-desc.js", "esid": " pending", "description": " String.prototype.matchAll property descriptor", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-get-matchAll-throws.js", "esid": " pending", "description": " Re-throws errors when calling @@matchAll", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, \u00ab O \u00bb).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-is-null.js", "esid": " pending", "description": " Behavior when regexp is null", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n", "features": ["String.prototype.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-is-undefined-or-null-invokes-matchAll.js", "esid": " pending", "description": " Behavior when regexp is null or undefined", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n", "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-is-undefined.js", "esid": " pending", "description": " Behavior when regexp is null", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Return ? MatchAllIterator(regexp, O).\n\nMatchAllIterator( regexp, O )\n[...]\n2. If ? IsRegExp(regexp) is true, then\n[...]\n3. Else,\na. Let R be RegExpCreate(regexp, \"g\").\n", "features": ["String.prototype.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-matchAll-invocation.js", "esid": " pending", "description": " Invocation of @@matchAll property of user-supplied RegExp objects", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, \u00ab O \u00bb).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-matchAll-is-undefined-or-null.js", "esid": " pending", "description": " Behavior when regexp[@@matchAll] is undefined or null", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-matchAll-not-callable.js", "esid": " pending", "description": " Behavior when regexp[@@matchAll] is not callable", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-matchAll-throws.js", "esid": " pending", "description": " Re-throws errors when calling @@matchAll", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-prototype-get-matchAll-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing RegExp's @@matchAll property", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-prototype-has-no-matchAll.js", "esid": " pending", "description": " Behavior when @@matchAll is removed from RegExp's prototype", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n[...]\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-prototype-matchAll-invocation.js", "esid": " pending", "description": " Behavior when invoking of @@matchAll", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, \u00ab O \u00bb).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-prototype-matchAll-throws.js", "esid": " pending", "description": " Re-throws errors when calling @@matchAll", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, \u00ab O \u00bb).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/this-val-non-obj-coercible.js", "esid": " pending", "description": " The `this` value cannot be coerced into an object", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be RequireObjectCoercible(this value).\n", "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/toString-this-val.js", "esid": " pending", "description": " |Verify ToString is called when regexp[@@matchAll] is undefined or null\n", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/Symbol/matchAll/prop-desc.js", "esid": " pending", "description": " |`Symbol.matchAll` property descriptor\n", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/description-symboldescriptivestring.js", "esid": " sec-symbol.prototype.description", "description": " >SymbolDescriptiveString(sym) via Symbol.prototype.toString()\n", "info": " |SymbolDescriptiveString ( sym )\n\nAssert: Type(sym) is Symbol.\nLet desc be sym's [[Description]] value.\nIf desc is undefined, let desc be the empty string.\nAssert: Type(desc) is String.\nReturn the string-concatenation of \"Symbol(\", desc, and \")\".\n\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/descriptor.js", "esid": " sec-symbol.prototype.description", "description": " >Test the descriptor of Symbol.prototype.description.\n", "info": " |`Symbol.prototype.description` is an accessor property whose\nset accessor function is undefined.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/get.js", "esid": " sec-symbol.prototype.description", "description": " >Test the get accessor function of Symbol.prototype.description.\n", "info": " |1. Let s be the this value.\n2. Let sym be ? thisSymbolValue(s).\n3. Return sym.[[Description]].\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/this-val-non-symbol.js", "esid": " sec-symbol.prototype.description", "description": " >Behavior when \"this\" value is an object without a [[SymbolData]] internal\nslot.\n", "info": " |1. Let s be the this value.\n2. Let sym be ? thisSymbolValue(s).\n3. Return sym.[[Description]].\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/this-val-symbol.js", "esid": " sec-symbol.prototype.description", "description": " >Test that calling the getter on a Symbol or a Symbol wrapper object works.\n", "info": " |1. Let s be the this value.\n2. Let sym be ? thisSymbolValue(s).\n3. Return sym.[[Description]].\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/wrapper.js", "esid": " sec-symbol.prototype.description", "description": " >Test Symbol.prototype.description called on wrapper objects.\n", "info": " |1. Let s be the this value.\n2. Let sym be ? thisSymbolValue(s).\n3. Return sym.[[Description]].\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/stability.js", "esid": " sec-%typedarray%.prototype.sort", "description": " Stability of %TypedArray%.prototype.sort.", "info": " |https://github.com/tc39/ecma262/pull/1433\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/tonumber-value-throws.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Returns abrupt from ToNumber(value)\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nAssert: Type(index) is Number.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/tonumber-value-throws.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Returns abrupt from ToNumber(value)\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nAssert: Type(index) is Number.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\n...\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/default-options-object-prototype.js", "esid": " sec-initializenumberformat", "description": " >Monkey-patching Object.prototype does not change the default\noptions for NumberFormat as a null prototype is used.\n", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/en-US.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " Checks basic behavior for BigInt.prototype.toLocaleString.", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/returns-same-results-as-NumberFormat.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " >Tests that BigInt.prototype.toLocaleString produces the same\nresults as Intl.BigIntFormat.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/throws-same-exceptions-as-NumberFormat.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " >Tests that BigInt.prototype.toLocaleString throws the same\nexceptions as Intl.NumberFormat.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/Collator/prototype/resolvedOptions/order.js", "esid": " sec-intl.collator.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-dateStyle-invalid.js", "esid": " sec-initializedatetimeformat", "description": " >Checks error cases for the options argument to the DateTimeFormat constructor.\n", "info": " |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n28. Let dateStyle be ? GetOption(options, \"dateStyle\", \"string\", \u00ab \"full\", \"long\", \"medium\", \"short\" \u00bb, undefined).\n", "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-dateStyle-valid.js", "esid": " sec-initializedatetimeformat", "description": " >Checks handling of the options argument to the DateTimeFormat constructor.\n", "info": " |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n28. Let dateStyle be ? GetOption(options, \"dateStyle\", \"string\", \u00ab \"full\", \"long\", \"medium\", \"short\" \u00bb, undefined).\n29. If dateStyle is not undefined, set dateTimeFormat.[[DateStyle]] to dateStyle.\n", "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-order.js", "esid": " sec-initializedatetimeformat", "description": " Checks the order of getting options for the DateTimeFormat constructor.", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-throwing-getters-timedate-style.js", "esid": " sec-initializedatetimeformat", "description": " Checks the propagation of exceptions from the options for the DateTimeFormat constructor.", "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-throwing-getters.js", "esid": " sec-initializedatetimeformat", "description": " Checks the propagation of exceptions from the options for the DateTimeFormat constructor."}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-timeStyle-invalid.js", "esid": " sec-initializedatetimeformat", "description": " >Checks error cases for the options argument to the DateTimeFormat constructor.\n", "info": " |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n30. Let timeStyle be ? GetOption(options, \"timeStyle\", \"string\", \u00ab \"full\", \"long\", \"medium\", \"short\" \u00bb, undefined).\n", "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-timeStyle-valid.js", "esid": " sec-initializedatetimeformat", "description": " >Checks handling of the options argument to the DateTimeFormat constructor.\n", "info": " |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n30. Let timeStyle be ? GetOption(options, \"timeStyle\", \"string\", \u00ab \"full\", \"long\", \"medium\", \"short\" \u00bb, undefined).\n31. If timeStyle is not undefined, set dateTimeFormat.[[TimeStyle]] to timeStyle.\n", "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/timedatestyle-en.js", "esid": " sec-date-time-style-pattern", "description": " Checks basic handling of timeStyle and dateStyle.", "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/argument-date-string.js", "esid": " sec-partitiondatetimerangepattern", "description": " >The Date constructor is not called to convert the input value.\n", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n8. Return ? FormatDateTimeRange(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/argument-near-time-boundaries.js", "esid": " sec-partitiondatetimerangepattern", "description": " >TimeClip is applied when calling Intl.DateTimeFormat.prototype.formatRange.\n", "info": " |PartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\nTimeClip ( time )\n...\n2. If abs(time) > 8.64 \u00d7 10^15, return NaN.\n...\n\n", "includes": ["dateConstants.js"], "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/argument-to-integer.js", "esid": " sec-partitiondatetimerangepattern", "description": " >TimeClip applies ToInteger on its input value.\n", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n\nTimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/argument-tonumber-throws.js", "description": " >Return abrupt completions from ToNumber(date)\n", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n", "features": ["Symbol,Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/builtin.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Tests that the Intl.DateTimeFormat.prototype.formatRange function meets the\nrequirements for built-in objects defined by the ECMAScript Language\nSpecification.\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct,Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-is-infinity-throws.js", "description": " >Throws a RangeError if date arg is cast to an Infinity value\n", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a RangeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n7. If x is greater than y, throw a RangeError exception.\n8. Return ? FormatDateTimeRange(dtf, x, y).\n\nFormatDateTimeRange ( dateTimeFormat, x, y )\n\n1. Let parts be ? PartitionDateTimeRangePattern(dateTimeFormat, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\nTimeClip ( time )\n1. If time is not finite, return NaN.\n\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-is-nan-throws.js", "description": " >Throws a RangeError if date arg is cast to NaN\n", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a RangeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n7. If x is greater than y, throw a RangeError exception.\n8. Return ? FormatDateTimeRange(dtf, x, y).\n\nFormatDateTimeRange ( dateTimeFormat, x, y )\n\n1. Let parts be ? PartitionDateTimeRangePattern(dateTimeFormat, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-x-greater-than-y-throws.js", "description": " >Throws a RangeError if date x is greater than y.\n", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n4. Let x be ? ToNumber(startDate).\n5. Let y be ? ToNumber(endDate).\n6. Return ? FormatDateTimeRange(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n5. If x is greater than y, throw a RangeError exception.\n\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/en-US.js", "esid": " sec-partitiondatetimerangepattern", "description": " Basic tests for the en-US output of formatRange()", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n8. Return ? FormatDateTimeRange(dtf, x, y).\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/length.js", "description": " Intl.DateTimeFormat.prototype.formatRange.length.", "includes": ["propertyHelper.js"], "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/name.js", "description": " Intl.DateTimeFormat.prototype.formatRange.name value and descriptor.", "includes": ["propertyHelper.js"], "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/prop-desc.js", "description": " Property type and descriptor.", "includes": ["propertyHelper.js"], "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/argument-date-string.js", "esid": " sec-partitiondatetimerangepattern", "description": " >The Date constructor is not called to convert the input value.\n", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n8. Return ? FormatDateTimeRange(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/argument-near-time-boundaries.js", "esid": " sec-partitiondatetimerangepattern", "description": " >TimeClip is applied when calling Intl.DateTimeFormat.prototype.formatRangeToParts.\n", "info": " |PartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\nTimeClip ( time )\n...\n2. If abs(time) > 8.64 \u00d7 10^15, return NaN.\n...\n\n", "includes": ["dateConstants.js"], "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/argument-to-integer.js", "esid": " sec-partitiondatetimerangepattern", "description": " >TimeClip applies ToInteger on its input value.\n", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n\nTimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/argument-tonumber-throws.js", "description": " >Return abrupt completions from ToNumber(date)\n", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n", "features": ["Symbol,Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/builtin.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Tests that the Intl.DateTimeFormat.prototype.formatRangeToParts function meets the\nrequirements for built-in objects defined by the ECMAScript Language\nSpecification.\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct,Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-is-infinity-throws.js", "description": " >Throws a RangeError if date arg is cast to an Infinity value\n", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a RangeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n7. If x is greater than y, throw a RangeError exception.\n8. Return ? FormatDateTimeRangeToParts(dtf, x, y).\n\nFormatDateTimeRangeToParts ( dateTimeFormat, x, y )\n\n1. Let parts be ? PartitionDateTimeRangePattern(dateTimeFormat, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\nTimeClip ( time )\n1. If time is not finite, return NaN.\n\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-is-nan-throws.js", "description": " >Throws a RangeError if date arg is cast to Nan\n", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a RangeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n7. If x is greater than y, throw a RangeError exception.\n8. Return ? FormatDateTimeRangeToParts(dtf, x, y).\n\nFormatDateTimeRangeToParts ( dateTimeFormat, x, y )\n\n1. Let parts be ? PartitionDateTimeRangePattern(dateTimeFormat, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-x-greater-than-y-throws.js", "description": " >Throws a RangeError if date x is greater than y.\n", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n4. Let x be ? ToNumber(startDate).\n5. Let y be ? ToNumber(endDate).\n6. Return ? FormatDateTimeRangeToParts(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n5. If x is greater than y, throw a RangeError exception.\n\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/en-US.js", "esid": " sec-partitiondatetimerangepattern", "description": " Basic tests for the en-US output of formatRangeToParts()", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n8. Return ? FormatDateTimeRange(dtf, x, y).\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/length.js", "description": " Intl.DateTimeFormat.prototype.formatRangeToParts.length.", "includes": ["propertyHelper.js"], "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/name.js", "description": " Intl.DateTimeFormat.prototype.formatRangeToParts.name value and descriptor.", "includes": ["propertyHelper.js"], "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/pattern-on-calendar.js", "esid": " sec-initializedatetimeformat", "description": " >Checks the DateTimeFormat choose different patterns based\non calendar.\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/prop-desc.js", "description": " Property type and descriptor.", "includes": ["propertyHelper.js"], "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/main.js", "description": " Tests for existance and behavior of Intl.DateTimeFormat.prototype.formatToParts"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle-default.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings.\n", "info": " |12.4.5 Intl.DateTimeFormat.prototype.resolvedOptions()\n\n12.1.1 InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n29. If dateTimeFormat.[[Hour]] is not undefined, then\na. Let hcDefault be dataLocaleData.[[hourCycle]].\nb. Let hc be dateTimeFormat.[[HourCycle]].\nc. If hc is null, then\ni. Set hc to hcDefault.\nd. If hour12 is not undefined, then\ni. If hour12 is true, then\n1. If hcDefault is \"h11\" or \"h23\", then\na. Set hc to \"h11\".\n2. Else,\na. Set hc to \"h12\".\nii. Else,\n1. Assert: hour12 is false.\n2. If hcDefault is \"h11\" or \"h23\", then\na. Set hc to \"h23\".\n3. Else,\na. Set hc to \"h24\".\ne. Set dateTimeFormat.[[HourCycle]] to hc.\n\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/order-style.js", "esid": " sec-intl.datetimeformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["arrayContains.js"], "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/order.js", "esid": " sec-intl.datetimeformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["arrayContains.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/Locale-object.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests for Locale objects in the argument to getCanonicalLocales", "info": " |CanonicalizeLocaleList ( locales )\n7. c. iii. If Type(kValue) is Object and kValue has an [[InitializedLocale]] internal slot, then\n1. Let tag be kValue.[[Locale]].\n", "includes": ["compareArray.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/non-iana-canon.js", "esid": " sec-intl.getcanonicallocales", "description": " >Verifies canonicalization, of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n"}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/preferred-variant.js", "esid": " sec-intl.getcanonicallocales", "description": " >Call Intl.getCanonicalLocales function with grandfathered language tags.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. Let canonicalizedTag be CanonicalizeLanguageTag(tag).\n...\n\n6.2.3 CanonicalizeLanguageTag ( locale )\nThe CanonicalizeLanguageTag abstract operation returns the canonical and case-regularized\nform of the locale argument (which must be a String value that is a structurally valid\nBCP 47 language tag as verified by the IsStructurallyValidLanguageTag abstract operation).\nA conforming implementation shall take the steps specified in RFC 5646 section 4.5, or\nsuccessor, to bring the language tag into canonical form, and to regularize the case of\nthe subtags. Furthermore, a conforming implementation shall not take the steps to bring\na language tag into \"extlang form\", nor shall it reorder variant subtags.\n\nThe specifications for extensions to BCP 47 language tags, such as RFC 6067, may include\ncanonicalization rules for the extension subtag sequences they define that go beyond the\ncanonicalization rules of RFC 5646 section 4.5. Implementations are allowed, but not\nrequired, to apply these additional rules.\n\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/locales-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks error cases for the locales argument to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n", "includes": ["testIntl.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/newtarget-undefined.js", "esid": " sec-intl.ListFormat", "description": " >Verifies the NewTarget check for Intl.ListFormat.\n", "info": " |Intl.ListFormat ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of a null options argument to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n3. Else\na. Let options be ? ToObject(options).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-localeMatcher-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of invalid value for the localeMatcher option to the ListFormat constructor.", "info": " |Intl.ListFormat ( [ locales [ , options ] ] )\n12. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-order.js", "esid": " sec-Intl.ListFormat", "description": " Checks the order of operations on the options argument to the ListFormat constructor.", "info": " |Intl.ListFormat ( [ locales [ , options ] ] )\n7. Let type be GetOption(options, \"type\", \"string\", \u00ab \"conjunction\", \"disjunction\", \"unit\" \u00bb, \"conjunction\").\n9. Let style be GetOption(options, \"style\", \"string\", \u00ab \"long\", \"short\", \"narrow\" \u00bb, \"long\").\n12. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n", "includes": ["compareArray.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-style-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of invalid value for the style option to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n9. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-style-valid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of valid values for the style option to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\nInitializeListFormat (listFormat, locales, options)\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"conjunction\",\n\"disjunction\", \"unit\" \u00bb, \"conjunction\").\n13. Set listFormat.[[Type]] to type.\n14. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"long\", \"short\",\n\"narrow\" \u00bb, \"long\").\n15. Set listFormat.[[Style]] to style.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-throwing-getters.js", "esid": " sec-Intl.ListFormat", "description": " Checks the propagation of exceptions from the options for the ListFormat constructor.", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-toobject-prototype.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of non-object option arguments to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-toobject.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of non-object option arguments to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-type-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of invalid value for the type option to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n7. Let type be GetOption(options, \"type\", \"string\", \u00ab \"conjunction\", \"disjunction\", \"unit\" \u00bb, \"conjunction\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-type-valid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of valid values for the style option to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n7. Let type be GetOption(options, \"type\", \"string\", \u00ab \"conjunction\", \"disjunction\", \"unit\" \u00bb, \"conjunction\").\n8. Set listFormat.[[Type]] to type.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-undefined.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of non-object option arguments to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/subclassing.js", "esid": " sec-Intl.ListFormat", "description": " Checks that ListFormat can be subclassed.", "info": " |Intl.ListFormat ( [ locales [ , options ] ] )\n\n2. Let listFormat be ? OrdinaryCreateFromConstructor(NewTarget, \"%ListFormatPrototype%\", \u00ab [[InitializedListFormat]], [[Locale]], [[Type]], [[Style]] \u00bb).\n\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/length.js", "esid": " sec-Intl.ListFormat", "description": " >Checks the \"length\" property of the ListFormat constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/name.js", "esid": " sec-Intl.ListFormat", "description": " >Checks the \"name\" property of the ListFormat constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/prop-desc.js", "esid": " sec-Intl.ListFormat", "description": " >\"ListFormat\" property of Intl.\n", "info": " |Intl.ListFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/prototype.js", "esid": " sec-Intl.ListFormat", "description": " The prototype of the Intl.ListFormat constructor is %FunctionPrototype%.", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nUnless otherwise specified every built-in function object has the %FunctionPrototype% object as the initial value of its [[Prototype]] internal slot.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/basic.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Tests that Intl.ListFormat has a supportedLocalesOf property,\nand it works as planned.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/branding.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Verifies there's no branding check for Intl.ListFormat.supportedLocalesOf().\n", "info": " |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/length.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Checks the \"length\" property of Intl.ListFormat.supportedLocalesOf().\n", "info": " |The value of the length property of the supportedLocalesOf method is 1.\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, has a length property whose value is an integer.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/locales-invalid.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks error cases for the locales argument to the supportedLocalesOf function.", "info": " |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n\n2. Let requestedLocales be CanonicalizeLocaleList(locales).\n", "includes": ["testIntl.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/name.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Checks the \"name\" property of Intl.ListFormat.supportedLocalesOf().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-localeMatcher-invalid.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks handling of invalid values for the localeMatcher option to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-null.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks handling of a null options argument to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-toobject.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks handling of non-object options arguments to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-undefined.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks handling of an undefined options argument to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/prop-desc.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Checks the \"supportedLocalesOf\" property of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/result-type.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Verifies the type of the return value of Intl.ListFormat.supportedLocalesOf().", "info": " |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/instance/extensibility.js", "esid": " sec-Intl.ListFormat", "description": " Intl.ListFormat instance object extensibility", "info": " |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/instance/prototype.js", "esid": " sec-Intl.ListFormat", "description": " Intl.ListFormat instance object is created from %ListFormatPrototype%.", "info": " |Intl.ListFormat ([ locales [ , options ]])\n\n2. Let listFormat be ? OrdinaryCreateFromConstructor(NewTarget, \"%ListFormatPrototype%\", \u00ab [[InitializedListFormat]], [[Locale]], [[Type]], [[Style]] \u00bb).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/constructor/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype.constructor", "description": " Checks the \"constructor\" property of the ListFormat prototype object.", "info": " |Intl.ListFormat.prototype.constructor\n\nThe initial value of Intl.ListFormat.prototype.constructor is %ListFormat%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/branding.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Verifies the branding check for the \"format\" function of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype.format ([ list ])\n\n2. If Type(lf) is not Object, throw a TypeError exception.\n3. If lf does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-default.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-disjunction.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-narrow.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-short.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-unit.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/es-es-narrow.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-getiterator-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterablecalled by Intl.ListFormat.prototype.format() while the GetIterator\nthrows error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorstep-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() while iteratorStep throws error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorvalue-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() while iteratorValue throws error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-undefined.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format(undefined).\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format().\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/length.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the \"length\" property of Intl.ListFormat.prototype.format().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/name.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the \"name\" property of Intl.ListFormat.prototype.format().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the \"format\" property of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype.format ([ list ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/branding.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Verifies the branding check for the \"formatToParts\" function of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype.formatToParts([ list ])\n\n2. If Type(lf) is not Object, throw a TypeError exception.\n3. If lf does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-default.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-disjunction.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-narrow.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-short.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-unit.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-narrow.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-getiterator-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while the GetIterator\nthrows error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorstep-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while iteratorStep throws error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorvalue-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while iteratorValue throws error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-undefined.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts(undefined).\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n", "features": ["Intl.ListFormat"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts().\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/length.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the \"length\" property of Intl.ListFormat.prototype.formatToParts().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/name.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the \"name\" property of Intl.ListFormat.prototype.formatToParts().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the \"formatToParts\" property of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype.formatToParts ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype", "description": " >Checks the \"prototype\" property of the ListFormat constructor.\n", "info": " |Intl.ListFormat.prototype\n\nThe value of Intl.ListFormat.prototype is %ListFormatPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/branding.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Verifies the branding check for the \"resolvedOptions\" function of the ListFormat prototype object.", "info": " |Intl.ListFormat.prototype.resolvedOptions()\n\n2. If Type(pr) is not Object, throw a TypeError exception.\n3. If pr does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/caching.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Verifies that the return value of Intl.ListFormat.prototype.resolvedOptions() is not cached.", "info": " |Intl.ListFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/length.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Checks the \"length\" property of Intl.ListFormat.prototype.resolvedOptions().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/name.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Checks the \"name\" property of Intl.ListFormat.prototype.resolvedOptions().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/order.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Checks the \"resolvedOptions\" property of the ListFormat prototype object.", "info": " |Intl.ListFormat.prototype.resolvedOptions ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/toStringTag/toString.js", "esid": " sec-intl.ListFormat.prototype-@@tostringtag", "description": " >Checks Object.prototype.toString with Intl.ListFormat objects.\n", "info": " |Intl.ListFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.ListFormat\".\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/toStringTag/toStringTag.js", "esid": " sec-intl.ListFormat.prototype-@@tostringtag", "description": " >Checks the @@toStringTag property of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.ListFormat\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Locale/canonicalize-locale-list-take-locale.js", "esid": " sec-intl.locale", "description": " >Verifies CanonicalizeLocaleList will take Intl.Locale as locales.\n", "info": " |CanonicalizeLocaleList ( locales )\n3. If Type(locales) is String or locales has an [[InitializedLocale]] internal slot, then\na. Let O be CreateArrayFromList(\u00ab locales \u00bb).\n\nc. iii. If Type(kValue) is Object and kValue has an [[InitializedLocale]] internal slot, then\n1. Let tag be kValue.[[Locale]].\niv. Else,\n1. Let tag be ? ToString(kValue).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-getter-order.js", "esid": " sec-intl.locale", "description": " >Checks the order of evaluations of arguments and options for the Locale\nconstructor.\n", "features": ["Intl.Locale"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Locale/constructor-locale-object.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-newtarget-undefined.js", "esid": " sec-intl.locale", "description": " >Verifies the NewTarget check for Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-non-iana-canon.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization, minimization and maximization of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n\nIntl.Locale.prototype.maximize ()\n3. Let maximal be the result of the Add Likely Subtags algorithm applied to loc.[[Locale]].\n\nIntl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-calendar-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n15. If calendar is not undefined, then\na. If calendar does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n16. Set opt.[[ca]] to calendar.\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-calendar-valid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n14. Let calendar be ? GetOption(options, \"calendar\", \"string\", undefined, undefined).\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-canonicalized.js", "esid": " sec-resolvelocale", "description": " >Values provided as properties of the options-argument to the Locale\nconstructor are converted to canonical form.\n", "info": " |ResolveLocale ( availableLocales, requestedLocales, options, relevantExtensionKeys, localeData )\n\n...\n9.i.iii.1. Let optionsValue be the string optionsValue after performing the algorithm steps to transform Unicode extension values to canonical syntax per Unicode Technical Standard #35 LDML \u00a7 3.2.1 Canonical Unicode Locale Identifiers, treating key as ukey and optionsValue as uvalue productions.\n9.i.iii.2. Let optionsValue be the string optionsValue after performing the algorithm steps to replace Unicode extension values with their canonical form per Unicode Technical Standard #35 LDML \u00a7 3.2.1 Canonical Unicode Locale Identifiers, treating key as ukey and optionsValue as uvalue productions.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-casefirst-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n22. Let kf be ? GetOption(options, \"caseFirst\", \"string\", \u00ab \"upper\", \"lower\", \"false\" \u00bb, undefined).\n...\n\nGetOption ( options, property, type, values, fallback )\n...\n2.d. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-casefirst-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n22. Let kf be ? GetOption(options, \"caseFirst\", \"string\", \u00ab \"upper\", \"lower\", \"false\" \u00bb, undefined).\n23. Set opt.[[kf]] to kf.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-collation-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n18. If collation is not undefined, then\na. If collation does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-collation-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n17. Let collation be ? GetOption(options, \"collation\", \"string\", undefined, undefined).\n...\n19. Set opt.[[co]] to collation.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-hourcycle-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n20. Let hc be ? GetOption(options, \"hourCycle\", \"string\", \u00ab \"h11\", \"h12\", \"h23\", \"h24\" \u00bb, undefined).\n...\n\nGetOption ( options, property, type, values, fallback )\n...\n2.d. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-hourcycle-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n20. Let hc be ? GetOption(options, \"hourCycle\", \"string\", \u00ab \"h11\", \"h12\", \"h23\", \"h24\" \u00bb, undefined).\n21. Set opt.[[hc]] to hc.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-language-grandfathered.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |ApplyOptionsToTag( tag, options )\n...\n3. Let language be ? GetOption(options, \"language\", \"string\", undefined, undefined).\n4. If language is not undefined, then\na. If language does not match the language production, throw a RangeError exception.\nb. If language matches the grandfathered production, throw a RangeError exception.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-language-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n4. If language is not undefined, then\na. If language does not match the language production, throw a RangeError exception.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-language-valid-undefined.js", "esid": " sec-intl.locale", "description": " >Verify valid language option values (undefined)\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-language-valid.js", "esid": " sec-intl.locale", "description": " >Verify valid language option values (various)\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n3. Let language be ? GetOption(options, \"language\", \"string\", undefined, undefined).\n4. If language is not undefined, then\na. If language does not match the unicode_language_subtag production, throw a RangeError exception.\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-numberingsystem-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n28. If numberingSystem is not undefined, then\na. If numberingSystem does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-numberingsystem-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n27. Let numberingSystem be ? GetOption(options, \"numberingSystem\", \"string\", undefined, undefined).\n...\n29. Set opt.[[nu]] to numberingSystem.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-numeric-undefined.js", "esid": " sec-intl.locale", "description": " Verifies the behavior of an undefined numeric option to the Locale constructor.", "info": " |Intl.Locale( tag [, options] )\n\n...\n24. Let kn be ? GetOption(options, \"numeric\", \"boolean\", undefined, undefined).\n25. If kn is not undefined, set kn to ! ToString(kn).\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-numeric-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n24. Let kn be ? GetOption(options, \"numeric\", \"boolean\", undefined, undefined).\n25. If kn is not undefined, set kn to ! ToString(kn).\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-region-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n8. If region is not undefined, then\na. If region does not match the region production, throw a RangeError exception.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-script-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n6. If script is not undefined, then\na. If script does not match the script production, throw a RangeError exception.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-script-valid-undefined.js", "esid": " sec-intl.locale", "description": " >Verify valid script option values (undefined)\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n5. Let script be ? GetOption(options, \"script\", \"string\", undefined, undefined).\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\nc. If script is not undefined, then\ni. If tag does not contain a script production, then\n1. Set tag to the concatenation of the language production of tag, \"-\", script, and the rest of tag.\nii. Else,\n1. Set tag to tag with the substring corresponding to the script production replaced by the string script.\n\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-script-valid.js", "esid": " sec-intl.locale", "description": " >Verify valid language option values (various)\n", "info": " |Intl.Locale( tag [, options] )\n9. Else,\na. Let tag be ? ToString(tag).\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n5. Let script be ? GetOption(options, \"script\", \"string\", undefined, undefined).\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\nc. If script is not undefined, then\ni. If tag does not contain a script production, then\n1. Set tag to the concatenation of the language production of tag, \"-\", script, and the rest of tag.\nii. Else,\n1. Set tag to tag with the substring corresponding to the script production replaced by the string script.\n\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-throwing-getters.js", "esid": " sec-Intl.Locale", "description": " Checks the propagation of exceptions from the options for the Locale constructor.", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-parse-twice.js", "esid": " sec-intl.locale", "description": " >Verifies the handling of options with grandfathered tags.\n", "info": " |Intl.Locale( tag [, options] )\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n14. Let calendar be ? GetOption(options, \"calendar\", \"string\", undefined, undefined).\n16. Set opt.[[ca]] to calendar.\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n\nApplyOptionsToTag( tag, options )\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-tag-tostring.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the string conversion of the locale argument to the\nLocale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n8. If Type(tag) is Object and tag has an [[InitializedLocale]] internal slot, then\n9. Else,\na. Let tag be ? ToString(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-unicode-ext-invalid.js", "esid": " sec-intl.locale", "description": " >Verifies treatment of specific structurally invalid tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-unicode-ext-valid.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/extensions-private.js", "esid": " sec-intl.locale", "description": " >Verifies handling of options with privateuse tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n\n\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/function-prototype.js", "esid": " sec-intl.locale", "description": " >The value of the [[Prototype]] internal slot of the Intl.Locale constructor is the\nintrinsic object %FunctionPrototype%.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/getters-grandfathered.js", "esid": " sec-intl.locale", "description": " >Verifies getters with grandfathered tags.\n", "info": " |get Intl.Locale.prototype.baseName\n5. Return the substring of locale corresponding to the\nlanguage [\"-\" script] [\"-\" region] *(\"-\" variant)\nsubsequence of theunicode_language_id grammar.\n\nget Intl.Locale.prototype.language\n5. Return the substring of locale corresponding to the\nunicode_language_subtag production.\n\nget Intl.Locale.prototype.script\n6. Return the substring of locale corresponding to the\nunicode_script_subtag production.\n\nget Intl.Locale.prototype.region\n6. Return the substring of locale corresponding to the unicode_region_subtag\nproduction.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/getters-missing.js", "esid": " sec-intl.locale", "description": " >Verifies getters with missing tags.\n", "info": " |get Intl.Locale.prototype.baseName\n5. Return the substring of locale corresponding to the\nlanguage [\"-\" script] [\"-\" region] *(\"-\" variant)\nsubsequence of the langtag grammar.\n\nget Intl.Locale.prototype.language\n4. Return the substring of locale corresponding to the language production.\n\nget Intl.Locale.prototype.script\n6. If locale does not contain the [\"-\" script] sequence, return undefined.\n7. Return the substring of locale corresponding to the script production.\n\nget Intl.Locale.prototype.region\n6. If locale does not contain the [\"-\" region] sequence, return undefined.\n7. Return the substring of locale corresponding to the region production.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/instance-extensibility.js", "esid": " sec-intl.locale", "description": " >Intl.Locale instance object extensibility\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/instance.js", "esid": " sec-intl.locale", "description": " >Intl.Locale instance object created from %LocalePrototype%.\n", "info": " |Intl.Locale( tag [, options] )\n\n6. Let locale be ?\nOrdinaryCreateFromConstructor(NewTarget, %LocalePrototype%,\ninternalSlotsList).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-boolean.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-null.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-number.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-symbol.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale", "Symbol"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-undefined.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n...\n\nApplyOptionsToTag( tag, options )\n\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n", "includes": ["testIntl.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/length.js", "esid": " sec-intl.locale", "description": " >Checks the \"length\" property of the Locale constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/likely-subtags.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization, minimization and maximization of specific tags.\n", "info": " |Intl.Locale.prototype.maximize ()\n3. Let maximal be the result of the Add Likely Subtags algorithm applied to loc.[[Locale]].\n\nIntl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/name.js", "esid": " sec-intl.locale", "description": " >Checks the \"name\" property of the Locale constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prop-desc.js", "esid": " sec-intl.locale", "description": " >\"Locale\" property of Intl.\n", "info": " |Intl.Locale (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/baseName/branding.js", "esid": " sec-Intl.Locale.prototype.baseName", "description": " >Verifies the branding check for the \"baseName\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.baseName\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/baseName/name.js", "esid": " sec-intl.locale.prototype.baseName", "description": " >Checks the \"name\" property of Intl.Locale.prototype.baseName.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/baseName/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"baseName\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.baseName\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/calendar/branding.js", "esid": " sec-Intl.Locale.prototype.calendar", "description": " >Verifies the branding check for the \"calendar\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.calendar\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/calendar/name.js", "esid": " sec-intl.locale.prototype.calendar", "description": " >Checks the \"name\" property of Intl.Locale.prototype.calendar.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/calendar/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"calendar\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.calendar\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/caseFirst/branding.js", "esid": " sec-Intl.Locale.prototype.caseFirst", "description": " >Verifies the branding check for the \"caseFirst\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.caseFirst\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/caseFirst/name.js", "esid": " sec-intl.locale.prototype.caseFirst", "description": " >Checks the \"name\" property of Intl.Locale.prototype.caseFirst.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/caseFirst/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"caseFirst\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.caseFirst\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/collation/branding.js", "esid": " sec-Intl.Locale.prototype.collation", "description": " >Verifies the branding check for the \"collation\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.collation\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/collation/name.js", "esid": " sec-intl.locale.prototype.collation", "description": " >Checks the \"name\" property of Intl.Locale.prototype.collation.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/collation/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"collation\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.collation\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/constructor/prop-desc.js", "esid": " sec-intl.locale.prototype.constructor", "description": " >Checks the \"constructor\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.constructor\n\nThe initial value of Intl.Locale.prototype.constructor is %Locale%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/hourCycle/branding.js", "esid": " sec-Intl.Locale.prototype.hourCycle", "description": " >Verifies the branding check for the \"hourCycle\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.hourCycle\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/hourCycle/name.js", "esid": " sec-intl.locale.prototype.hourCycle", "description": " >Checks the \"name\" property of Intl.Locale.prototype.hourCycle.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/hourCycle/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"hourCycle\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.hourCycle\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/language/branding.js", "esid": " sec-Intl.Locale.prototype.language", "description": " >Verifies the branding check for the \"language\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.language\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/language/name.js", "esid": " sec-intl.locale.prototype.language", "description": " >Checks the \"name\" property of Intl.Locale.prototype.language.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/language/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"language\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.language\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/maximize/branding.js", "esid": " sec-Intl.Locale.prototype.maximize", "description": " >Verifies the branding check for the \"maximize\" function of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.maximize\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/maximize/length.js", "esid": " sec-intl.locale.prototype.maximize", "description": " >Checks the \"length\" property of Intl.Locale.prototype.maximize().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/maximize/name.js", "esid": " sec-intl.locale.prototype.maximize", "description": " >Checks the \"name\" property of Intl.Locale.prototype.maximize().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/maximize/prop-desc.js", "esid": " sec-intl.locale.prototype.maximize", "description": " >Checks the \"maximize\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.maximize ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/branding.js", "esid": " sec-Intl.Locale.prototype.minimize", "description": " >Verifies the branding check for the \"minimize\" function of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.minimize\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/length.js", "esid": " sec-intl.locale.prototype.minimize", "description": " >Checks the \"length\" property of Intl.Locale.prototype.minimize().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/name.js", "esid": " sec-intl.locale.prototype.minimize", "description": " >Checks the \"name\" property of Intl.Locale.prototype.minimize().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"minimize\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.minimize ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numberingSystem/branding.js", "esid": " sec-Intl.Locale.prototype.numberingSystem", "description": " >Verifies the branding check for the \"numberingSystem\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.numberingSystem\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numberingSystem/name.js", "esid": " sec-intl.locale.prototype.numberingSystem", "description": " >Checks the \"name\" property of Intl.Locale.prototype.numberingSystem.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numberingSystem/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"numberingSystem\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.numberingSystem\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numeric/branding.js", "esid": " sec-Intl.Locale.prototype.numeric", "description": " >Verifies the branding check for the \"numeric\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.numeric\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numeric/name.js", "esid": " sec-intl.locale.prototype.numeric", "description": " >Checks the \"name\" property of Intl.Locale.prototype.numeric.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numeric/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"numeric\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.numeric\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/prop-desc.js", "esid": " sec-intl.locale.prototype", "description": " >Checks the \"prototype\" property of the Locale constructor.\n", "info": " |Intl.Locale.prototype\n\nThe value of Intl.Locale.prototype is %LocalePrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/region/branding.js", "esid": " sec-Intl.Locale.prototype.region", "description": " >Verifies the branding check for the \"region\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.region\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/region/name.js", "esid": " sec-intl.locale.prototype.region", "description": " >Checks the \"name\" property of Intl.Locale.prototype.region.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/region/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"region\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.region\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAregion objects in the ECMAregion 2019 region Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/script/branding.js", "esid": " sec-Intl.Locale.prototype.script", "description": " >Verifies the branding check for the \"script\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.script\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/script/name.js", "esid": " sec-intl.locale.prototype.script", "description": " >Checks the \"name\" property of Intl.Locale.prototype.script.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/script/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"script\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.script\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 script Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toString/branding.js", "esid": " sec-Intl.Locale.prototype.toString", "description": " >Verifies the branding check for the \"toString\" function of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.toString\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toString/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"toString\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.toString ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toStringTag/toString-removed-tag.js", "esid": " sec-intl.locale.prototype-@@tostringtag", "description": " >Checks Object.prototype.toString with Intl.Locale objects.\n", "info": " |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n", "features": ["Intl.Locale", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toStringTag/toString.js", "esid": " sec-intl.locale.prototype-@@tostringtag", "description": " >Checks Object.prototype.toString with Intl.Locale objects.\n", "info": " |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n", "features": ["Intl.Locale", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toStringTag/toStringTag.js", "esid": " sec-intl.locale.prototype-@@tostringtag", "description": " >Checks the @@toStringTag property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Locale/reject-duplicate-variants.js", "esid": " sec-isstructurallyvalidlanguagetag", "description": " >Verifies that duplicate variants in a tag (\"en-emodeng-emodeng\") make the tag\nstructurally invalid.\n", "info": " |the `unicode_language_id` within _locale_ contains no duplicate\n`unicode_variant_subtag` subtags\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/subclassing.js", "esid": " sec-Intl.Locale", "description": " Checks that Locale can be subclassed.", "info": " |Intl.Locale( tag [, options] )\n\n6. Let locale be ? OrdinaryCreateFromConstructor(NewTarget, %LocalePrototype%, internalSlotsList).\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-compactDisplay-compact.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n19. Let compactDisplay be ? GetOption(options, \"compactDisplay\", \"string\", \u00ab \"short\", \"long\" \u00bb, \"short\").\n20. If notation is \"compact\", then\na. Set numberFormat.[[CompactDisplay]] to compactDisplay.\n\n", "includes": ["compareArray.js"], "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-compactDisplay-no-compact.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n19. Let compactDisplay be ? GetOption(options, \"compactDisplay\", \"string\", \u00ab \"short\", \"long\" \u00bb, \"short\").\n20. If notation is \"compact\", then\na. Set numberFormat.[[CompactDisplay]] to compactDisplay.\n\n", "includes": ["compareArray.js"], "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-notation.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the notation option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n16. Let notation be ? GetOption(options, \"notation\", \"string\", \u00ab \"standard\", \"scientific\", \"engineering\", \"compact\" \u00bb, \"standard\").\n17. Set numberFormat.[[Notation]] to notation.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-signDisplay.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n23. Let signDisplay be ? GetOption(options, \"signDisplay\", \"string\", \u00ab \"auto\", \"never\", \"always\", \"exceptZero\" \u00bb, \"auto\").\n24. Set numberFormat.[[SignDisplay]] to signDisplay.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-unitDisplay.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n23. Let signDisplay be ? GetOption(options, \"signDisplay\", \"string\", \u00ab \"auto\", \"never\", \"always\", \"exceptZero\" \u00bb, \"auto\").\n24. Set numberFormat.[[SignDisplay]] to signDisplay.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/currencyDisplay-unit.js", "esid": " sec-setnumberformatunitoptions", "description": " Checks handling of valid values for the numeric option to the NumberFormat constructor.", "info": " |SetNumberFormatUnitOptions ( intlObj, options )\n\n6. Let currencyDisplay be ? GetOption(options, \"currencyDisplay\", \"string\", \u00ab \"code\", \"symbol\", \"narrowSymbol\", \"name\" \u00bb, \"symbol\").\n11. If style is \"currency\", then\nf. Set intlObj.[[CurrencyDisplay]] to currencyDisplay.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-fraction-digits.js", "version": 5, "esid": " 11.3.2_TRF", "description": " >Tests that the digits are determined correctly when specifying\npre/post decimal digits.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-negative-numbers.js", "version": 5, "esid": " 11.3.2_FN_1", "description": " >Tests that Intl.NumberFormat.prototype.formatdoesn't treat all\nnumbers as negative.\n", "info": " |PartitionNumberPattern ( numberFormat, x )\n1. If x is not NaN and x < 0 or _x_ is -0, then\na. Let _x_ be -_x_.\nb. Let _pattern_ be _numberFormat_.[[NegativePattern]].\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-significant-digits.js", "version": 5, "esid": " 11.3.2_TRP", "description": " >Tests that the digits are determined correctly when specifying\nsignificant digits.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/percent-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the percent style and unit.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/compactDisplay.js", "esid": " sec-intl.numberformat.prototype.resolvedoptions", "description": " Verifies the existence of the compactDisplay property for the object returned by resolvedOptions().", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/order.js", "esid": " sec-intl.numberformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"], "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/style-unit.js", "esid": " sec-setnumberformatunitoptions", "description": " Checks handling of valid values for the numeric option to the RelativeTimeFormat constructor.", "info": " |SetNumberFormatUnitOptions ( intlObj, options )\n\n3. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"decimal\", \"percent\", \"currency\", \"unit\" \u00bb, \"decimal\").\n4. Set intlObj.[[Style]] to style.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/pluralCategories.js", "esid": " sec-Intl.PluralRules.prototype.resolvedOptions", "description": " >Tests that Intl.PluralRules.prototype.resolvedOptions creates a new array\nfor the pluralCategories property on every call.\n", "includes": ["propertyHelper.js", "compareArray.js"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/locales-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks error cases for the locales argument to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n3. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n", "includes": ["testIntl.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js", "esid": " sec-intl.RelativeTimeFormat", "description": " >Verifies the NewTarget check for Intl.RelativeTimeFormat.\n", "info": " |Intl.RelativeTimeFormat ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of a null options argument to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n5. Else\na. Let options be ? ToObject(options).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-localeMatcher-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of invalid value for the localeMatcher option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numberingSystem-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Checks error cases for the options argument to the RelativeTimeFormat constructor.\n", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n\n...\n8. If numberingSystem is not undefined, then\na. If numberingSystem does not match the type sequence (from UTS 35 Unicode Locale Identifier, section 3.2), throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numeric-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of invalid value for the numeric option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", \u00ab\"always\", \"auto\"\u00bb, \"always\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numeric-valid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of valid values for the numeric option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", \u00ab\"always\", \"auto\"\u00bb, \"always\").\n17. Set relativeTimeFormat.[[Numeric]] to numeric.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-proto.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " |Checks that the RelativeTimeFormat constructor does not cause the\nNumberFormat and PluralRules constructors to get properties off\nObject.prototype through the options objects it creates.\n", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n20. Let nfOptions be ObjectCreate(null).\n25. Let prOptions be ObjectCreate(null).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-style-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of invalid value for the style option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n14. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-style-valid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of valid values for the style option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n14. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n15. Set relativeTimeFormat.[[Style]] to s.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-throwing-getters.js", "esid": " sec-InitializeRelativeTimeFormat", "description": " Checks the propagation of exceptions from the options for the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat\n\n5. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n...\n7. Let numberingSystem be ? GetOption(options, \"numberingSystem\", \"string\", undefined, undefined).\n...\n16. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n...\n18. Let numeric be ? GetOption(options, \"numeric\", \"string\", \u00ab\"always\", \"auto\"\u00bb, \"always\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\na. Assert: type is \"boolean\" or \"string\".\nb. If type is \"boolean\", then\ni. Let value be ToBoolean(value).\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\ne. Return value.\n3. Else, return fallback.\n", "features": ["Intl.RelativeTimeFormat"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-toobject-prototype.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of non-object option arguments to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-toobject.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of non-object option arguments to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-undefined.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of non-object option arguments to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/subclassing.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks that RelativeTimeFormat can be subclassed.", "info": " |Intl.RelativeTimeFormat ( [ locales [ , options ] ] )\n\n2. Let relativeTimeFormat be ! OrdinaryCreateFromConstructor(NewTarget, \"%RelativeTimeFormatPrototype%\", \u00ab [[InitializedRelativeTimeFormat]] \u00bb).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/length.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Checks the \"length\" property of the RelativeTimeFormat constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/name.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Checks the \"name\" property of the RelativeTimeFormat constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >\"RelativeTimeFormat\" property of Intl.\n", "info": " |Intl.RelativeTimeFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/prototype.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " The prototype of the Intl.RelativeTimeFormat constructor is %FunctionPrototype%.", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nUnless otherwise specified every built-in function object has the %FunctionPrototype% object as the initial value of its [[Prototype]] internal slot.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/basic.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Tests that Intl.RelativeTimeFormat has a supportedLocalesOf property,\nand it works as planned.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/branding.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Verifies there's no branding check for Intl.RelativeTimeFormat.supportedLocalesOf().\n", "info": " |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Checks the \"length\" property of Intl.RelativeTimeFormat.supportedLocalesOf().\n", "info": " |The value of the length property of the supportedLocalesOf method is 1.\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, has a length property whose value is an integer.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/locales-invalid.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks error cases for the locales argument to the supportedLocalesOf function.", "info": " |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n\n2. Let requestedLocales be CanonicalizeLocaleList(locales).\n", "includes": ["testIntl.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/name.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Checks the \"name\" property of Intl.RelativeTimeFormat.supportedLocalesOf().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-localeMatcher-invalid.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks handling of invalid values for the localeMatcher option to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-null.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks handling of a null options argument to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-toobject.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks handling of non-object options arguments to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-undefined.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks handling of an undefined options argument to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Checks the \"supportedLocalesOf\" property of the RelativeTimeFormat prototype object.\n", "info": " |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/result-type.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Verifies the type of the return value of Intl.RelativeTimeFormat.supportedLocalesOf().", "info": " |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/instance/extensibility.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Intl.RelativeTimeFormat instance object extensibility\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/instance/prototype.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Intl.RelativeTimeFormat instance object is created from %RelativeTimeFormatPrototype%.\n", "info": " |Intl.RelativeTimeFormat ([ locales [ , options ]])\n\n2. Let relativeTimeFormat be ! OrdinaryCreateFromConstructor(NewTarget, \"%RelativeTimeFormatPrototype%\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/constructor/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.constructor", "description": " Checks the \"constructor\" property of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.constructor\n\nThe initial value of Intl.RelativeTimeFormat.prototype.constructor is %RelativeTimeFormat%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/branding.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Verifies the branding check for the \"format\" function of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-always.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-style-short.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/length.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.format().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/name.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.format().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the \"format\" property of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.format ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/unit-invalid.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of invalid unit arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |SingularRelativeTimeUnit ( unit )\n\n10. If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\", throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/unit-plural.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |SingularRelativeTimeUnit ( unit )\n\n2. If unit is \"seconds\", return \"second\".\n3. If unit is \"minutes\", return \"minute\".\n4. If unit is \"hours\", return \"hour\".\n5. If unit is \"days\", return \"day\".\n6. If unit is \"weeks\", return \"week\".\n7. If unit is \"months\", return \"month\".\n8. If unit is \"quarters\", return \"quarter\".\n9. If unit is \"years\", return \"year\".\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-non-finite.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\nPartitionRelativeTimePattern ( relativeTimeFormat, value, unit )\n\n4. If isFinite(value) is false, then throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-symbol.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-tonumber.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of non-number value arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/branding.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Verifies the branding check for the \"formatToParts\" function of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-numeric-always.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-style-short.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/length.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/name.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the \"formatToParts\" property of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.formatToParts ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/result-type.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |FormatRelativeTimeToParts ( relativeTimeFormat, value, unit )\n\n3. Let n be 0.\n4. For each part in parts, do:\na. Let O be ObjectCreate(%ObjectPrototype%).\nb. Perform ! CreateDataPropertyOrThrow(O, \"type\", part.[[Type]]).\nc. Perform ! CreateDataPropertyOrThrow(O, \"value\", part.[[Value]]).\nd. If part has a [[Unit]] field,\ni. Perform ! CreateDataPropertyOrThrow(O, \"unit\", part.[[Unit]]).\ne. Perform ! CreateDataPropertyOrThrow(result, ! ToString(n), O).\nf. Increment n by 1.\n\n", "features": ["Intl.RelativeTimeFormat"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/unit-invalid.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of invalid unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |SingularRelativeTimeUnit ( unit )\n\n10. If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\", throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/unit-plural.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |SingularRelativeTimeUnit ( unit )\n\n2. If unit is \"seconds\", return \"second\".\n3. If unit is \"minutes\", return \"minute\".\n4. If unit is \"hours\", return \"hour\".\n5. If unit is \"days\", return \"day\".\n6. If unit is \"weeks\", return \"week\".\n7. If unit is \"months\", return \"month\".\n8. If unit is \"quarters\", return \"quarter\".\n9. If unit is \"years\", return \"year\".\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-non-finite.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n3. Let value be ? ToNumber(value).\n\nPartitionRelativeTimePattern ( relativeTimeFormat, value, unit )\n\n4. If isFinite(value) is false, then throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-symbol.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-tonumber.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of non-number value arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype", "description": " >Checks the \"prototype\" property of the RelativeTimeFormat constructor.\n", "info": " |Intl.RelativeTimeFormat.prototype\n\nThe value of Intl.RelativeTimeFormat.prototype is %RelativeTimeFormatPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/branding.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Verifies the branding check for the \"resolvedOptions\" function of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/caching.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Verifies that the return value of Intl.RelativeTimeFormat.prototype.resolvedOptions() is not cached.", "info": " |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/length.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.resolvedOptions().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/name.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.resolvedOptions().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/order.js", "esid": " sec-intl.relativetimeformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Checks the \"resolvedOptions\" property of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/toStringTag/toString.js", "esid": " sec-intl.RelativeTimeFormat.prototype-@@tostringtag", "description": " >Checks Object.prototype.toString with Intl.RelativeTimeFormat objects.\n", "info": " |Intl.RelativeTimeFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.RelativeTimeFormat\".\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/toStringTag/toStringTag.js", "esid": " sec-intl.RelativeTimeFormat.prototype-@@tostringtag", "description": " >Checks the @@toStringTag property of the RelativeTimeFormat prototype object.\n", "info": " |Intl.RelativeTimeFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.RelativeTimeFormat\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/TypedArray/prototype/toLocaleString/calls-toLocaleString-number-elements.js", "esid": " sup-array.prototype.tolocalestring", "description": " >Ensure \"toLocaleString\" is called with locale and options on number elements.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-returned-array-elements-are-not-frozen.js", "version": 5, "esid": " 9.2.8_4", "description": " >Tests that the array returned by SupportedLocales is extensible,\nwritable and configurable.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/language/comments/hashbang/eval-indirect.js", "esid": " pending", "description": " >Hashbang comments should be available in Script evaluator contexts. (indirect eval)\n", "info": " |HashbangComment::\n#! SingleLineCommentChars[opt]\n", "features": ["hashbang"]}, {"path": "./test262-main/test/language/comments/hashbang/eval.js", "esid": " pending", "description": " >Hashbang comments should be available in Script evaluator contexts. (direct eval)\n", "info": " |HashbangComment::\n#! SingleLineCommentChars[opt]\n", "features": ["hashbang"]}, {"path": "./test262-main/test/language/comments/hashbang/no-line-separator.js", "esid": " pending", "description": " >Hashbang comments should not require a newline afterwards\n", "info": " |HashbangComment::\n#! SingleLineCommentChars[opt]\n", "features": ["hashbang"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-func-decl-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-lex-bind-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-var-bind-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-named-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-func-expr-nameless-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-meth-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "async", "noStrict"]}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-rtrn-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-thrw-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-thrw-close.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-thrw-close-err.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"throw\" completion and the iterator has not been marked as \"done\" (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n7. If completion.[[type]] is throw, return Completion(completion).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-thrw-close.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"throw\" completion and the iterator has not been marked as \"done\" (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-rtrn-close-err.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"return\" completion due to reference evaluation (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-rtrn-close.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"return\" completion due to reference evaluation (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-thrw-close-err.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"throw\" completion due to reference evaluation (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n7. If completion.[[type]] is throw, return Completion(completion)\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-thrw-close.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"throw\" completion due to reference evaluation (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-rtrn-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-rtrn-close.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-thrw-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-thrw-close.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-lref-err.js", "description": " IteratorClose is called when reference evaluation produces an abrupt completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n"}, {"path": "./test262-main/test/language/expressions/async-arrow-function/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (async arrow function expression)", "esid": " sec-async-arrow-function-definitions", "features": ["globalThis", "Symbol.unscopables", "async-functions"], "flags": ["generated", "noStrict", "async"], "info": " |14.7 Async Arrow Function Definitions\n\nAsyncArrowFunction :\n...\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\n\nAsyncConciseBody :\n{ AsyncFunctionBody }\n\n...\n\nSupplemental Syntax\n\nWhen processing an instance of the production AsyncArrowFunction :\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\n\nAsyncArrowHead :\nasync ArrowFormalParameters\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-arrow-function/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (async arrow function expression)", "esid": " sec-async-arrow-function-definitions", "features": ["globalThis", "Symbol.unscopables", "async-functions"], "flags": ["generated", "noStrict", "async"], "info": " |14.7 Async Arrow Function Definitions\n\nAsyncArrowFunction :\n...\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\n\nAsyncConciseBody :\n{ AsyncFunctionBody }\n\n...\n\nSupplemental Syntax\n\nWhen processing an instance of the production AsyncArrowFunction :\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\n\nAsyncArrowHead :\nasync ArrowFormalParameters\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-function/named-unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (async function named expression)", "esid": " sec-async-function-definitions", "features": ["globalThis", "Symbol.unscopables", "async-functions"], "flags": ["generated", "noStrict", "async"], "info": " |14.6 Async Function Definitions\n\nAsyncFunctionExpression :\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-function/named-unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (async function named expression)", "esid": " sec-async-function-definitions", "features": ["globalThis", "Symbol.unscopables", "async-functions"], "flags": ["generated", "noStrict", "async"], "info": " |14.6 Async Function Definitions\n\nAsyncFunctionExpression :\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-function/nameless-unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (async function nameless expression)", "esid": " sec-async-function-definitions", "features": ["globalThis", "Symbol.unscopables", "async-functions"], "flags": ["generated", "noStrict", "async"], "info": " |14.6 Async Function Definitions\n\nAsyncFunctionExpression :\nasync function ( FormalParameters ) { AsyncFunctionBody }\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-function/nameless-unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (async function nameless expression)", "esid": " sec-async-function-definitions", "features": ["globalThis", "Symbol.unscopables", "async-functions"], "flags": ["generated", "noStrict", "async"], "info": " |14.6 Async Function Definitions\n\nAsyncFunctionExpression :\nasync function ( FormalParameters ) { AsyncFunctionBody }\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/named-unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["globalThis", "Symbol.unscopables", "async-iteration"], "flags": ["generated", "noStrict", "async"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/named-unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["globalThis", "Symbol.unscopables", "async-iteration"], "flags": ["generated", "noStrict", "async"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["globalThis", "Symbol.unscopables", "async-iteration"], "flags": ["generated", "noStrict", "async"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["globalThis", "Symbol.unscopables", "async-iteration"], "flags": ["generated", "noStrict", "async"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/constructor-this-tdz-during-initializers.js", "esid": " sec-super-keyword-runtime-semantics-evaluation", "description": " >`this` is bound in the constructor of derived classes immediately before running initializers\n", "info": " |[...]\n6. Let result be ? Construct(func, argList, newTarget).\n[...]\n10. Perform ? thisER.BindThisValue(result).\n11. Perform ? InitializeInstanceFields(result, F).\n[...]\n", "features": ["class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-computed-names.js", "description": " Computed property names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-literal-names.js", "description": " Literal property names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-private-names.js", "description": " private names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-static-private-fields.js", "description": " static private fields (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-string-literal-names.js", "description": " String literal names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-computed-names.js", "description": " Computed property names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-literal-names.js", "description": " Literal property names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-private-names.js", "description": " private names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-static-private-fields.js", "description": " static private fields (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-string-literal-names.js", "description": " String literal names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-computed-names.js", "description": " Computed property names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-literal-names.js", "description": " Literal property names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-private-names.js", "description": " private names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-static-private-fields.js", "description": " static private fields (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-gen-string-literal-names.js", "description": " String literal names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-computed-names.js", "description": " Computed property names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-literal-names.js", "description": " Literal property names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-private-names.js", "description": " private names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-static-private-fields.js", "description": " static private fields (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-async-method-string-literal-names.js", "description": " String literal names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-computed-names.js", "description": " Computed property names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-literal-names.js", "description": " Literal property names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-private-names.js", "description": " private names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-static-private-fields.js", "description": " static private fields (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-string-literal-names.js", "description": " String literal names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-computed-names.js", "description": " Computed property names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-literal-names.js", "description": " Literal property names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-private-names.js", "description": " private names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-static-private-fields.js", "description": " static private fields (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-string-literal-names.js", "description": " String literal names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-private-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/class-name-static-initializer-anonymous.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >The inferred class-name is present when executing static field initializers of anonymous class expressions.\n", "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n[...]\n17. Perform MakeClassConstructor(F).\n18. If className is not undefined, then\na. Perform SetFunctionName(F, className).\n[...]\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/class-name-static-initializer-decl.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >The class-name is present when executing static field initializers of class declarations.\n", "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n[...]\n17. Perform MakeClassConstructor(F).\n18. If className is not undefined, then\na. Perform SetFunctionName(F, className).\n[...]\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/class-name-static-initializer-expr.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >The class-name is present when executing static field initializers of named class expressions.\n", "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n[...]\n17. Perform MakeClassConstructor(F).\n18. If className is not undefined, then\na. Perform SetFunctionName(F, className).\n[...]\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/computed-name-toprimitive-symbol.js", "description": " ToPrimitive evaluation in the ComputedPropertyName (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "Symbol", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/computed-name-toprimitive.js", "description": " ToPrimitive evaluation in the ComputedPropertyName (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/ctor-called-after-fields-init.js", "description": " The constructor method is called after the fields are initalized (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-referenceerror.js", "description": " ReferenceError evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-toprimitive-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-toprimitive-returns-noncallable.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-toprimitive-returns-nonobject.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-tostring-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-valueof-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/field-declaration.js", "description": " Fields are defined (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nClassDefinitionEvaluation:\n...\n\n26. Let instanceFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. ...\nc. ...\nd. If field is not empty, append field to instanceFields.\n\n...\n\n30. Set F.[[Fields]] to instanceFields.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/fields-anonymous-function-length.js", "description": " Anonymous functions in field initializer have length properly set (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nInitializeInstanceFields ( O, constructor )\n1. Assert: Type ( O ) is Object.\n2. Assert: constructor is an ECMAScript function object.\n3. Let fields be the value of constructor.[[Fields]].\n4. For each item fieldRecord in order from fields,\na. Perform ? DefineField(O, fieldRecord).\n5. Return.\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/fields-asi-1.js", "description": " ASI test in field declarations -- computed name interpreted as property", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/fields-asi-2.js", "description": " ASI test in field declarations -- computed name interpreted as string index", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/fields-asi-5.js", "description": " ASI test in field declarations -- field with PropertyName \"in\" interpreted as index", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/fields-computed-name-static-propname-prototype.js", "description": " static class fields forbid PropName 'prototype' (no early error -- PropName of ComputedPropertyName)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n16. Perform MakeConstructor(F, false, proto).\n...\n\n9.2.10 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )\n\n6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype,\n[[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false }).\n"}, {"path": "./test262-main/test/language/expressions/class/elements/fields-run-once-on-double-super.js", "esid": " sec-super-keyword-runtime-semantics-evaluation", "description": " >when calling `super()` for a second time in a derived class, the super constructor is run twice but the field initializers are only run once\n", "info": " |[...]\n6. Let result be ? Construct(func, argList, newTarget).\n[...]\n10. Perform ? thisER.BindThisValue(result).\n11. Perform ? InitializeInstanceFields(result, F).\n[...]\n", "features": ["class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/init-err-evaluation.js", "description": " Return abrupt completion evaluating the field initializer (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/init-value-defined-after-class.js", "description": " The initializer value is defined after the class evaluation (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/init-value-incremental.js", "description": " The initializer value is defined during the class instatiation (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n27. For each ClassElement e in order from elements\n...\nd. Append to fieldRecords the elements of fields.\n...\n33. Let result be InitializeStaticFields(F).\n...\n\n[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/intercalated-static-non-static-computed-fields.js", "description": " Computed class fields are executed in the order they are delcared, regardless it is static or instance field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassTail : ClassHeritage { ClassBody }\n...\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\n[[Construct]] (argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-computed-names.js", "description": " Computed property names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-computed-symbol-names.js", "description": " Computed property symbol names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-literal-names-asi.js", "description": " Literal property names with ASI (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-literal-names.js", "description": " Literal property names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-private-names.js", "description": " private names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-privatename-identifier.js", "description": " Valid PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-static-private-fields.js", "description": " static private fields (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-string-literal-names.js", "description": " String literal names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-computed-names.js", "description": " Computed property names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-computed-symbol-names.js", "description": " Computed property symbol names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-literal-names-asi.js", "description": " Literal property names with ASI (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-literal-names.js", "description": " Literal property names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-private-names.js", "description": " private names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-privatename-identifier.js", "description": " Valid PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-static-private-fields.js", "description": " static private fields (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-string-literal-names.js", "description": " String literal names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-private-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-private-names.js", "description": " private names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-static-private-fields.js", "description": " static private fields (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-private-names.js", "description": " private names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-static-private-fields.js", "description": " static private fields (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-private-names.js", "description": " private names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-static-private-fields.js", "description": " static private fields (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-field-access-on-inner-arrow-function.js", "description": " PrivateName of private field is visible on inner arrow function of class scope (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-field-access-on-inner-function.js", "description": " PrivateName of private field is visible on inner function of class scope (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-field-as-arrow-function.js", "description": " Calling arrow function returned from private field access (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "arrow-function", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-field-as-async-arrow-function.js", "description": " Calling async arrow function returned from private field access (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "async-functions", "arrow-function", "class"], "flags": ["generated", "async"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-field-as-async-function.js", "description": " Calling async function returned from private field access (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "async-functions", "class"], "flags": ["generated", "async"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-field-as-function.js", "description": " Calling result returned from private field access (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-fields-proxy-default-handler-throws.js", "esid": " sec-privatefieldget", "description": " Private fields not accessible via default Proxy handler", "info": " |1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/expressions/class/elements/private-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-static-field-shadowed-by-field-on-nested-class.js", "description": " PrivateName of private static field can be shadowed on inner classes by a private field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class-static-fields-public", "class-fields-private", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateIdentifier\n\nClassTail : ClassHeritage { ClassBody }\n...\n6. Let classPrivateEnvironment be NewDeclarativeEnvironment(outerPrivateEnvironment).\n7. Let classPrivateEnvRec be classPrivateEnvironment's EnvironmentRecord.\n...\n15. Set the running execution context's LexicalEnvironment to classScope.\n16. Set the running execution context's PrivateEnvironment to classPrivateEnvironment.\n...\n33. If PrivateBoundIdentifiers of ClassBody contains a Private Name P such that P's [[Kind]] field is either \"method\" or \"accessor\" and P's [[Brand]] is F,\na. PrivateBrandAdd(F, F).\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n\nFieldDefinition : ClassElementName Initializer_opt\n1. Let name be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(name).\n3. If Initializer_opt is present,\na. Let lex be the Lexical Environment of the running execution context.\nb. Let formalParameterList be an instance of the production FormalParameters : [empty].\nc. Let privateScope be the PrivateEnvironment of the running execution context.\nd. Let initializer be FunctionCreate(Method, formalParameterList, Initializer, lex, true, privateScope).\ne. Perform MakeMethod(initializer, homeObject).\nf. Let isAnonymousFunctionDefinition be IsAnonymousFunctionDefinition(Initializer).\n4. Else,\na. Let initializer be empty.\nb. Let isAnonymousFunctionDeclaration be false.\n5. Return a Record { [[Name]]: name, [[Initializer]]: initializer, [[IsAnonymousFunctionDefinition]]: isAnonymousFunctionDefinition }.\n\nMemberExpression : MemberExpression.PrivateIdentifier\n1. Let baseReference be the result of evaluating MemberExpression.\n2. Let baseValue be ? GetValue(baseReference).\n3. Let bv be ? RequireObjectCoercible(baseValue).\n4. Let fieldNameString be the StringValue of PrivateIdentifier.\n5. Return MakePrivateReference(bv, fieldNameString).\n\nMakePrivateReference(baseValue, privateIdentifier)\n1. Let env be the running execution context's PrivateEnvironment.\n2. Let privateNameBinding be ? ResolveBinding(privateIdentifier, env).\n3. Let privateName be GetValue(privateNameBinding).\n4. Assert: privateName is a Private Name.\n5. Return a value of type Reference whose base value is baseValue, whose referenced name is privateName, whose strict reference flag is true.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-static-field-usage-inside-nested-class.js", "description": " PrivateName of private static field is available inside inner classes (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateIdentifier\n\nClassTail : ClassHeritage { ClassBody }\n...\n6. Let classPrivateEnvironment be NewDeclarativeEnvironment(outerPrivateEnvironment).\n7. Let classPrivateEnvRec be classPrivateEnvironment's EnvironmentRecord.\n...\n15. Set the running execution context's LexicalEnvironment to classScope.\n16. Set the running execution context's PrivateEnvironment to classPrivateEnvironment.\n...\n33. If PrivateBoundIdentifiers of ClassBody contains a Private Name P such that P's [[Kind]] field is either \"method\" or \"accessor\" and P's [[Brand]] is F,\na. PrivateBrandAdd(F, F).\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n\nFieldDefinition : ClassElementName Initializer_opt\n1. Let name be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(name).\n3. If Initializer_opt is present,\na. Let lex be the Lexical Environment of the running execution context.\nb. Let formalParameterList be an instance of the production FormalParameters : [empty].\nc. Let privateScope be the PrivateEnvironment of the running execution context.\nd. Let initializer be FunctionCreate(Method, formalParameterList, Initializer, lex, true, privateScope).\ne. Perform MakeMethod(initializer, homeObject).\nf. Let isAnonymousFunctionDefinition be IsAnonymousFunctionDefinition(Initializer).\n4. Else,\na. Let initializer be empty.\nb. Let isAnonymousFunctionDeclaration be false.\n5. Return a Record { [[Name]]: name, [[Initializer]]: initializer, [[IsAnonymousFunctionDefinition]]: isAnonymousFunctionDefinition }.\n\nMemberExpression : MemberExpression.PrivateIdentifier\n1. Let baseReference be the result of evaluating MemberExpression.\n2. Let baseValue be ? GetValue(baseReference).\n3. Let bv be ? RequireObjectCoercible(baseValue).\n4. Let fieldNameString be the StringValue of PrivateIdentifier.\n5. Return MakePrivateReference(bv, fieldNameString).\n\nMakePrivateReference(baseValue, privateIdentifier)\n1. Let env be the running execution context's PrivateEnvironment.\n2. Let privateNameBinding be ? ResolveBinding(privateIdentifier, env).\n3. Let privateName be GetValue(privateNameBinding).\n4. Assert: privateName is a Private Name.\n5. Return a value of type Reference whose base value is baseValue, whose referenced name is privateName, whose strict reference flag is true.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/redeclaration-symbol.js", "description": " Redeclaration of public fields with the same name (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js", "compareArray.js"], "info": " |2.13.2 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n30. Set the value of F's [[Fields]] internal slot to fieldRecords.\n...\n\n2.14 [[Construct]] ( argumentsList, newTarget)\n\n...\n8. If kind is \"base\", then\n...\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n\n2.9 InitializeInstanceFields ( O, constructor )\n\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/redeclaration.js", "description": " Redeclaration of public fields with the same name (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js", "compareArray.js"], "info": " |2.13.2 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n30. Set the value of F's [[Fields]] internal slot to fieldRecords.\n...\n\n2.14 [[Construct]] ( argumentsList, newTarget)\n\n...\n8. If kind is \"base\", then\n...\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n\n2.9 InitializeInstanceFields ( O, constructor )\n\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-computed-names.js", "description": " Computed property names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-computed-symbol-names.js", "description": " Computed property symbol names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-literal-names-asi.js", "description": " Literal property names with ASI (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-literal-names.js", "description": " Literal property names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-private-names.js", "description": " private names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-privatename-identifier.js", "description": " Valid PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-static-private-fields.js", "description": " static private fields (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-string-literal-names.js", "description": " String literal names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-computed-names.js", "description": " Computed property names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-literal-names.js", "description": " Literal property names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-private-names.js", "description": " private names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-static-private-fields.js", "description": " static private fields (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-gen-string-literal-names.js", "description": " String literal names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-computed-names.js", "description": " Computed property names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-literal-names.js", "description": " Literal property names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-private-names.js", "description": " private names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-static-private-fields.js", "description": " static private fields (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-async-method-string-literal-names.js", "description": " String literal names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-computed-names.js", "description": " Computed property names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-literal-names.js", "description": " Literal property names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-private-names.js", "description": " private names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-static-private-fields.js", "description": " static private fields (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-string-literal-names.js", "description": " String literal names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-private-names.js", "description": " private names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-static-private-fields.js", "description": " static private fields (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-as-valid-instance-field-assigned.js", "description": " static is a valid name of an instance field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-as-valid-instance-field.js", "description": " static is a valid name of an instance field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-as-valid-static-field-assigned.js", "description": " static is a valid name of a static field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nstatic FieldDefinition ;\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-as-valid-static-field.js", "description": " static is a valid name of a static field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nstatic FieldDefinition ;\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-anonymous-function-length.js", "description": " Anonymous function in field initilizer have length properly set (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-anonymous-function-name.js", "description": " Anonymous function receives the name of static fields (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-declaration.js", "description": " Static fields are defined using DefineField (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-init-this-inside-arrow-function.js", "description": " this in static field initializers refers to class constructor (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-init-with-this.js", "description": " Static fields initializer has `this` biding (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-redeclaration.js", "description": " Static fields can be redeclared (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-private-fields-proxy-default-handler-throws.js", "esid": " sec-privatefieldget", "description": " Static private fields not accessible via default Proxy handler", "info": " |1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\n", "features": ["class", "class-static-fields-private"]}, {"path": "./test262-main/test/language/expressions/class/elements/super-access-from-arrow-func-on-field.js", "description": " super inside arrow functions on field initializer resolves to class' super (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |ClassElementName :\nPropertyName\nPrivateName\n\nSuperProperty:\nsuper[Expression]\nsuper.IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-field-classelementname-initializer-alt.js", "description": " FieldDefinition, ClassElementName, PropertyName = Initializer Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-field-classelementname-initializer.js", "description": " FieldDefinition, ClassElementName, PropertyName = Initializer Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-field-identifier-alt.js", "description": " Valid FieldDefinition, ClassElementName, PropertyName Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-field-identifier.js", "description": " Valid FieldDefinition, ClassElementName, PropertyName Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-fields-multi-line.js", "description": " Valid multi-line, multi-field (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-privatename-classelementname-initializer-alt.js", "description": " Valid PrivateName = Initializer Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-privatename-classelementname-initializer.js", "description": " Valid PrivateName = Initializer Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-privatename-identifier.js", "description": " Valid PrivateName Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-privatename-no-initializer-with-method.js", "description": " SyntaxError (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-privatenames-multi-line.js", "description": " SyntaxError (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-computed-names.js", "description": " Computed property names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-computed-symbol-names.js", "description": " Computed property symbol names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-literal-names-asi.js", "description": " Literal property names with ASI (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-literal-names.js", "description": " Literal property names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-private-names.js", "description": " private names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-field-identifier.js", "description": " Valid FieldDefinition (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-privatename-identifier.js", "description": " Valid PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-static-private-fields.js", "description": " static private fields (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-string-literal-names.js", "description": " String literal names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/private-static-field-multiple-evaluations-of-class-direct-eval.js", "description": " Every new evaluation of a class creates a different Private Name (private static field)", "esid": " sec-runtime-semantics-evaluate-name", "info": " |ClassElementName : PrivateIdentifier\n1. Let privateIdentifier be StringValue of PrivateIdentifier.\n2. Let privateName be NewPrivateName(privateIdentifier).\n3. Let scope be the running execution context's PrivateEnvironment.\n4. Let scopeEnvRec be scope's EnvironmentRecord.\n5. Perform ! scopeEnvRec.InitializeBinding(privateIdentifier, privateName).\n6. Return privateName.\n\nClassTail : ClassHeritage { ClassBody }\n...\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n", "features": ["class", "class-static-fields-private"], "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/class/private-static-field-multiple-evaluations-of-class-eval-indirect.js", "description": " Every new evaluation of a class creates a different Private Name (private static field)", "esid": " sec-runtime-semantics-evaluate-name", "info": " |ClassElementName : PrivateIdentifier\n1. Let privateIdentifier be StringValue of PrivateIdentifier.\n2. Let privateName be NewPrivateName(privateIdentifier).\n3. Let scope be the running execution context's PrivateEnvironment.\n4. Let scopeEnvRec be scope's EnvironmentRecord.\n5. Perform ! scopeEnvRec.InitializeBinding(privateIdentifier, privateName).\n6. Return privateName.\n\nClassTail : ClassHeritage { ClassBody }\n...\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n", "features": ["class", "class-static-fields-private"], "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/class/private-static-field-multiple-evaluations-of-class-factory.js", "description": " Every new evaluation of a class creates a different Private Name (private static field)", "esid": " sec-runtime-semantics-evaluate-name", "info": " |ClassElementName : PrivateIdentifier\n1. Let privateIdentifier be StringValue of PrivateIdentifier.\n2. Let privateName be NewPrivateName(privateIdentifier).\n3. Let scope be the running execution context's PrivateEnvironment.\n4. Let scopeEnvRec be scope's EnvironmentRecord.\n5. Perform ! scopeEnvRec.InitializeBinding(privateIdentifier, privateName).\n6. Return privateName.\n\nClassTail : ClassHeritage { ClassBody }\n...\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n", "features": ["class", "class-static-fields-private"]}, {"path": "./test262-main/test/language/expressions/class/private-static-field-multiple-evaluations-of-class-function-ctor.js", "description": " Every new evaluation of a class creates a different Private Name (private static field)", "esid": " sec-runtime-semantics-evaluate-name", "info": " |ClassElementName : PrivateIdentifier\n1. Let privateIdentifier be StringValue of PrivateIdentifier.\n2. Let privateName be NewPrivateName(privateIdentifier).\n3. Let scope be the running execution context's PrivateEnvironment.\n4. Let scopeEnvRec be scope's EnvironmentRecord.\n5. Perform ! scopeEnvRec.InitializeBinding(privateIdentifier, privateName).\n6. Return privateName.\n\nClassTail : ClassHeritage { ClassBody }\n...\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n", "features": ["class", "class-static-fields-private"]}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-12.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v12.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-12.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v12.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-12.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v12.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-12.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v12.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-bil-bd-nsl-bd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigit NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-bil-bd-nsl-bds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigit NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-bil-bds-nsl-bd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigits NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-bil-bds-nsl-bds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigits NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-dd-nsl-dd-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\n\nDecimalDigits ::\nDecimalDigit\n...\n\nDecimalDigit :: one of\n0 1 2 3 4 5 6 7 8 9\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-hd-nsl-hd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-hd-nsl-hds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-hds-nsl-hd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigits NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-hds-nsl-hds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigits NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-od-nsl-od-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-nzd-nsl-dd-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\nDecimalDigit\n...\n\nDecimalDigit :: one of\n0 1 2 3 4 5 6 7 8 9\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-nzd-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\n...\nDecimalDigits DecimalDigit\n...\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-nzd-nsl-dds.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigits", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\n...\nDecimalDigits DecimalDigit\n...\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-od-nsl-od-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-od-nsl-od.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-od-nsl-ods.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-ods-nsl-od.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigits NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-ods-nsl-ods.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigits NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-sign-minus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nSignedInteger ::\n...\n- DecimalDigits\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-bil-bd-nsl-bd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigit NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-bil-bd-nsl-bds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigit NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-bil-bds-nsl-bd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigits NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-bil-bds-nsl-bds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigits NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-dot-dd-ep-sign-minus-dd-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits ExponentPart_opt `-` DecimalDigits\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\nDecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nSignedInteger ::\n...\n- DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-dot-dd-ep-sign-minus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits ExponentPart_opt `-` DecimalDigits\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\nDecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nSignedInteger ::\n...\n- DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-dot-dd-ep-sign-plus-dd-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits ExponentPart_opt `+` DecimalDigits\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\nDecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nSignedInteger ::\n...\n+ DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-dot-dd-ep-sign-plus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits ExponentPart_opt `+` DecimalDigits\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\nDecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nSignedInteger ::\n...\n+ DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-nsl-dd-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\n\nDecimalDigits ::\nDecimalDigit\n...\n\nDecimalDigit :: one of\n0 1 2 3 4 5 6 7 8 9\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dds-dot-dd-nsl-dd-ep-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits NumericLiteralSeparator DecimalDigits\nExponentPart SignedInteger\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dot-dd-nsl-dd-ep.js", "esid": " prod-NumericLiteralSeparator", "description": " >`.` DecimalDigit NumericLiteralSeparator DecimalDigit ExponentPart\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\nDecimalDigit\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dot-dd-nsl-dds-ep.js", "esid": " prod-NumericLiteralSeparator", "description": " >`.` DecimalDigit NumericLiteralSeparator DecimalDigits ExponentPart\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\nDecimalDigit\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dot-dds-nsl-dd-ep.js", "esid": " prod-NumericLiteralSeparator", "description": " >`.` DecimalDigits NumericLiteralSeparator DecimalDigit ExponentPart\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\nDecimalDigit\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dot-dds-nsl-dds-ep.js", "esid": " prod-NumericLiteralSeparator", "description": " >`.` DecimalDigits NumericLiteralSeparator DecimalDigits ExponentPart\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\nDecimalDigit\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-hd-nsl-hd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-hd-nsl-hds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-hds-nsl-hd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigits NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-hds-nsl-hds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigits NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-od-nsl-od-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-nzd-nsl-dd-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\nDecimalDigit\n...\n\nDecimalDigit :: one of\n0 1 2 3 4 5 6 7 8 9\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-nzd-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\n...\nDecimalDigits DecimalDigit\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-nzd-nsl-dds.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigits", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\n...\nDecimalDigits DecimalDigit\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-od-nsl-od-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-od-nsl-od.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-od-nsl-ods.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-ods-nsl-od.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigits NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-ods-nsl-ods.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigits NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-sign-minus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nSignedInteger ::\n...\n- DecimalDigits\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-sign-plus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nSignedInteger ::\n...\n+ DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/module-code/privatename-valid-no-earlyerr.js", "esid": " sec-module-semantics-static-semantics-early-errors", "description": " Referencing privatename in class within class does not error.", "info": " |Static Semantics: Early Errors\nModule : ModuleBody\nIt is a Syntax Error if AllPrivateNamesValid of ModuleBody with an empty List as an argument is false.\n\nStatic Semantics: AllPrivateNamesValid\nAllPrivateNamesValid is an abstract operation which takes names as an argument.\n\nMemberExpression : MemberExpression . PrivateName\n1. If StringValue of PrivateName is in names, return true.\n2. Return false.\n\nCallExpression : CallExpression . PrivateName\n1. If StringValue of PrivateName is in names, return true.\n2. Return false.\n\nClassBody:ClassElementList\n1. Let newNames be the concatenation of names with PrivateBoundNames of ClassBody.\n2.Return AllPrivateNamesValid of ClassElementList with the argument newNames.\n\nFor all other grammatical productions, recurse on subexpressions/substatements, passing in the names of the caller. If all pieces return true, then return true. If any returns false, return false.\n", "flags": ["module"], "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/async-function/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (async function declaration)", "esid": " sec-async-function-definitions", "features": ["globalThis", "Symbol.unscopables", "async-functions"], "flags": ["generated", "noStrict", "async"], "info": " |14.6 Async Function Definitions\n\nAsyncFunctionDeclaration :\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/statements/async-function/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (async function declaration)", "esid": " sec-async-function-definitions", "features": ["globalThis", "Symbol.unscopables", "async-functions"], "flags": ["generated", "noStrict", "async"], "info": " |14.6 Async Function Definitions\n\nAsyncFunctionDeclaration :\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["globalThis", "Symbol.unscopables", "async-iteration"], "flags": ["generated", "noStrict", "async"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["globalThis", "Symbol.unscopables", "async-iteration"], "flags": ["generated", "noStrict", "async"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/classelementname-abrupt-completion.js", "description": " Class definition should error if evaluation of ClassElementName errors", "esid": " sec-runtime-semantics-classdefinitionevaluation", "info": " |Runtime Semantics: ClassDefinitionEvaluation\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of e is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n\nRuntime Semantics: ClassElementEvaluation\n...\nClassElement : FieldDefinition ;\n1. Return ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\nFieldDefinition : ClassElementNameInitializer\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n\n", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/elements/abrupt-completition-on-field-initializer.js", "description": " If an initializer returns an abrupt completion, other initializers should not execute", "esid": " sec-ecmascript-function-objects-construct-argumentslist-newtarget", "info": " |[[Construct]] ( argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n...\n\nClassTail : ClassHeritage { ClassBody }\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\n", "features": ["class-fields-public", "class-static-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-computed-names.js", "description": " Computed property names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-literal-names.js", "description": " Literal property names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-private-names.js", "description": " private names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-static-private-fields.js", "description": " static private fields (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-string-literal-names.js", "description": " String literal names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-computed-names.js", "description": " Computed property names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-literal-names.js", "description": " Literal property names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-private-names.js", "description": " private names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-static-private-fields.js", "description": " static private fields (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-string-literal-names.js", "description": " String literal names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-computed-names.js", "description": " Computed property names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-literal-names.js", "description": " Literal property names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-private-names.js", "description": " private names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-static-private-fields.js", "description": " static private fields (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-gen-string-literal-names.js", "description": " String literal names (field definitions after a static async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-computed-names.js", "description": " Computed property names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-literal-names.js", "description": " Literal property names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-private-names.js", "description": " private names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-static-private-fields.js", "description": " static private fields (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-async-method-string-literal-names.js", "description": " String literal names (field definitions after a static async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-computed-names.js", "description": " Computed property names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-literal-names.js", "description": " Literal property names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-private-names.js", "description": " private names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-static-private-fields.js", "description": " static private fields (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "generators", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-string-literal-names.js", "description": " String literal names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-computed-names.js", "description": " Computed property names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-literal-names.js", "description": " Literal property names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-private-names.js", "description": " private names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-static-private-fields.js", "description": " static private fields (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-string-literal-names.js", "description": " String literal names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-private-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/class-field-is-observable-by-proxy.js", "description": " Public class fields initialization calls [[DefineOwnProperty]]", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "includes": ["compareArray.js"], "features": ["class", "class-fields-public", "Proxy"]}, {"path": "./test262-main/test/language/statements/class/elements/class-field-on-frozen-objects.js", "description": " Public class field initialization fails on frozen object", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "features": ["class", "class-fields-public"], "flags": ["onlyStrict"]}, {"path": "./test262-main/test/language/statements/class/elements/computed-name-toprimitive-symbol.js", "description": " ToPrimitive evaluation in the ComputedPropertyName (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "Symbol", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/computed-name-toprimitive.js", "description": " ToPrimitive evaluation in the ComputedPropertyName (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/computed-property-abrupt-completition.js", "description": " PrivateFieldGet should return with abrupt completion", "esid": " runtime-semantics-class-definition-evaluation", "info": " |ClassTail : ClassHeritage { ClassBody }\n...\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateEnvironment to outerPrivateEnvironment.\niii. Return Completion(field).\n...\n", "features": ["class-fields-public", "class-static-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/ctor-called-after-fields-init.js", "description": " The constructor method is called after the fields are initalized (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-referenceerror.js", "description": " ReferenceError evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-toprimitive-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-toprimitive-returns-noncallable.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-toprimitive-returns-nonobject.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-tostring-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-valueof-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/field-declaration.js", "description": " Fields are defined (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nClassDefinitionEvaluation:\n...\n\n26. Let instanceFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. ...\nc. ...\nd. If field is not empty, append field to instanceFields.\n\n...\n\n30. Set F.[[Fields]] to instanceFields.\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/fielddefinition-initializer-abrupt-completion.js", "description": " Class construction should error if evaluation of field initializer errors", "esid": " sec-ecmascript-function-objects-construct-argumentslist-newtarget", "info": " |[[Construct]] ( argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n\nInitializeInstanceFields ( O, constructor )\n1. Assert: Type ( O ) is Object.\n2. Assert: Assert constructor is an ECMAScript function object.\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let fieldName be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na.Let initValue be ? Call(initializer, receiver).\n\n", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-anonymous-function-length.js", "description": " Anonymous functions in field initializer have length properly set (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nInitializeInstanceFields ( O, constructor )\n1. Assert: Type ( O ) is Object.\n2. Assert: constructor is an ECMAScript function object.\n3. Let fields be the value of constructor.[[Fields]].\n4. For each item fieldRecord in order from fields,\na. Perform ? DefineField(O, fieldRecord).\n5. Return.\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/fields-asi-1.js", "description": " ASI test in field declarations -- computed name interpreted as property", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-asi-2.js", "description": " ASI test in field declarations -- computed name interpreted as string index", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-asi-5.js", "description": " ASI test in field declarations -- field with PropertyName \"in\" interpreted as index", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-propname-constructor.js", "description": " class fields forbid PropName 'constructor' (no early error -- PropName of ComputedPropertyName not forbidden value)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-fields-public"], "info": " |Static Semantics: PropName\n...\nComputedPropertyName : [ AssignmentExpression ]\nReturn empty.\n\n\n// This test file tests the following early error:\nStatic Semantics: Early Errors\n\nClassElement : FieldDefinition;\nIt is a Syntax Error if PropName of FieldDefinition is \"constructor\".\n\nDefineField(receiver, fieldRecord)\n\n...\n8. If fieldName is a Private Name,\n...\n9. Else,\na. ...\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n...\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n"}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-static-computed-var-propname-constructor.js", "description": " static class fields forbid PropName 'constructor' (no early error -- PropName of ComputedPropertyName not forbidden value)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |Static Semantics: PropName\n...\nComputedPropertyName : [ AssignmentExpression ]\nReturn empty.\n\nThis test file tests the following early error is only valid for a matching PropName:\n\nStatic Semantics: Early Errors\n\nClassElement : static FieldDefinition;\nIt is a Syntax Error if PropName of FieldDefinition is \"prototype\" or \"constructor\".\n\n-- IDK what is calling InitializeClassElements but I guess it's supposed to be called to\n-- set the fields\n\nInitializeClassElements(F, proto)\n\n...\n6. For each item element in order from elements,\na. If element.[[Kind]] is \"field\" and element.[[Placement]] is \"static\" or \"prototype\",\n...\nii. Let receiver be F if element.[[Placement]] is \"static\", else let receiver be proto.\niii. Perform ? DefineClassElement(receiver, element).\n\n-- DefineClassElement is probably DefineField in the class fields proposal\n\nDefineField(receiver, fieldRecord)\n\n...\n8. If fieldName is a Private Name,\n...\n9. Else,\na. ...\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n...\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-static-computed-var-propname-prototype.js", "description": " static class fields forbid PropName 'prototype' (no early error -- PropName of ComputedPropertyName)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n16. Perform MakeConstructor(F, false, proto).\n...\n\n9.2.10 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )\n\n6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype,\n[[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false }).\n"}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-static-propname-constructor.js", "description": " static class fields forbid PropName 'constructor' (no early error -- PropName of ComputedPropertyName not forbidden value)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |Static Semantics: PropName\n...\nComputedPropertyName : [ AssignmentExpression ]\nReturn empty.\n\nThis test file tests the following early error is only valid for a matching PropName:\n\nStatic Semantics: Early Errors\n\nClassElement : static FieldDefinition;\nIt is a Syntax Error if PropName of FieldDefinition is \"prototype\" or \"constructor\".\n\n-- IDK what is calling InitializeClassElements but I guess it's supposed to be called to\n-- set the fields\n\nInitializeClassElements(F, proto)\n\n...\n6. For each item element in order from elements,\na. If element.[[Kind]] is \"field\" and element.[[Placement]] is \"static\" or \"prototype\",\n...\nii. Let receiver be F if element.[[Placement]] is \"static\", else let receiver be proto.\niii. Perform ? DefineClassElement(receiver, element).\n\n-- DefineClassElement is probably DefineField in the class fields proposal\n\nDefineField(receiver, fieldRecord)\n\n...\n8. If fieldName is a Private Name,\n...\n9. Else,\na. ...\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n...\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-static-propname-prototype.js", "description": " static class fields forbid PropName 'prototype' (no early error -- PropName of ComputedPropertyName)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n16. Perform MakeConstructor(F, false, proto).\n...\n\n9.2.10 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )\n\n6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype,\n[[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false }).\n"}, {"path": "./test262-main/test/language/statements/class/elements/fields-hash-constructor-is-a-valid-name.js", "description": " \"#constructor is a valid property name for a public field\"", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-fields-public"], "info": " |ClassElementName : PrivateName;\n\nIt is a SyntaxError if StringValue of PrivateName is \"#constructor\".\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/class/elements/indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/init-err-evaluation.js", "description": " Return abrupt completion evaluating the field initializer (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/init-value-defined-after-class.js", "description": " The initializer value is defined after the class evaluation (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/init-value-incremental.js", "description": " The initializer value is defined during the class instatiation (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n27. For each ClassElement e in order from elements\n...\nd. Append to fieldRecords the elements of fields.\n...\n33. Let result be InitializeStaticFields(F).\n...\n\n[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/intercalated-static-non-static-computed-fields.js", "description": " Computed class fields are executed in the order they are delcared, regardless it is static or instance field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassTail : ClassHeritage { ClassBody }\n...\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\n[[Construct]] (argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-computed-names.js", "description": " Computed property names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-computed-symbol-names.js", "description": " Computed property symbol names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-literal-names-asi.js", "description": " Literal property names with ASI (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-literal-names.js", "description": " Literal property names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-private-names.js", "description": " private names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-privatename-identifier.js", "description": " Valid PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-static-private-fields.js", "description": " static private fields (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-string-literal-names.js", "description": " String literal names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-computed-names.js", "description": " Computed property names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-computed-symbol-names.js", "description": " Computed property symbol names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-literal-names-asi.js", "description": " Literal property names with ASI (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-literal-names.js", "description": " Literal property names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-private-names.js", "description": " private names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-privatename-identifier.js", "description": " Valid PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-static-private-fields.js", "description": " static private fields (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-string-literal-names.js", "description": " String literal names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-private-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-private-names.js", "description": " private names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-static-private-fields.js", "description": " static private fields (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-private-names.js", "description": " private names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-static-private-fields.js", "description": " static private fields (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-private-names.js", "description": " private names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-static-private-fields.js", "description": " static private fields (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-class-field-on-frozen-objects.js", "description": " It is possible to add private fields on frozen objects", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "features": ["class", "class-fields-private", "class-fields-public"], "flags": ["onlyStrict"]}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-access-on-inner-arrow-function.js", "description": " PrivateName of private field is visible on inner arrow function of class scope (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-access-on-inner-function.js", "description": " PrivateName of private field is visible on inner function of class scope (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-as-arrow-function.js", "description": " Calling arrow function returned from private field access (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "arrow-function", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-as-async-arrow-function.js", "description": " Calling async arrow function returned from private field access (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "async-functions", "arrow-function", "class"], "flags": ["generated", "async"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-as-async-function.js", "description": " Calling async function returned from private field access (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "async-functions", "class"], "flags": ["generated", "async"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-as-function.js", "description": " Calling result returned from private field access (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-is-not-clobbered-by-computed-property.js", "description": " Private field is not clobbered by computed property", "esid": " sec-privatefieldget", "info": " |PrivateFieldGet (P, O)\n1. Assert: P is a Private Name.\n2. If O is not an object, throw a TypeError exception.\n3. If P.[[Kind]] is \"field\",\na. Let entry be PrivateFieldFind(P, O).\nb. If entry is empty, throw a TypeError exception.\nc. Return entry.[[PrivateFieldValue]].\n4. Perform ? PrivateBrandCheck(O, P).\n5. If P.[[Kind]] is \"method\",\na. Return P.[[Value]].\n6. Else,\na. Assert: P.[[Kind]] is \"accessor\".\nb. If P does not have a [[Get]] field, throw a TypeError exception.\nc. Let getter be P.[[Get]].\nd. Return ? Call(getter, O).\n", "features": ["class-fields-public", "class-fields-private", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/private-field-visible-to-direct-eval-on-initializer.js", "description": " Private field is visible on initializer with direct eval", "esid": " sec-privatefieldget", "info": " |PrivateFieldGet (P, O)\n1. Assert: P is a Private Name.\n2. If O is not an object, throw a TypeError exception.\n3. If P.[[Kind]] is \"field\",\na. Let entry be PrivateFieldFind(P, O).\nb. If entry is empty, throw a TypeError exception.\nc. Return entry.[[PrivateFieldValue]].\n4. Perform ? PrivateBrandCheck(O, P).\n5. If P.[[Kind]] is \"method\",\na. Return P.[[Value]].\n6. Else,\na. Assert: P.[[Kind]] is \"accessor\".\nb. If P does not have a [[Get]] field, throw a TypeError exception.\nc. Let getter be P.[[Get]].\nd. Return ? Call(getter, O).\n\nClassElementName : PrivateIdentifier\n1. Let privateIdentifier be StringValue of PrivateIdentifier.\n2. Let privateName be NewPrivateName(privateIdentifier).\n3. Let scope be the running execution context's PrivateEnvironment.\n4. Let scopeEnvRec be scope's EnvironmentRecord.\n5. Perform ! scopeEnvRec.InitializeBinding(privateIdentifier, privateName).\n6. Return privateName.\n\nMakePrivateReference ( baseValue, privateIdentifier )\n1. Let env be the running execution context's PrivateEnvironment.\n2. Let privateNameBinding be ? ResolveBinding(privateIdentifier, env).\n3. Let privateName be GetValue(privateNameBinding).\n4. Assert: privateName is a Private Name.\n5. Return a value of type Reference whose base value is baseValue, whose referenced name is privateName, whose strict reference flag is true.\n", "features": ["class-fields-private", "class-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/private-field-visible-to-direct-eval.js", "description": " Private field is visible to direct eval code", "esid": " sec-privatefieldget", "info": " |PrivateFieldGet (P, O)\n1. Assert: P is a Private Name.\n2. If O is not an object, throw a TypeError exception.\n3. If P.[[Kind]] is \"field\",\na. Let entry be PrivateFieldFind(P, O).\nb. If entry is empty, throw a TypeError exception.\nc. Return entry.[[PrivateFieldValue]].\n4. Perform ? PrivateBrandCheck(O, P).\n5. If P.[[Kind]] is \"method\",\na. Return P.[[Value]].\n6. Else,\na. Assert: P.[[Kind]] is \"accessor\".\nb. If P does not have a [[Get]] field, throw a TypeError exception.\nc. Let getter be P.[[Get]].\nd. Return ? Call(getter, O).\n\nClassElementName : PrivateIdentifier\n1. Let privateIdentifier be StringValue of PrivateIdentifier.\n2. Let privateName be NewPrivateName(privateIdentifier).\n3. Let scope be the running execution context's PrivateEnvironment.\n4. Let scopeEnvRec be scope's EnvironmentRecord.\n5. Perform ! scopeEnvRec.InitializeBinding(privateIdentifier, privateName).\n6. Return privateName.\n\nMakePrivateReference ( baseValue, privateIdentifier )\n1. Let env be the running execution context's PrivateEnvironment.\n2. Let privateNameBinding be ? ResolveBinding(privateIdentifier, env).\n3. Let privateName be GetValue(privateNameBinding).\n4. Assert: privateName is a Private Name.\n5. Return a value of type Reference whose base value is baseValue, whose referenced name is privateName, whose strict reference flag is true.\n", "features": ["class-fields-private", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/private-field-with-initialized-id-is-visible-in-computed-properties.js", "description": " PrivateName of a class is visible in its ComputetProperty scope", "esid": " prod-ClassTail", "info": " |ClassTail : ClassHeritage { ClassBody }\n1. Let lex be the LexicalEnvironment of the running execution context.\n2. Let classScope be NewDeclarativeEnvironment(lex).\n3. Let classScopeEnvRec be classScope's EnvironmentRecord.\n...\n8. If ClassBodyopt is present, then\na. For each element dn of the PrivateBoundIdentifiers of ClassBodyopt,\ni. Perform classPrivateEnvRec.CreateImmutableBinding(dn, true).\n...\n15. Set the running execution context's LexicalEnvironment to classScope.\n16. Set the running execution context's PrivateEnvironment to classPrivateEnvironment.\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of e is false, then\ni. Let field be the result of ClassElementEvaluation for e with arguments proto and false.\n...\n\nFieldDefinition : ClassElementName Initializer\n1. Let name be the result of evaluating ClassElementName.\n...\n\nClassElementName : PrivateIdentifier\n1. Let privateIdentifier be StringValue of PrivateIdentifier.\n2. Let privateName be NewPrivateName(privateIdentifier).\n3. Let scope be the running execution context's PrivateEnvironment.\n4. Let scopeEnvRec be scope's EnvironmentRecord.\n5. Perform ! scopeEnvRec.InitializeBinding(privateIdentifier, privateName).\n6. Return privateName.\n\nMemberExpression : MemberExpression . PrivateIdentifier\n...\n5. Return MakePrivateReference(bv, fieldNameString).\n\nMakePrivateReference ( baseValue, privateIdentifier )\n...\n2. Let privateNameBinding be ? ResolveBinding(privateIdentifier, env).\n3. Let privateName be GetValue(privateNameBinding).\n...\n\nGetValue (V)\n...\n5. If IsPropertyReference(V), then\na. If HasPrimitiveBase(V), then\ni. Assert: In this case, base will never be null or undefined.\nii. Let base be ToObject(base).\nb. If IsPrivateReference(V), then\ni. Return ? PrivateFieldGet(GetReferencedName(V), base).\n6. Else,\na. Assert: base is an Environment Record.\nb. Return ? base.GetBindingValue(GetReferencedName(V), IsStrictReference(V)).\n\nPrivateFieldGet (P, O)\n1. Assert: P is a Private Name.\n2. Assert: Type(O) is Object.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Return entry.[[PrivateFieldValue]].\n\n", "features": ["class-fields-private", "class-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/private-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-private"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-static-field-shadowed-by-field-on-nested-class.js", "description": " PrivateName of private static field can be shadowed on inner classes by a private field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class-static-fields-public", "class-fields-private", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateIdentifier\n\nClassTail : ClassHeritage { ClassBody }\n...\n6. Let classPrivateEnvironment be NewDeclarativeEnvironment(outerPrivateEnvironment).\n7. Let classPrivateEnvRec be classPrivateEnvironment's EnvironmentRecord.\n...\n15. Set the running execution context's LexicalEnvironment to classScope.\n16. Set the running execution context's PrivateEnvironment to classPrivateEnvironment.\n...\n33. If PrivateBoundIdentifiers of ClassBody contains a Private Name P such that P's [[Kind]] field is either \"method\" or \"accessor\" and P's [[Brand]] is F,\na. PrivateBrandAdd(F, F).\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n\nFieldDefinition : ClassElementName Initializer_opt\n1. Let name be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(name).\n3. If Initializer_opt is present,\na. Let lex be the Lexical Environment of the running execution context.\nb. Let formalParameterList be an instance of the production FormalParameters : [empty].\nc. Let privateScope be the PrivateEnvironment of the running execution context.\nd. Let initializer be FunctionCreate(Method, formalParameterList, Initializer, lex, true, privateScope).\ne. Perform MakeMethod(initializer, homeObject).\nf. Let isAnonymousFunctionDefinition be IsAnonymousFunctionDefinition(Initializer).\n4. Else,\na. Let initializer be empty.\nb. Let isAnonymousFunctionDeclaration be false.\n5. Return a Record { [[Name]]: name, [[Initializer]]: initializer, [[IsAnonymousFunctionDefinition]]: isAnonymousFunctionDefinition }.\n\nMemberExpression : MemberExpression.PrivateIdentifier\n1. Let baseReference be the result of evaluating MemberExpression.\n2. Let baseValue be ? GetValue(baseReference).\n3. Let bv be ? RequireObjectCoercible(baseValue).\n4. Let fieldNameString be the StringValue of PrivateIdentifier.\n5. Return MakePrivateReference(bv, fieldNameString).\n\nMakePrivateReference(baseValue, privateIdentifier)\n1. Let env be the running execution context's PrivateEnvironment.\n2. Let privateNameBinding be ? ResolveBinding(privateIdentifier, env).\n3. Let privateName be GetValue(privateNameBinding).\n4. Assert: privateName is a Private Name.\n5. Return a value of type Reference whose base value is baseValue, whose referenced name is privateName, whose strict reference flag is true.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-static-field-usage-inside-nested-class.js", "description": " PrivateName of private static field is available inside inner classes (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateIdentifier\n\nClassTail : ClassHeritage { ClassBody }\n...\n6. Let classPrivateEnvironment be NewDeclarativeEnvironment(outerPrivateEnvironment).\n7. Let classPrivateEnvRec be classPrivateEnvironment's EnvironmentRecord.\n...\n15. Set the running execution context's LexicalEnvironment to classScope.\n16. Set the running execution context's PrivateEnvironment to classPrivateEnvironment.\n...\n33. If PrivateBoundIdentifiers of ClassBody contains a Private Name P such that P's [[Kind]] field is either \"method\" or \"accessor\" and P's [[Brand]] is F,\na. PrivateBrandAdd(F, F).\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n\nFieldDefinition : ClassElementName Initializer_opt\n1. Let name be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(name).\n3. If Initializer_opt is present,\na. Let lex be the Lexical Environment of the running execution context.\nb. Let formalParameterList be an instance of the production FormalParameters : [empty].\nc. Let privateScope be the PrivateEnvironment of the running execution context.\nd. Let initializer be FunctionCreate(Method, formalParameterList, Initializer, lex, true, privateScope).\ne. Perform MakeMethod(initializer, homeObject).\nf. Let isAnonymousFunctionDefinition be IsAnonymousFunctionDefinition(Initializer).\n4. Else,\na. Let initializer be empty.\nb. Let isAnonymousFunctionDeclaration be false.\n5. Return a Record { [[Name]]: name, [[Initializer]]: initializer, [[IsAnonymousFunctionDefinition]]: isAnonymousFunctionDefinition }.\n\nMemberExpression : MemberExpression.PrivateIdentifier\n1. Let baseReference be the result of evaluating MemberExpression.\n2. Let baseValue be ? GetValue(baseReference).\n3. Let bv be ? RequireObjectCoercible(baseValue).\n4. Let fieldNameString be the StringValue of PrivateIdentifier.\n5. Return MakePrivateReference(bv, fieldNameString).\n\nMakePrivateReference(baseValue, privateIdentifier)\n1. Let env be the running execution context's PrivateEnvironment.\n2. Let privateNameBinding be ? ResolveBinding(privateIdentifier, env).\n3. Let privateName be GetValue(privateNameBinding).\n4. Assert: privateName is a Private Name.\n5. Return a value of type Reference whose base value is baseValue, whose referenced name is privateName, whose strict reference flag is true.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-static-field-visible-to-direct-eval.js", "description": " Private static field is visible to direct eval code", "esid": " sec-privatefieldget", "info": " |PrivateFieldGet (P, O)\n1. Assert: P is a Private Name.\n2. If O is not an object, throw a TypeError exception.\n3. If P.[[Kind]] is \"field\",\na. Let entry be PrivateFieldFind(P, O).\nb. If entry is empty, throw a TypeError exception.\nc. Return entry.[[PrivateFieldValue]].\n4. Perform ? PrivateBrandCheck(O, P).\n5. If P.[[Kind]] is \"method\",\na. Return P.[[Value]].\n6. Else,\na. Assert: P.[[Kind]] is \"accessor\".\nb. If P does not have a [[Get]] field, throw a TypeError exception.\nc. Let getter be P.[[Get]].\nd. Return ? Call(getter, O).\n\nClassElementName : PrivateIdentifier\n1. Let privateIdentifier be StringValue of PrivateIdentifier.\n2. Let privateName be NewPrivateName(privateIdentifier).\n3. Let scope be the running execution context's PrivateEnvironment.\n4. Let scopeEnvRec be scope's EnvironmentRecord.\n5. Perform ! scopeEnvRec.InitializeBinding(privateIdentifier, privateName).\n6. Return privateName.\n\nMakePrivateReference ( baseValue, privateIdentifier )\n1. Let env be the running execution context's PrivateEnvironment.\n2. Let privateNameBinding be ? ResolveBinding(privateIdentifier, env).\n3. Let privateName be GetValue(privateNameBinding).\n4. Assert: privateName is a Private Name.\n5. Return a value of type Reference whose base value is baseValue, whose referenced name is privateName, whose strict reference flag is true.\n", "features": ["class-static-fields-private", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefield-on-proxy.js", "description": " Sucessyfully get private reference without using [[Get]]", "esid": " sec-getvalue", "info": " |GetValue(V)\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\nc. Return ? base.[[Get]](GetReferencedName(V), GetThisValue(V)).\nPrivateFieldGet(P, O)\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Return entry.[[PrivateFieldValue]].\n", "includes": ["compareArray.js"], "features": ["class", "class-fields-private", "Proxy"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldadd-typeerror.js", "description": " Class construction should error if attempting to add private field twice", "esid": " sec-ecmascript-function-objects-construct-argumentslist-newtarget", "info": " |[[Construct]] ( argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n\nInitializeInstanceFields ( O, constructor )\n1. Assert: Type ( O ) is Object.\n2. Assert: Assert constructor is an ECMAScript function object.\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. Perform ? DefineField(O, fieldRecord).\n5. Return.\n\nDefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n\nPrivateFieldAdd (P, O, value)\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is not empty, throw a TypeError exception.\n...\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-primitive-receiver.js", "description": " PrivateField calls ToObject when receiver is a primitive", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\na. If HasPrimitiveBase(V), then\ni. Assert: In this case, base will never be null or undefined.\nii. Let base be ToObject(base).\nb. If IsPrivateReference(V), then\ni. Return ? PrivateFieldGet(field, base).\n...\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Return entry.[[PrivateFieldValue]].\n\n", "features": ["class", "class-fields-private", "BigInt"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-success-1.js", "description": " Successfully access private field", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Return entry.[[PrivateFieldValue]].\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-success-2.js", "description": " Successfully access private field", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Return entry.[[PrivateFieldValue]].\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-success-3.js", "description": " Successfully access private field", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Return entry.[[PrivateFieldValue]].\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-success-4.js", "description": " Successfully access private field", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Return entry.[[PrivateFieldValue]].\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-success-5.js", "description": " Successfully access private field", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Return entry.[[PrivateFieldValue]].\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-typeerror-1.js", "description": " Cannot access private field before the entry was added to [[PrivateFieldValues]]", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-typeerror-2.js", "description": " TypeError when referenced private field cannot be found in `this`'s [[PrivateFieldValues]]", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-typeerror-3.js", "description": " >Referenced lexically scoped private field found in `this`'s [[PrivateFieldValues]]\n", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-typeerror-4.js", "description": " TypeError when referenced private field cannot be found in `this`'s [[PrivateFieldValues]]", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldget-typeerror-5.js", "description": " TypeError when referenced private field cannot be found in `this`'s [[PrivateFieldValues]]", "esid": " sec-getvalue", "info": " |GetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Return ? PrivateFieldGet(field, base).\n\nPrivateFieldGet (P, O )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldput-primitive-receiver.js", "description": " PrivateField calls ToObject when receiver is a primitive", "esid": " sec-putvalue", "info": " |PutValue ( V, W )\n...\n6. If IsPropertyReference(V), then\na. If HasPrimitiveBase(V), then\ni. Assert: In this case, base will never be null or undefined.\nii. Let base be ToObject(base).\nb. If IsPrivateReference(V), then\ni. Return ? PrivateFieldSet(field, base, W).\n...\n\nPrivateFieldSet (P, O, value )\n1. Assert: P is a Private Name.\n2. Assert: Type(O) is Object.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n5. Set entry.[[PrivateFieldValue]] to value.\n\n", "features": ["class", "class-fields-private", "BigInt"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldset-typeerror-1.js", "description": " TypeError when setting private field before the entry was added to [[PrivateFieldValues]]", "esid": " sec-putvalue", "info": " |PutValue ( V, W )\n...\n6. Else if IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Perform ? PrivateFieldSet(field, base, W).\n\nPrivateFieldSet (P, O, value )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldset-typeerror-2.js", "description": " TypeError when setting private field not in `this`'s [[PrivateFieldValues]]", "esid": " sec-putvalue", "info": " |PutValue ( V, W )\n...\n6. Else if IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Perform ? PrivateFieldSet(field, base, W).\n\nPrivateFieldSet (P, O, value )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldset-typeerror-3.js", "description": " >Referenced lexically scoped private field found in `this`'s [[PrivateFieldValues]]\n", "esid": " sec-putvalue", "info": " |PutValue ( V, W )\n...\n6. Else if IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Perform ? PrivateFieldSet(field, base, W).\n\nPrivateFieldSet (P, O, value )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldset-typeerror-4.js", "description": " TypeError when setting private field not in `this`'s [[PrivateFieldValues]]", "esid": " sec-putvalue", "info": " |PutValue ( V, W )\n...\n6. Else if IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Perform ? PrivateFieldSet(field, base, W).\n\nPrivateFieldSet (P, O, value )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatefieldset-typeerror-5.js", "description": " TypeError when setting private field not in `this`'s [[PrivateFieldValues]]", "esid": " sec-putvalue", "info": " |PutValue ( V, W )\n...\n6. Else if IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Let env be the running execution context's PrivateNameEnvironment.\nii. Let field be ? ResolveBinding(GetReferencedName(V), env).\niii. Assert: field is a Private Name.\niv. Perform ? PrivateFieldSet(field, base, W).\n\nPrivateFieldSet (P, O, value )\n1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\nPrivateFieldFind (P, O)\n1. Assert: P is a Private Name value.\n2. Assert: O is an object with a [[PrivateFieldValues]] internal slot.\n3. For each element entry in O.[[PrivateFieldValues]],\na. If entry.[[PrivateName]] is P, return entry.\n4. Return empty.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatename-not-valid-eval-earlyerr-3.js", "esid": " sec-scripts-static-semantics-early-errors", "description": " Early error when referencing privatename that has not been declared in class.", "info": " |Static Semantics: Early Errors\nScriptBody : StatementList\n\nIt is a Syntax Error if AllPrivateNamesValid of StatementList with an empty List as an argument is false unless the source code is eval code that is being processed by a direct eval.\n\n", "features": ["class", "class-fields-private", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/privatename-not-valid-eval-earlyerr-4.js", "esid": " sec-scripts-static-semantics-early-errors", "description": " Early error when referencing privatename that has not been declared in class.", "info": " |Static Semantics: Early Errors\nScriptBody : StatementList\n\nIt is a Syntax Error if AllPrivateNamesValid of StatementList with an empty List as an argument is false unless the source code is eval code that is being processed by a direct eval.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatename-not-valid-eval-earlyerr-5.js", "esid": " sec-scripts-static-semantics-early-errors", "description": " Early error when referencing privatename outside of class", "info": " |Static Semantics: Early Errors\nScriptBody : StatementList\n\nIt is a Syntax Error if AllPrivateNamesValid of StatementList with an empty List as an argument is false unless the source code is eval code that is being processed by a direct eval.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/privatename-valid-no-earlyerr.js", "esid": " sec-all-private-names-valid", "description": " Referencing privatename in class within class does not error.", "info": " |Static Semantics: AllPrivateNamesValid\n\nAllPrivateNamesValid is an abstract operation which takes names as an argument.\n\nMemberExpression : MemberExpression . PrivateName\n1. If StringValue of PrivateName is in names, return true.\n2. Return false.\n\nCallExpression : CallExpression . PrivateName\n1. If StringValue of PrivateName is in names, return true.\n2. Return false.\n\nClassBody : ClassElementList\n1. Let newNames be the concatenation of names with PrivateBoundNames of ClassBody.\n2. Return AllPrivateNamesValid of ClassElementList with the argument newNames.\n\nFor all other grammatical productions, recurse on subexpressions/substatements, passing in the names of the caller. If all pieces return true, then return true. If any returns false, return false.\n\n", "features": ["class", "class-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/public-class-field-initialization-is-visible-to-proxy.js", "description": " Public class field initialization calls [[DefineOwnProperty]] and can be observed by Proxies", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/public-class-field-initialization-on-super-class-with-setter.js", "description": " Public class field initialization calls [[DefineOwnProperty]] and don't execute super's getter", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "includes": ["propertyHelper.js"], "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/redeclaration-symbol.js", "description": " Redeclaration of public fields with the same name (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js", "compareArray.js"], "info": " |2.13.2 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n30. Set the value of F's [[Fields]] internal slot to fieldRecords.\n...\n\n2.14 [[Construct]] ( argumentsList, newTarget)\n\n...\n8. If kind is \"base\", then\n...\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n\n2.9 InitializeInstanceFields ( O, constructor )\n\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/redeclaration.js", "description": " Redeclaration of public fields with the same name (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js", "compareArray.js"], "info": " |2.13.2 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n30. Set the value of F's [[Fields]] internal slot to fieldRecords.\n...\n\n2.14 [[Construct]] ( argumentsList, newTarget)\n\n...\n8. If kind is \"base\", then\n...\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n\n2.9 InitializeInstanceFields ( O, constructor )\n\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-computed-names.js", "description": " Computed property names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-computed-symbol-names.js", "description": " Computed property symbol names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-literal-names-asi.js", "description": " Literal property names with ASI (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-literal-names.js", "description": " Literal property names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-private-names.js", "description": " private names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-privatename-identifier.js", "description": " Valid PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-static-private-fields.js", "description": " static private fields (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-string-literal-names.js", "description": " String literal names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-computed-names.js", "description": " Computed property names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-literal-names.js", "description": " Literal property names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-private-names.js", "description": " private names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-static-private-fields.js", "description": " static private fields (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-gen-string-literal-names.js", "description": " String literal names (field definitions after an async generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-iteration"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-computed-names.js", "description": " Computed property names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-literal-names.js", "description": " Literal property names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-private-names.js", "description": " private names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-static-private-fields.js", "description": " static private fields (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-async-method-string-literal-names.js", "description": " String literal names (field definitions after an async method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "async-functions"], "flags": ["generated", "async"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-computed-names.js", "description": " Computed property names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-literal-names.js", "description": " Literal property names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-private-names.js", "description": " private names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-static-private-fields.js", "description": " static private fields (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-string-literal-names.js", "description": " String literal names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-private-names.js", "description": " private names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-privatename-identifier.js", "description": " Valid PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-static-private-fields.js", "description": " static private fields (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-as-valid-instance-field-assigned.js", "description": " static is a valid name of an instance field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-as-valid-instance-field.js", "description": " static is a valid name of an instance field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-as-valid-static-field-assigned.js", "description": " static is a valid name of a static field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nstatic FieldDefinition ;\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-as-valid-static-field.js", "description": " static is a valid name of a static field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nstatic FieldDefinition ;\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-anonymous-function-length.js", "description": " Anonymous function in field initilizer have length properly set (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-anonymous-function-name.js", "description": " Anonymous function receives the name of static fields (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-declaration.js", "description": " Static fields are defined using DefineField (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-init-this-inside-arrow-function.js", "description": " this in static field initializers refers to class constructor (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-init-with-this.js", "description": " Static fields initializer has `this` biding (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-initializer-error.js", "description": " Class evaluation is incomplete when initializer resutls in an abrupt completition", "esid": " sec-define-field", "info": " |ClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "features": ["class-static-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/static-field-redeclaration.js", "description": " Static fields can be redeclared (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-fielddefinition-initializer-abrupt-completion.js", "description": " Class construction should error if evaluation of static field initializer errors", "esid": " runtime-semantics-class-definition-evaluation", "info": " |Runtime Semantics: ClassDefinitionEvaluation\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of e is false, then\ni. Let fields be the result of performing ClassElementEvaluation\nfor e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation\nfor e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/static-private-fields-proxy-default-handler-throws.js", "esid": " sec-privatefieldget", "description": " Static private fields not accessible via default Proxy handler", "info": " |1. Assert: P is a Private Name value.\n2. If O is not an object, throw a TypeError exception.\n3. Let entry be PrivateFieldFind(P, O).\n4. If entry is empty, throw a TypeError exception.\n\n", "features": ["class", "class-static-fields-private"]}, {"path": "./test262-main/test/language/statements/class/elements/super-access-from-arrow-func-on-field.js", "description": " super inside arrow functions on field initializer resolves to class' super (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |ClassElementName :\nPropertyName\nPrivateName\n\nSuperProperty:\nsuper[Expression]\nsuper.IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/super-fielddefinition-initializer-abrupt-completion.js", "description": " Class construction should error if evaluation of field initializer in super errors", "esid": " sec-super-keyword-runtime-semantics-evaluation", "info": " |Runtime Semantics: Evaluation\nSuperCall : superArguments\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be ? GetSuperConstructor().\n4. Let argList be ArgumentListEvaluation of Arguments.\n5. ReturnIfAbrupt(argList).\n6. Let result be ? Construct(func, argList, newTarget).\n7. Let thisER be GetThisEnvironment( ).\n8. Let F be thisER.[[FunctionObject]].\n9. Assert: F is an ECMAScript function object.\n10. Perform ? InitializeInstanceFields(result, F).\n\nInitializeInstanceFields ( O, constructor )\n1. Assert: Type ( O ) is Object.\n2. Assert: Assert constructor is an ECMAScript function object.\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let fieldName be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na.Let initValue be ? Call(initializer, receiver).\n\n", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-field-classelementname-initializer-alt.js", "description": " FieldDefinition, ClassElementName, PropertyName = Initializer Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-field-classelementname-initializer.js", "description": " FieldDefinition, ClassElementName, PropertyName = Initializer Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-field-identifier-alt.js", "description": " Valid FieldDefinition, ClassElementName, PropertyName Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-field-identifier.js", "description": " Valid FieldDefinition, ClassElementName, PropertyName Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-fields-multi-line.js", "description": " Valid multi-line, multi-field (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-privatename-classelementname-initializer-alt.js", "description": " Valid PrivateName = Initializer Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-privatename-classelementname-initializer.js", "description": " Valid PrivateName = Initializer Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-privatename-identifier.js", "description": " Valid PrivateName Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-privatename-no-initializer-with-method.js", "description": " SyntaxError (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-privatenames-multi-line.js", "description": " SyntaxError (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-private", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-computed-names.js", "description": " Computed property names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-computed-symbol-names.js", "description": " Computed property symbol names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-grammar-privatename-identifier-semantics-stringvalue.js", "description": " PrivateName Static Semantics, StringValue (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n\n1. Return the String value consisting of the sequence of code\nunits corresponding to PrivateName. In determining the sequence\nany occurrences of \\ UnicodeEscapeSequence are first replaced\nwith the code point represented by the UnicodeEscapeSequence\nand then the code points of the entire PrivateName are converted\nto code units by UTF16Encoding (10.1.1) each code point.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-literal-names-asi.js", "description": " Literal property names with ASI (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-literal-names.js", "description": " Literal property names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-private-field-usage.js", "description": " PrivateName CallExpression usage (private field) (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-private-names.js", "description": " private names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-field-identifier.js", "description": " Valid FieldDefinition (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-privatename-identifier-alt.js", "description": " Valid PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-privatename-identifier-initializer-alt.js", "description": " Valid PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-privatename-identifier-initializer.js", "description": " Valid PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-privatename-identifier.js", "description": " Valid PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-static-privatename-identifier-alt-by-classname.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-static-privatename-identifier-alt.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-static-privatename-identifier-by-classname.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-static-privatename-identifier-initializer-alt-by-classname.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-static-privatename-identifier-initializer-alt.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-static-privatename-identifier-initializer.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-static-privatename-identifier.js", "description": " Valid Static PrivateName (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\nstatic FieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPrivateName ::\n# IdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-static-private-fields.js", "description": " static private fields (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-private", "class", "class-fields-public"], "flags": ["generated"], "info": " |ClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPrivateName\n\nPrivateName :\n# IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-string-literal-names.js", "description": " String literal names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/static-classelementname-abrupt-completion.js", "description": " Class definition should error if evaluation of static ClassElementName errors", "esid": " runtime-semantics-class-definition-evaluation", "info": " |Runtime Semantics: ClassDefinitionEvaluation\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of e is false, then\ni. Let fields be the result of performing ClassElementEvaluation\nfor e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation\nfor e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-rtrn-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-thrw-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-thrw-close.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-thrw-close-err.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"throw\" completion and the iterator has not been marked as \"done\" (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n7. If completion.[[type]] is throw, return Completion(completion).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-thrw-close.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"throw\" completion and the iterator has not been marked as \"done\" (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-rtrn-close-err.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"return\" completion due to reference evaluation (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-rtrn-close.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"return\" completion due to reference evaluation (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-thrw-close-err.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"throw\" completion due to reference evaluation (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n7. If completion.[[type]] is throw, return Completion(completion)\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-thrw-close.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"throw\" completion due to reference evaluation (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-rtrn-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-rtrn-close.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-thrw-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-thrw-close.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-lref-err.js", "description": " IteratorClose is called when reference evaluation produces an abrupt completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-throw-get-method-non-callable.js", "esid": " sec-iteratorclose", "description": " >If retrieving an iterator's `return` method generates an error while\nclosing the iterator with throw completion, this error should be suppressed.\n", "info": " |IteratorClose ( iteratorRecord, completion )\n\n[...]\n4. Let innerResult be GetMethod(iterator, \"return\").\n5. If innerResult.[[Type]] is normal,\n[...]\n6. If completion.[[Type]] is throw, return Completion(completion).\n7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n", "features": ["Symbol.iterator"]}]