[{"path": "./test262-main/test/built-ins/Atomics/notify/bigint/bad-range.js", "esid": " sec-atomics.notify", "description": " >Test range checking of Atomics.notify on arrays that allow atomic operations\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n..\n\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/expected-return-value-negative-zero.js", "esid": " sec-atomics.store", "description": " >Atomics.store calls ToInteger, which normalizes -0 to +0\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/bad-range.js", "esid": " sec-atomics.wait", "description": " >Test range checking of Atomics.wait on arrays that allow atomic operations\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/false-for-timeout.js", "esid": " sec-atomics.wait", "description": " >False timeout arg should result in an +0 timeout\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nBoolean -> If argument is true, return 1. If argument is false, return +0.\n\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/negative-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a RangeError is index < 0\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n2.b If integerIndex < 0, throw a RangeError exception\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/negative-timeout.js", "esid": " sec-atomics.wait", "description": " >Test that Atomics.wait times out with a negative timeout\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/out-of-range-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a RangeError if value of index arg is out of range\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex \u2265 length, throw a RangeError exception.\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-not-callable-reject-with-typeerror.js", "esid": " sec-promise.allSettled", "description": " >If the constructor's `resolve` method is not callable, reject with a TypeError.\n", "info": " |Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nLet promiseResolve be ? Get(constructor, \"resolve\").\nIf ! IsCallable(promiseResolve) is false, throw a TypeError exception.\n\n", "flags": ["async"], "features": ["Promise.allSettled", "arrow-function"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Alphabetic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Alphabetic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Assigned.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Assigned`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Case_Ignorable.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Case_Ignorable`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Cased.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Cased`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Casefolded.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Casefolded`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Casemapped.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Casemapped`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Lowercased.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Lowercased`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_NFKC_Casefolded.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_NFKC_Casefolded`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Titlecased.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Titlecased`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Uppercased.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Uppercased`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Dash.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Dash`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Diacritic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Diacritic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Emoji.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Emoji`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Emoji_Modifier_Base.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Emoji_Modifier_Base`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Emoji_Presentation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Emoji_Presentation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Extended_Pictographic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Extended_Pictographic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Extender.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Extender`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Cased_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Cased_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Dash_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Dash_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Decimal_Number.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Decimal_Number`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Lowercase_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Lowercase_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Mark.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Mark`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Modifier_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Modifier_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Modifier_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Modifier_Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Nonspacing_Mark.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Nonspacing_Mark`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Number.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Number`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other_Number.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other_Number`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other_Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Spacing_Mark.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Spacing_Mark`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Unassigned.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Unassigned`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Uppercase_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Uppercase_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Grapheme_Base.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Grapheme_Base`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Grapheme_Extend.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Grapheme_Extend`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/ID_Continue.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `ID_Continue`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/ID_Start.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `ID_Start`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Ideographic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Ideographic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Lowercase.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Lowercase`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Arabic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Arabic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Armenian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Armenian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Bopomofo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Bopomofo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Chakma.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Chakma`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Chorasmian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Chorasmian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Common.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Common`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Dives_Akuru.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Dives_Akuru`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Han.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Han`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Inherited.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Inherited`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Khitan_Small_Script.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Khitan_Small_Script`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Latin.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Latin`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Lisu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Lisu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Malayalam.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Malayalam`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Newa.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Newa`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Oriya.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Oriya`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Sharada.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Sharada`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Sinhala.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Sinhala`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Syloti_Nagri.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Syloti_Nagri`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tangut.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tangut`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Yezidi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Yezidi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Arabic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Arabic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Bopomofo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Bopomofo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Chakma.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Chakma`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Chorasmian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Chorasmian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Common.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Common`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Cyrillic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Cyrillic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Dives_Akuru.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Dives_Akuru`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Georgian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Georgian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Han.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Han`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Inherited.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Inherited`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Khitan_Small_Script.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Khitan_Small_Script`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Latin.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Latin`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Lisu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Lisu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Malayalam.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Malayalam`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Newa.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Newa`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Oriya.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Oriya`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Sharada.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Sharada`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Sinhala.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Sinhala`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Syloti_Nagri.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Syloti_Nagri`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Syriac.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Syriac`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tangut.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tangut`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Yezidi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Yezidi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Sentence_Terminal.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Sentence_Terminal`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Terminal_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Terminal_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Unified_Ideograph.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Unified_Ideograph`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Uppercase.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Uppercase`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/XID_Continue.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `XID_Continue`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/XID_Start.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `XID_Start`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/de-DE.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " Checks basic behavior for BigInt.prototype.toLocaleString.", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/Collator/usage-de.js", "esid": " sec-initializecollator", "description": " Checks the behavior of search and sort in German.", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-calendar-numberingSystem-order.js", "esid": " sec-initializedatetimeformat", "description": " >Checks the order of getting \"calendar\" and \"numberingSystem\" options in the\nDateTimeFormat is between \"localeMatcher\" and \"hour12\" options.\n", "info": " |4. Let _matcher_ be ? GetOption(_options_, `\"localeMatcher\"`, `\"string\"`, &laquo; `\"lookup\"`, `\"best fit\"` &raquo;, `\"best fit\"`).\n...\n6. Let _calendar_ be ? GetOption(_options_, `\"calendar\"`, `\"string\"`, *undefined*, *undefined*).\n...\n9. Let _numberingSystem_ be ? GetOption(_options_, `\"numberingSystem\"`, `\"string\"`, *undefined*, *undefined*).\n...\n12. Let _hour12_ be ? GetOption(_options_, `\"hour12\"`, `\"boolean\"`, *undefined*, *undefined*).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-calendar-invalid.js", "esid": " sec-initializedatetimeformat", "description": " >Checks error cases for the options argument to the DateTimeFormat constructor.\n", "info": " |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n7. If calendar is not undefined, then\na. If calendar does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-numberingSystem-invalid.js", "esid": " sec-initializedatetimeformat", "description": " >Checks error cases for the options argument to the DateTimeFormat constructor.\n", "info": " |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n10. If numberingSystem is not undefined, then\na. If numberingSystem does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/related-year-zh.js", "esid": " sec-partitiondatetimepattern", "description": " >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choice of pattern based on calendar.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/related-year-zh.js", "esid": " sec-partitiondatetimepattern", "description": " >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choice of pattern based on calendar.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/related-year.js", "esid": " sec-partitiondatetimepattern", "description": " >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choose of pattern base on calendar.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle-dateStyle.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings when using dateStyle.\n", "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle-timeStyle.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings when using timeStyle.\n", "includes": ["propertyHelper.js"], "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings.\n", "info": " |12.4.5 Intl.DateTimeFormat.prototype.resolvedOptions()\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/resolved-locale-with-hc-unicode.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >The resolved locale doesn't include a hc Unicode extension value if the\nhour12 or hourCycle option is also present.\n", "info": " |12.1.1 InitializeDateTimeFormat(dateTimeFormat, locales, options)\n...\n6. Let hour12 be ? GetOption(options, \"hour12\", \"boolean\", undefined, undefined).\n7. Let hourCycle be ? GetOption(options, \"hourCycle\", \"string\", \u00ab \"h11\", \"h12\", \"h23\", \"h24\" \u00bb, undefined).\n8. If hour12 is not undefined, then\na. Let hourCycle be null.\n9. Set opt.[[hc]] to hourCycle.\n...\n\n9.2.6 ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData)\n...\n8. For each element key of relevantExtensionKeys in List order, do\n...\ni. If options has a field [[<key>]], then\ni. Let optionsValue be options.[[<key>]].\nii. Assert: Type(optionsValue) is either String, Undefined, or Null.\niii. If keyLocaleData contains optionsValue, then\n1. If SameValue(optionsValue, value) is false, then\na. Let value be optionsValue.\nb. Let supportedExtensionAddition be \"\".\n...\n"}, {"path": "./test262-main/test/intl402/DisplayNames/ctor-custom-get-prototype-poison-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt from Get Prototype from a custom NewTarget\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n...\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n", "features": ["Intl.DisplayNames", "Reflect", "Proxy"]}, {"path": "./test262-main/test/intl402/DisplayNames/ctor-custom-prototype.js", "esid": " sec-Intl.DisplayNames", "description": " >Custom Prototype of the returned object based on the NewTarget\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n...\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n", "features": ["Intl.DisplayNames", "Reflect"]}, {"path": "./test262-main/test/intl402/DisplayNames/ctor-default-prototype.js", "esid": " sec-Intl.DisplayNames", "description": " >Prototype of the returned object is DisplayNames.prototype\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n27. Return displayNames.\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/instance-extensible.js", "esid": " sec-Intl.DisplayNames", "description": " >Instance is extensible\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nObjectCreate ( proto [ , internalSlotsList ] )\n\n...\n2. Let obj be a newly created object with an internal slot for each name in internalSlotsList.\n3. Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.\n4. Set obj.[[Prototype]] to proto.\n5. Set obj.[[Extensible]] to true.\n6. Return obj.\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/locales-length-poison-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from Get Locales length\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n3. Let requestedLocales be ? CanonicalizeLocaleList(locales).\n...\n\nCanonicalizeLocaleList ( locales )\n\n1. If locales is undefined, then\na. Return a new empty List.\n2. Let seen be a new empty List.\n3. If Type(locales) is String, then\na. Let O be CreateArrayFromList(\u00ab locales \u00bb).\n4. Else,\na. Let O be ? ToObject(locales).\n5. Let len be ? ToLength(? Get(O, \"length\")).\n", "features": ["Intl.DisplayNames", "Symbol"]}, {"path": "./test262-main/test/intl402/DisplayNames/locales-length-tolength-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from Locales invalid length\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n3. Let requestedLocales be ? CanonicalizeLocaleList(locales).\n...\n\nCanonicalizeLocaleList ( locales )\n\n1. If locales is undefined, then\na. Return a new empty List.\n2. Let seen be a new empty List.\n3. If Type(locales) is String, then\na. Let O be CreateArrayFromList(\u00ab locales \u00bb).\n4. Else,\na. Let O be ? ToObject(locales).\n5. Let len be ? ToLength(? Get(O, \"length\")).\n\nToLength ( argument )\n\n1. Let len be ? ToInteger(argument).\n...\n", "features": ["Intl.DisplayNames", "Symbol", "BigInt"]}, {"path": "./test262-main/test/intl402/DisplayNames/locales-symbol-length.js", "esid": " sec-Intl.DisplayNames", "description": " >CanonicalizeLocaleList tries to fetch length from Object.\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n3. Let requestedLocales be ? CanonicalizeLocaleList(locales).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nCanonicalizeLocaleList ( locales )\n\n1. If locales is undefined, then\na. Return a new empty List.\n2. Let seen be a new empty List.\n3. If Type(locales) is String, then\na. Let O be CreateArrayFromList(\u00ab locales \u00bb).\n4. Else,\na. Let O be ? ToObject(locales).\n5. Let len be ? ToLength(? Get(O, \"length\")).\n", "features": ["Intl.DisplayNames", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/DisplayNames/name.js", "esid": " sec-Intl.DisplayNames", "description": " >Intl.DisplayNames.name is \"DisplayNames\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString.\n\nUnless otherwise specified, the name property of a built-in Function object,\nif it exists, has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-fallback-abrupt-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from GetOption fallback\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. Let options be ? ToObject(options).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames", "Symbol"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-fallback-invalid-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from an invalid fallback option\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, \"language\").\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\n...\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-fallback-toString-abrupt-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from GetOption fallback\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames", "Symbol"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-fallback-valid.js", "esid": " sec-Intl.DisplayNames", "description": " >Valid options for fallback\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-localeMatcher-abrupt-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from GetOption localeMatcher\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-localeMatcher-invalid-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from an invalid localeMatcher option\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\n...\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-localeMatcher-toString-abrupt-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from GetOption localeMatcher\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames", "Symbol"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-localeMatcher-valid.js", "esid": " sec-Intl.DisplayNames", "description": " >Valid options for localeMatcher\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-random-properties-unchecked.js", "esid": " sec-Intl.DisplayNames", "description": " >Random options are not checked or used, including case sensitive\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. Let options be ? ToObject(options).\n...\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-style-abrupt-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from GetOption style\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n13. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\", \"weekday\", \"month\", \"quarter\", \"dayPeriod\", \"dateTimeField\" \u00bb, \"language\").\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-style-invalid-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from an invalid style option\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\n...\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-style-toString-abrupt-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from GetOption style\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames", "Symbol"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-style-valid.js", "esid": " sec-Intl.DisplayNames", "description": " >Valid options for localeMatcher\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. Let options be ? ToObject(options).\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-type-abrupt-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from GetOption type\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n13. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\", \"weekday\", \"month\", \"quarter\", \"dayPeriod\", \"dateTimeField\" \u00bb, \"language\").\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-type-toString-abrupt-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Return abrupt completion from GetOption type\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n13. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\", \"weekday\", \"month\", \"quarter\", \"dayPeriod\", \"dateTimeField\" \u00bb, \"language\").\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames", "Symbol"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-type-valid.js", "esid": " sec-Intl.DisplayNames", "description": " >Valid options for localeMatcher\n", "info": " |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. Let options be ? ToObject(options).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/prop-desc.js", "esid": " sec-Intl.DisplayNames", "description": " >Property descriptor of Intl.DisplayNames\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/proto.js", "esid": " sec-Intl.DisplayNames", "description": " >The internal prototype of Intl.DisplayNames\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/Symbol.toStringTag.js", "esid": " sec-intl.DisplayNames.prototype-@@tostringtag", "description": " >Property descriptor of DisplayNames.prototype[@@toStringTag]\n", "info": " |The initial value of the @@toStringTag property is the string value \"Intl.DisplayNames\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.DisplayNames", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/prop-desc.js", "esid": " sec-Intl.DisplayNames.prototype", "description": " >Property descriptor of Intl.DisplayNames.prototype\n", "info": " |The value of Intl.DisplayNames.prototype is %DisplayNamesPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/default-option-values.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Default values for each option\n", "info": " |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ( locales , options )\n\n...\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n9. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n10. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n", "features": ["Intl.DisplayNames"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/length.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Intl.DisplayNames.prototype.resolvedOptions.length is 0.\n", "info": " |ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/name.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Intl.DisplayNames.prototype.resolvedOptions.name is \"resolvedOptions\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString.\n\nUnless otherwise specified, the name property of a built-in Function object,\nif it exists, has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/option-fallback.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Values for the fallback option\n", "info": " |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ( locales , options )\n\n...\n10. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n11. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n", "features": ["Intl.DisplayNames"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/option-style.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Values for the style option\n", "info": " |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ( locales , options )\n\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n10. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n10. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n", "features": ["Intl.DisplayNames"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/option-type.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Values for the type option\n", "info": " |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ([ locales [ , options ]])\n\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n10. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n11. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n13. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\"\u00bb,\n\"language\").\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n", "features": ["Intl.DisplayNames"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/prop-desc.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Property descriptor of Intl.DisplayNames.prototype.resolvedOptions\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/return-object.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Returns a new ordinary object on each call, with data properties containing values from internals\n", "info": " |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ( locales , options )\n\n...\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n...\n9. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n10. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"narrow\", \"short\", \"long\" \u00bb, \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"language\", \"region\", \"script\", \"currency\" \u00bb, undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", \u00ab \"code\", \"none\" \u00bb, \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n", "features": ["Intl.DisplayNames", "Reflect"], "includes": ["propertyHelper.js", "compareArray.js"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/this-not-object-throws.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Throws a TypeError if this is not Object.\n", "info": " |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n...\n", "features": ["Intl.DisplayNames", "Symbol"]}, {"path": "./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/this-object-lacks-internal-throws.js", "esid": " sec-Intl.DisplayNames.prototype.resolvedOptions", "description": " >Throws a TypeError if this does not have an [[InitializedDisplayNames]] internal slot.\n", "info": " |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/invalid-tags.js", "esid": " sec-intl.getcanonicallocales", "description": " >Throws a RangeError if the language tag is invalid.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n...\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\niv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/locales-valid.js", "esid": " sec-Intl.ListFormat", "description": " Checks various cases for the locales argument to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/es-es-long.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/es-es-short.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-invalid.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format().\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorclose.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() and check the IteratorClose\ncalls return.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-long.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-short.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-invalid.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts().\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorclose.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() and check the IteratorClose\ncalls return.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/type.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Checks the properties of the result of Intl.ListFormat.prototype.resolvedOptions().", "info": " |Intl.ListFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n5. For each row of Table 1, except the header row, do\nd. Perform ! CreateDataPropertyOrThrow(options, p, v).\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/Locale/constructor-tag.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n13. Return CanonicalizeLanguageTag(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-numberingSystem-order.js", "esid": " sec-initializenumberformat", "description": " >Checks the order of getting \"numberingSystem\" option in the\nNumberFormat is between \"localeMatcher\" and \"style\" options.\n", "info": " |InitializeNumberFormat ( _numberFormat_, _locales_, _options_ )\n\n5. Let _matcher_ be ? GetOption(_options_, `\"localeMatcher\"`, `\"string\"`, &laquo; `\"lookup\"`, `\"best fit\"` &raquo;, `\"best fit\"`).\n...\n7. Let _numberingSystem_ be ? GetOption(_options_, `\"numberingSystem\"`, `\"string\"`, *undefined*, *undefined*).\n...\n17. Let _style_ be ? GetOption(_options_, `\"style\"`, `\"string\"`, &laquo; `\"decimal\"`, `\"percent\"`, `\"currency\"` &raquo;, `\"decimal\"`).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-options-numberingSystem-invalid.js", "esid": " sec-initializenumberformat", "description": " >Checks error cases for the options argument to the NumberFormat constructor.\n", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n...\n8. If numberingSystem is not undefined, then\na. If numberingSystem does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-options-throwing-getters.js", "esid": " sec-initializenumberformat", "description": " Checks the propagation of exceptions from the options for the NumberFormat constructor."}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/numbering-systems.js", "esid": " table-numbering-system-digits", "description": " >Tests that Intl.NumberFormat.prototype.format supports all\nnumbering systems with simple digit mappings.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-rounding.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/units.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of units.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/order.js", "esid": " sec-intl.numberformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"], "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/locales-valid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks various cases for the locales argument to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n3. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numberingSystem-valid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks valid cases for the options argument to the RelativeTimeFormat constructor.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-order.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks the order of operations on the options argument to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n14. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", \u00ab\"always\", \"auto\"\u00bb, \"always\").\n", "includes": ["compareArray.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-auto.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-numeric-auto.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/type.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Checks the properties of the result of Intl.RelativeTimeFormat.prototype.resolvedOptions().", "info": " |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n5. For each row of Table 1, except the header row, do\nd. Perform ! CreateDataPropertyOrThrow(options, p, v).\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/language-tags-invalid.js", "version": 5, "esid": " 6.2.2_c", "description": " >Tests that language tags with invalid subtag sequences are not\naccepted.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-a-following-parameter-is-named-arguments-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-a-following-parameter-is-named-arguments-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-a-preceding-parameter-is-named-arguments-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-a-preceding-parameter-is-named-arguments-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-func-decl-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-lex-bind-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-var-bind-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-no-pre-existing-arguments-bindings-are-present-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-no-pre-existing-arguments-bindings-are-present-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/expressions/arrow-function/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (arrow function expression in sloppy code)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/scope-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/arrow-function/scope-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/arrow-function/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/arrow-function/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/async-generator/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (async generator function expression in sloppy code)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated", "noStrict"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/named-eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (async generator named function expression in sloppy code)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated", "noStrict"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-field-after-optional-chain.js", "description": " OptionalChain.PrivateIdentifier is a valid syntax (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "optional-chaining", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nOptionalChain[Yield, Await] :\n`?.` `[` Expression[+In, ?Yield, ?Await] `]`\n`?.` IdentifierName\n`?.` Arguments[?Yield, ?Await]\n`?.` TemplateLiteral[?Yield, ?Await, +Tagged]\nOptionalChain[?Yield, ?Await]`[` Expression[+In, ?Yield, ?Await] `]`\nOptionalChain[?Yield, ?Await] `.` IdentifierName\nOptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\nOptionalChain[?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\nOptionalChain[?Yield, ?Await] `.` PrivateIdentifier\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/private-field-on-nested-class.js", "description": " PrivateName CallExpression usage (private field) (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/coalesce/abrupt-is-a-short-circuit.js", "description": " >Abrupt completions are also a Short circuit and prevent evaluation of the right-side expressions\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-if-parenthesis-covered-logical-and.js", "description": " >CoalesceExpression is chainable with the LogicalANDExpression is any is covered.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-if-parenthesis-covered-logical-or.js", "description": " >CoalesceExpression is chainable with the LogicalORExpression is any is covered.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-with-bitwise-and.js", "description": " >CoalesceExpression is chainable with the BitwiseANDExpression\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-with-bitwise-or.js", "description": " >CoalesceExpression is chainable with the BitwiseORExpression\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-with-bitwise-xor.js", "description": " >CoalesceExpression is chainable with the BitwiseXORExpression\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable.js", "description": " >If the CoalesceExpressionHead is undefined or null, follow return the right-side value.\nOtherwise, return the left-side value.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/follows-null.js", "description": " >If the CoalesceExpressionHead is null, follow return the right-side eval.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/follows-undefined.js", "description": " >If the CoalesceExpressionHead is undefined, follow return the right-side eval.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-0.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (0)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-42.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (42)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-empty-string.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (the empty string)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-false.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (false)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-object.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (object)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-string.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (string)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-symbol.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (Symbol)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-true.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (true)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-prevents-evaluation.js", "description": " >Short circuit can prevent evaluation of the right-side expressions\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/conditional/coalesce-expr-ternary.js", "description": " >ShortCircuitExpression in the Conditional Expression (? :)\n", "esid": " sec-conditional-operator", "info": " |ShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/function/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (function expression in sloppy code)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters"], "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/function/scope-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/function/scope-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/function/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/function/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/generators/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (generator function expression in sloppy code)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/scope-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/literal-property-name-bigint.js", "description": " >BigInt in LiteralPropertyName must be valid and the property name must be\nthe string representation of the numeric value.\n", "esid": " prod-PropertyName", "info": " |PropertyName[Yield, Await]:\nLiteralPropertyName\nComputedPropertyName[?Yield, ?Await]\n\nLiteralPropertyName:\nIdentifierName\nStringLiteral\nNumericLiteral\n\nNumericLiteral:\nDecimalLiteral\nDecimalBigIntegerLiteral\n\nLiteralPropertyName: NumericLiteral\n1. Let _nbr_ be the NumericValue of |NumericLiteral|.\n1. Return ! ToString(_nbr_).\n", "features": ["BigInt", "class", "destructuring-binding", "let"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/async-gen-meth-eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (async generator method in sloppy code)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated", "noStrict"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (generator method in sloppy code)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["default-parameters", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (method in sloppy code)", "esid": " sec-runtime-semantics-definemethod", "features": ["default-parameters"], "flags": ["generated", "noStrict"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/call-expression.js", "esid": " prod-OptionalExpression", "description": " >optional chain on call expression\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression:\nCallExpression OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-do.js", "esid": " prod-OptionalExpression", "description": " >optional chain in test portion of do while statement\n", "info": " |IterationStatement\ndo Statement while (OptionalExpression)\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-for-await-of.js", "esid": " prod-OptionalExpression", "description": " >optional chain RHS of for await statement\n", "info": " |IterationStatement\nfor await (LeftHandSideExpression of AssignmentExpression) Statement\n", "features": ["optional-chaining"], "flags": ["async"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-for-in.js", "esid": " prod-OptionalExpression", "description": " >optional chain in test portion of do while statement\n", "info": " |IterationStatement\nfor (LeftHandSideExpression in Expression) Statement\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-for-of-type-error.js", "esid": " prod-OptionalExpression", "description": " >optional chain returning undefined in RHS of for of statement\n", "info": " |IterationStatement\nfor (LeftHandSideExpression of Expression) Statement\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-for.js", "esid": " prod-OptionalExpression", "description": " >optional chain in init/test/update of for statement\n", "info": " |IterationStatement\nfor (Expression; Expression; Expression) Statement\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-while.js", "esid": " prod-OptionalExpression", "description": " >optional chain in test portion of while statement\n", "info": " |IterationStatement\nwhile (Expression) Statement\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/member-expression-async-literal.js", "esid": " prod-OptionalExpression", "description": " >optional chain on member expression in async context\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression:\nMemberExpression [PrimaryExpression literal] OptionalChain\n", "features": ["optional-chaining"], "flags": ["async"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/member-expression-async-this.js", "esid": " prod-OptionalExpression", "description": " >optional chain on member expression in async context\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression:\nMemberExpression [PrimaryExpression this] OptionalChain\n", "features": ["optional-chaining"], "flags": ["async"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/member-expression.js", "esid": " prod-OptionalExpression", "description": " >optional chain on member expression\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression:\nMemberExpression OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/new-target-optional-call.js", "esid": " prod-OptionalExpression", "description": " >optional call invoked on new.target should be equivalent to call\n", "info": " |OptionalExpression\nMemberExpression OptionalChain\nNewTarget OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-call-preserves-this.js", "esid": " sec-optional-chaining-chain-evaluation", "description": " >optional call must preserve this context, as with a non-optional call\n", "info": " |OptionalChain : ?. Arguments\n1. Let thisChain be this OptionalChain.\n2. Let tailCall be IsInTailPosition(thisChain).\n3. Return ? EvaluateCall(baseValue, baseReference, Arguments, tailCall).\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-async-optional-chain-square-brackets.js", "esid": " prod-OptionalExpression", "description": " >optional chain expansions in an async context\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression\nMemberExpression [PrimaryExpression Identifier] OptionalChain\nOptionalChain OptionalChain ?.[Expression]\n", "features": ["optional-chaining"], "flags": ["async"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-async-square-brackets.js", "esid": " prod-OptionalExpression", "description": " >optional chain expansions in an async context\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression\nMemberExpression [PrimaryExpression Identifier] OptionalChain\nOptionalChain ?.[Expression]\n", "features": ["optional-chaining"], "flags": ["async"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-expression-optional-expression.js", "esid": " prod-OptionalExpression", "description": " >optional chain bracket notation containing optional expresion\n", "info": " |OptionalChain:\n?. [OptionalExpression]\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-prod-arguments.js", "esid": " prod-OptionalExpression", "description": " >Productions for ?. Arguments\n", "info": " |OptionalChain[Yield, Await]:\n?. Arguments\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-prod-expression.js", "esid": " prod-OptionalExpression", "description": " >Productions for ?. [Expression]\n", "info": " |OptionalChain:\n?.[ Expression ]\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-prod-identifiername.js", "esid": " prod-OptionalExpression", "description": " >Productions for ?. IdentifierName\n", "info": " |OptionalChain[Yield, Await]:\n?. IdentifierName\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain.js", "esid": " prod-OptionalExpression", "description": " >various optional chain expansions\n", "info": " |OptionalChain[Yield, Await]:\n?.[Expression]\n?.IdentifierName\n?.Arguments\n?.TemplateLiteral\nOptionalChain [Expression]\nOptionalChain .IdentifierName\nOptionalChain Arguments[?Yield, ?Await]\nOptionalChain TemplateLiteral\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-expression.js", "esid": " prod-OptionalExpression", "description": " >optional chain on recursive optional expression\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression:\nOptionalExpression OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/runtime-semantics-evaluation.js", "esid": " prod-OptionalExpression", "description": " >accessing optional value on undefined or null returns undefined.\n", "info": " |If baseValue is undefined or null, then\nReturn undefined.\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/short-circuiting.js", "esid": " prod-OptionalExpression", "description": " >demonstrate syntax-based short-circuiting.\n", "info": " |If the expression on the LHS of ?. evaluates to null/undefined, the RHS is\nnot evaluated\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/super-property-optional-call.js", "esid": " prod-OptionalExpression", "description": " >optional call invoked on super method should be equivalent to call\n", "info": " |OptionalExpression\nMemberExpression OptionalChain\nSuperProperty OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/function-code/eval-param-env-with-computed-key.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/function-code/eval-param-env-with-prop-initializer.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/identifiers/part-unicode-13.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v13.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-13.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v13.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-13.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v13.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-13.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v13.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/statements/async-generator/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (async generator function declaration in sloppy code)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["default-parameters", "async-iteration"], "flags": ["generated", "noStrict"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-after-optional-chain.js", "description": " OptionalChain.PrivateIdentifier is a valid syntax (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "optional-chaining", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nOptionalChain[Yield, Await] :\n`?.` `[` Expression[+In, ?Yield, ?Await] `]`\n`?.` IdentifierName\n`?.` Arguments[?Yield, ?Await]\n`?.` TemplateLiteral[?Yield, ?Await, +Tagged]\nOptionalChain[?Yield, ?Await]`[` Expression[+In, ?Yield, ?Await] `]`\nOptionalChain[?Yield, ?Await] `.` IdentifierName\nOptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\nOptionalChain[?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\nOptionalChain[?Yield, ?Await] `.` PrivateIdentifier\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/private-field-is-visible-in-computed-properties.js", "description": " PrivateName of a class is visible in its ComputetProperty scope", "esid": " prod-ClassTail", "info": " |ClassTail : ClassHeritage { ClassBody }\n1. Let lex be the LexicalEnvironment of the running execution context.\n2. Let classScope be NewDeclarativeEnvironment(lex).\n3. Let classScopeEnvRec be classScope's EnvironmentRecord.\n...\n8. If ClassBodyopt is present, then\na. For each element dn of the PrivateBoundIdentifiers of ClassBodyopt,\ni. Perform classPrivateEnvRec.CreateImmutableBinding(dn, true).\nii. Let privateName be NewPrivateName(dn).\niii. Perform ! classPrivateEnvRec.InitializeBinding(dn, dn).\n...\n15. Set the running execution context's LexicalEnvironment to classScope.\n16. Set the running execution context's PrivateEnvironment to classPrivateEnvironment.\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of e is false, then\ni. Let field be the result of ClassElementEvaluation for e with arguments proto and false.\n...\n\nGetValue ( V )\n...\n5. If IsPropertyReference(V), then\n...\nb. If IsPrivateReference(V), then\ni. Return ? PrivateFieldGet(GetReferencedName(V), base).\n\nPrivateFieldGet ( P, O )\n...\n4. If entry is empty, throw a TypeError exception.\n...\n\n", "features": ["class-fields-private", "class-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/private-field-on-nested-class.js", "description": " PrivateName CallExpression usage (private field) (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-private", "class-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nCallExpression[Yield, Await]:\nCoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]\nSuperCall[?Yield, ?Await]\nCallExpression[?Yield, ?Await]Arguments[?Yield, ?Await]\nCallExpression[?Yield, ?Await][Expression[+In, ?Yield, ?Await]]\nCallExpression[?Yield, ?Await].IdentifierName\nCallExpression[?Yield, ?Await]TemplateLiteral[?Yield, ?Await]\nCallExpression[?Yield, ?Await].PrivateName\n\n"}, {"path": "./test262-main/test/language/statements/function/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (function declaration in sloppy code)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["default-parameters"], "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/statements/function/scope-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/statements/function/scope-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/statements/function/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/statements/function/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/statements/generators/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (generator function declaration in sloppy code)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["default-parameters", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/statements/generators/scope-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/scope-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}]