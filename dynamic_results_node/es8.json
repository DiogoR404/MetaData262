[{"path": "./test262-main/test/built-ins/Array/length/define-own-prop-length-coercion-order-set.js", "author": " Andr\u00e9 Bargull", "esid": " sec-arraysetlength", "description": " >[[Value]] is coerced to number before current descriptor's [[Writable]] check.\n", "info": " |ArraySetLength ( A, Desc )\n\n[...]\n3. Let newLen be ? ToUint32(Desc.[[Value]]).\n4. Let numberLen be ? ToNumber(Desc.[[Value]]).\n[...]\n7. Let oldLenDesc be OrdinaryGetOwnProperty(A, \"length\").\n[...]\n12. If oldLenDesc.[[Writable]] is false, return false.\n", "features": ["Symbol", "Symbol.toPrimitive", "Reflect", "Reflect.set"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/Symbol.iterator/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Array.prototype[Symbol.iterator] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.iterator", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Array/prototype/indexOf/calls-only-has-on-prototype-after-length-zeroed.js", "esid": " sec-array.prototype.indexof", "description": " >Calls [[HasProperty]] on the prototype to check for existing elements.\n", "info": " |22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step produces the value 0.)\n...\n8. Repeat, while k < len\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\n...\n", "includes": ["proxyTrapsHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/clamps-to-integer-limit.js", "esid": " sec-array.prototype.pop", "description": " >Length values exceeding 2^53-1 are clamped to 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. Else len > 0,\na. Let newLen be len-1.\n...\ne. Perform ? Set(O, \"length\", newLen, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/length-near-integer-limit.js", "esid": " sec-array.prototype.pop", "description": " >A value is removed from an array-like object whose length property is near the integer limit.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. Else len > 0,\na. Let newLen be len-1.\nb. Let index be ! ToString(newLen).\nc. Let element be ? Get(O, index).\nd. Perform ? DeletePropertyOrThrow(O, index).\ne. Perform ? Set(O, \"length\", newLen, true).\nf. Return element. \n"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/clamps-to-integer-limit.js", "esid": " sec-array.prototype.push", "description": " >Length values exceeding 2^53-1 are clamped to 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the arguments\nthat were passed to this function invocation.\n4. Let argCount be the number of elements in items.\n...\n7. Perform ? Set(O, \"length\", len, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/length-near-integer-limit.js", "esid": " sec-array.prototype.push", "description": " >A value is inserted in an array-like object whose length property is near the integer limit.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the\narguments that were passed to this function invocation.\n...\n5. Repeat, while items is not empty\n...\n7. Perform ? Set(O, \"length\", len, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/throws-if-integer-limit-exceeded.js", "esid": " sec-array.prototype.push", "description": " >A TypeError is thrown if the new length exceeds 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the arguments\nthat were passed to this function invocation.\n4. Let argCount be the number of elements in items.\n5. If len + argCount > 2^53-1, throw a TypeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/reverse/length-exceeding-integer-limit-with-object.js", "esid": " sec-array.prototype.reverse", "description": " >Ensure reverse() implementation correctly handles length exceeding 2^53-1 with plain objects.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit-proxied-array.js", "esid": " sec-array.prototype.slice", "description": " >Length property is clamped to 2^53-1, test with indices near 2^53-1 and negative indices\nand a proxy to an array.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0);\nelse let k be min(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0);\nelse let final be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit.js", "esid": " sec-array.prototype.slice", "description": " >Length property is clamped to 2^53-1, test with indices near 2^53-1 and negative indices.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0);\nelse let k be min(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0);\nelse let final be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/clamps-length-to-integer-limit.js", "esid": " sec-array.prototype.splice", "description": " >Length values exceeding 2^53-1 are clamped to 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n5. If the number of actual arguments is 0, then\na. Let insertCount be 0.\nb. Let actualDeleteCount be 0.\n...\n19. Perform ? Set(O, \"length\", len - actualDeleteCount + itemCount, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/create-species-neg-zero.js", "esid": " sec-array.prototype.splice", "description": " The value `-0` is converted to `0`", "info": " |[...]\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let actualStart be max((len + relativeStart), 0);\nelse let actualStart be min(relativeStart, len).\n5. If the number of actual arguments is 0, then\n[...]\n6. Else if the number of actual arguments is 1, then\n[...]\n7. Else,\na. Let insertCount be the number of actual arguments minus 2.\nb. Let dc be ? ToInteger(deleteCount).\nc. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\n[...]\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n2. If length is -0, let length be +0.\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n[...]\n10. Return ? Construct(C, \u00ab length \u00bb).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/length-and-deleteCount-exceeding-integer-limit.js", "esid": " sec-array.prototype.splice", "description": " >Length and deleteCount are both clamped to 2^53-1 when they exceed the integer limit.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n7. Else,\na. Let insertCount be the number of actual arguments minus 2.\nb. Let dc be ? ToInteger(deleteCount).\nc. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\n...\n11. Repeat, while k < actualDeleteCount\na. Let from be ! ToString(actualStart+k).\nb. Let fromPresent be ? HasProperty(O, from).\nc. If fromPresent is true, then\ni. Let fromValue be ? Get(O, from).\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\nd. Increment k by 1.\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/length-exceeding-integer-limit-shrink-array.js", "esid": " sec-array.prototype.splice", "description": " >An element is removed from an array-like object whose length exceeds the integer limit.\n", "info": " |...\n15. If itemCount < actualDeleteCount, then\na. Let k be actualStart.\nb. Repeat, while k < (len - actualDeleteCount)\ni. Let from be ! ToString(k+actualDeleteCount).\nii. Let to be ! ToString(k+itemCount).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Increase k by 1.\nc. Let k be len.\nd. Repeat, while k > (len - actualDeleteCount + itemCount)\ni. Perform ? DeletePropertyOrThrow(O, ! ToString(k-1)).\nii. Decrease k by 1.\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/length-near-integer-limit-grow-array.js", "esid": " sec-array.prototype.splice", "description": " >A value is inserted in an array-like object whose length property is near the integer limit.\n", "info": " |...\n16. Else if itemCount > actualDeleteCount, then\na. Let k be (len - actualDeleteCount).\nb. Repeat, while k > actualStart\ni. Let from be ! ToString(k + actualDeleteCount - 1).\nii. Let to be ! ToString(k + itemCount - 1).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Decrease k by 1.\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/unshift/clamps-to-integer-limit.js", "esid": " sec-array.prototype.unshift", "description": " >Length values exceeding 2^53-1 are clamped to 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let argCount be the number of actual arguments.\n4. If argCount > 0, then ...\n5. Perform ? Set(O, \"length\", len+argCount, true).\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/unshift/length-near-integer-limit.js", "esid": " sec-array.prototype.unshift", "description": " >Test properties are correctly accessed when length property is near 2^53-1.\n", "info": " |2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let argCount be the number of actual arguments.\n4. If argCount > 0, then\n...\nb. Let k be len.\nc. Repeat, while k > 0,\ni. Let from be ! ToString(k-1).\nii. Let to be ! ToString(k+argCount-1).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Decrease k by 1.\n"}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/byteLength/this-is-sharedarraybuffer.js", "esid": " sec-get-arraybuffer.prototype.bytelength", "description": " Throws a TypeError exception when `this` is a SharedArrayBuffer", "features": ["align-detached-buffer-semantics-with-web-reality", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/slice/this-is-sharedarraybuffer.js", "esid": " sec-arraybuffer.prototype.slice", "description": " >Throws a TypeError if `this` is a SharedArrayBuffer\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunction-construct.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-constructor", "description": " >%AsyncFunction% creates functions with or without new and handles arguments\nsimilarly to functions.\n"}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunction-is-extensible.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >%AsyncFunction% is extensible\n"}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunction-is-subclass.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-constructor", "description": " >%AsyncFunction% is a subclass of Function\n"}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunction-length.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-constructor-length", "description": " >%AsyncFunction% has a length of 1 with writable false, enumerable false, configurable true.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunction-name.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-constructor-properties", "description": " >%AsyncFunction% has a name of \"AsyncFunction\".\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunction-prototype.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-constructor-prototype", "description": " AsyncFunction has a prototype property with writable false, enumerable false, configurable false.", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunction.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-objects", "description": " >%AsyncFunction% exists and is a function\n"}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunctionPrototype-is-extensible.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-sync-function-prototype-properties", "description": " >%AsyncFunctionPrototype% has a [[Extensible]] of true\n"}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunctionPrototype-is-not-callable.js", "esid": " sec-async-function-prototype-properties", "description": " >%AsyncFunction.prototype% is an ordinary non-callable object.\n", "info": " |Properties of the AsyncFunction Prototype Object\n\nThe AsyncFunction prototype object:\n\n[...]\n* is an ordinary object.\n* is not a function object and does not have an [[ECMAScriptCode]] internal slot\nor any other of the internal slots listed in Table 28.\n", "features": ["async-functions"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunctionPrototype-prototype.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-sync-function-prototype-properties", "description": " AsyncFunction.prototype has a [[prototype]] of Function.prototype"}, {"path": "./test262-main/test/built-ins/AsyncFunction/AsyncFunctionPrototype-to-string.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-prototype-properties-toStringTag", "description": " >%AsyncFunctionPrototype% has a Symbol.toStringTag property of \"AsyncFunction\"\n", "includes": ["propertyHelper.js"], "features": ["Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/instance-construct-throws.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-instances", "description": " >Async function instances are not constructors and do not have a\n[[Construct]] slot.\n", "info": " |25.5.1.1 AsyncFunction( p1, p2, \u2026 , pn, body )\n\n...\n3. Return CreateDynamicFunction(C, NewTarget, \"async\", args).\n\n19.2.1.1.1 Runtime Semantics: CreateDynamicFunction( constructor, newTarget, kind, args )\n\n...\n33. Perform FunctionInitialize(F, Normal, parameters, body, scope).\n34. If kind is \"generator\", then\n...\n35. Else if kind is \"normal\", perform MakeConstructor(F).\n36. NOTE: Async functions are not constructable and do not have a [[Construct]] internal method\nor a\"prototype\" property.\n...\n"}, {"path": "./test262-main/test/built-ins/AsyncFunction/instance-has-name.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-instances-name", "description": " Async function declarations have a name property", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/instance-length.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-instances-length", "description": " >Async functions have a length property that is the number of expected\narguments.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/instance-prototype-property.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-async-function-instances", "description": " >Async function instances do not have a prototype property.\n"}, {"path": "./test262-main/test/built-ins/Atomics/Symbol.toStringTag.js", "esid": " sec-atomics-@@tostringtag", "description": " >`Symbol.toStringTag` property descriptor on Atomics\n", "info": " |The initial value of the @@toStringTag property is the String value\n\"Atomics\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics", "Symbol", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Atomics/add/bad-range.js", "esid": " sec-atomics.add", "description": " >Test range checking of Atomics.add on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/descriptor.js", "esid": " sec-atomics.add", "description": " Testing descriptor property of Atomics.add", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/add/expected-return-value.js", "esid": " sec-atomics.add", "description": " >Atomics.add returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.add( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/good-views.js", "esid": " sec-atomics.add", "description": " Test Atomics.add on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/length.js", "esid": " sec-atomics.add", "description": " >Atomics.add.length is 3.\n", "info": " |Atomics.add ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/add/name.js", "esid": " sec-atomics.add", "description": " >Atomics.add.name is \"add\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/add/non-shared-int-views-throws.js", "esid": " sec-atomics.add", "description": " >Atomics.add throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/non-views.js", "esid": " sec-atomics.add", "description": " >Test Atomics.add on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.add does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/add/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.add", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.2 Atomics.add ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/add/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.add", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.2 Atomics.add ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/bad-range.js", "esid": " sec-atomics.and", "description": " >Test range checking of Atomics.and on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/descriptor.js", "esid": " sec-atomics.and", "description": " Testing descriptor property of Atomics.and", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/expected-return-value.js", "esid": " sec-atomics.and", "description": " >Atomics.and returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.and( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/good-views.js", "esid": " sec-atomics.and", "description": " Test Atomics.and on arrays that allow atomic operations", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/length.js", "esid": " sec-atomics.and", "description": " >Atomics.and.length is 3.\n", "info": " |Atomics.and ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/name.js", "esid": " sec-atomics.and", "description": " >Atomics.and.name is \"and\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/non-shared-int-views-throws.js", "esid": " sec-atomics.and", "description": " >Atomics.and throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/non-views.js", "esid": " sec-atomics.and", "description": " >Test Atomics.and on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.and does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/and/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.add", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.3 Atomics.and ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.add", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.3 Atomics.and ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/bad-range.js", "esid": " sec-atomics.compareexchange", "description": " >Test range checking of Atomics.compareExchange on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/descriptor.js", "esid": " sec-atomics.compareexchange", "description": " Testing descriptor property of Atomics.compareExchange", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/expected-return-value.js", "esid": " sec-atomics.compareExchange", "description": " >Atomics.compareExchange returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.compareExchange( typedArray, index, expectedValue, replacementValue )\n\n...\n12. Let compareExchange denote a semantic function of two List of\nbyte values arguments that returns the second argument if the\nfirst argument is element-wise equal to expectedBytes.\n13. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, replacement, compareExchange).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/good-views.js", "esid": " sec-atomics.compareexchange", "description": " Test Atomics.compareExchange on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/length.js", "esid": " sec-atomics.compareexchange", "description": " >Atomics.compareExchange.length is 4.\n", "info": " |Atomics.compareExchange ( ia, index, expect, replace )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/name.js", "esid": " sec-atomics.compareexchange", "description": " >Atomics.compareExchange.name is \"compareExchange\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/non-shared-int-views-throws.js", "esid": " sec-atomics.compareExchange", "description": " >Atomics.compareExchange throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/non-views.js", "esid": " sec-atomics.compareexchange", "description": " >Test Atomics.compareExchange on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.compareExchange does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/validate-arraytype-before-expectedValue-coercion.js", "esid": " sec-atomics.compareExchange", "description": " >TypedArray type is validated before `expectedValue` argument is coerced.\n", "info": " |24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.compareExchange", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/validate-arraytype-before-replacementValue-coercion.js", "esid": " sec-atomics.compareExchange", "description": " >TypedArray type is validated before `replacementValue` argument is coerced.\n", "info": " |24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/bad-range.js", "esid": " sec-atomics.exchange", "description": " >Test range checking of Atomics.exchange on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/descriptor.js", "esid": " sec-atomics.exchange", "description": " Testing descriptor property of Atomics.exchange", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/expected-return-value.js", "esid": " sec-atomics.exchange", "description": " >Atomics.and returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.exchange( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/good-views.js", "esid": " sec-atomics.exchange", "description": " Test Atomics.exchange on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/length.js", "esid": " sec-atomics.exchange", "description": " >Atomics.exchange.length is 3.\n", "info": " |Atomics.exchange ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/name.js", "esid": " sec-atomics.exchange", "description": " >Atomics.exchange.name is \"exchange\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/non-shared-int-views-throws.js", "esid": " sec-atomics.add", "description": " >Atomics.add throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/non-views.js", "esid": " sec-atomics.exchange", "description": " >Test Atomics.exchange on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/nonshared-int-views.js", "esid": " sec-atomics.exchange", "description": " >Atomics.exchange throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.exchange does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.exchange", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.5 Atomics.exchange ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.exchange", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.5 Atomics.exchange ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/corner-cases.js", "esid": " sec-atomics.islockfree", "description": " >Test isLockFree on various non-intuitive arguments\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/descriptor.js", "esid": " sec-atomics.islockfree", "description": " Testing descriptor property of Atomics.add", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/expected-return-value.js", "esid": " sec-atomics.islockfree", "description": " >Atomics.isLockFree( size )\nLet n be ? ToInteger(size).\nLet AR be the Agent Record of the surrounding agent.\nIf n equals 1, return AR.[[IsLockFree1]].\nIf n equals 2, return AR.[[IsLockFree2]].\nIf n equals 4, return true.\nIf n equals 8, return AR.[[IsLockFree8]].\nReturn false.\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/length.js", "esid": " sec-atomics.islockfree", "description": " >Atomics.isLockFree.length is 1.\n", "info": " |Atomics.isLockFree ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/name.js", "esid": " sec-atomics.islockfree", "description": " >Atomics.isLockFree.name is \"isLockFree\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.isLockFree does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/load/bad-range.js", "esid": " sec-atomics.load", "description": " >Test range checking of Atomics.load on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/descriptor.js", "esid": " sec-atomics.load", "description": " Testing descriptor property of Atomics.load", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/load/expected-return-value.js", "esid": " sec-atomics.load", "description": " >Atomics.load returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.load( typedArray, index, value )\n\n1. Return ? AtomicLoad(typedArray, index).\n\nAtomicLoad( typedArray, index )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n3. Let arrayTypeName be typedArray.[[TypedArrayName]].\n4. Let elementSize be the Number value of the Element Size value\nspecified in Table 56 for arrayTypeName.\n5. Let elementType be the String value of the Element Type value\nin Table 56 for arrayTypeName.\n6. Let offset be typedArray.[[ByteOffset]].\n7. Let indexedPosition be (i \u00d7 elementSize) + offset.\n8. Return GetValueFromBuffer(buffer, indexedPosition, elementType,\ntrue, \"SeqCst\").\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/good-views.js", "esid": " sec-atomics.load", "description": " Test Atomics.load on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/length.js", "esid": " sec-atomics.load", "description": " >Atomics.load.length is 2.\n", "info": " |Atomics.load ( ia, index )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/load/name.js", "esid": " sec-atomics.load", "description": " >Atomics.load.name is \"load\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/load/non-shared-int-views-throws.js", "esid": " sec-atomics.load", "description": " >Atomics.load throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/non-views.js", "esid": " sec-atomics.load", "description": " >Test Atomics.load on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.load does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/load/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.store", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.7 Atomics.load ( typedArray, index )\n1. Return ? AtomicLoad(typedArray, index).\n\n24.4.1.12 AtomicLoad ( typedArray, index )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/count-symbol-throws.js", "esid": " sec-atomics.notify", "description": " >Return abrupt when symbol passed for 'count' argument to Atomics.notify\n", "info": " |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +\u221e.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/non-int32-typedarray-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a TypeError if typedArray arg is not an Int32Array\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n5.If onlyInt32 is true, then\nIf typeName is not \"Int32Array\", throw a TypeError exception.\n", "features": ["Atomics", "Float32Array", "Float64Array", "Int8Array", "TypedArray", "Uint16Array", "Uint8Array", "Uint8ClampedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/non-shared-bufferdata-non-shared-int-views-throws.js", "esid": " sec-atomics.notify", "description": " >Atomics.notify throws on non-shared integer TypedArrays\n", "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/non-shared-int-views.js", "esid": " sec-atomics.notify", "description": " >Test Atomics.notify on non-shared integer TypedArrays\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/non-views.js", "esid": " sec-atomics.notify", "description": " >Test Atomics.notify on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.notify does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/not-a-typedarray-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a TypeError if the typedArray arg is not a TypedArray object\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n3.If typedArray does not have a [[TypedArrayName]] internal slot, throw a TypeError exception.\n\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/not-an-object-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a TypeError if typedArray arg is not an Object\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n2. if Type(typedArray) is not Object, throw a TypeError exception\n", "features": ["Atomics", "Symbol"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/validate-arraytype-before-count-coercion.js", "esid": " sec-atomics.notify", "description": " >TypedArray type is validated before `count` argument is coerced.\n", "info": " |24.4.12 Atomics.notify ( typedArray, index, count )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.notify", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.12 Atomics.notify ( typedArray, index, count )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/bad-range.js", "esid": " sec-atomics.or", "description": " >Test range checking of Atomics.or on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/descriptor.js", "esid": " sec-atomics.or", "description": " Testing descriptor property of Atomics.or", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/expected-return-value.js", "esid": " sec-atomics.or", "description": " >Atomics.and returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.or( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/good-views.js", "esid": " sec-atomics.or", "description": " Test Atomics.or on arrays that allow atomic operations", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/length.js", "esid": " sec-atomics.or", "description": " >Atomics.or.length is 3.\n", "info": " |Atomics.or ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/name.js", "esid": " sec-atomics.or", "description": " >Atomics.or.name is \"or\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/non-shared-int-views-throws.js", "esid": " sec-atomics.and", "description": " >Atomics.and throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/non-views.js", "esid": " sec-atomics.or", "description": " >Test Atomics.or on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.or does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/or/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.or", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.8 Atomics.or ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.or", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.8 Atomics.or ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/proto.js", "esid": " sec-atomics-object", "description": " >The prototype of Atomics is Object.prototype\n", "info": " |The Atomics Object\n\nThe value of the [[Prototype]] internal slot of the Atomics object is the\nintrinsic object %ObjectPrototype%.\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/bad-range.js", "esid": " sec-atomics.store", "description": " >Test range checking of Atomics.store on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/descriptor.js", "esid": " sec-atomics.store", "description": " Testing descriptor property of Atomics.store", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/expected-return-value.js", "esid": " sec-atomics.store", "description": " >Atomics.store returns the newly stored value\n", "info": " |Atomics.store( typedArray, index, value )\n\n...\n3. Let v be ? ToInteger(value).\n...\n9. Perform SetValueInBuffer(buffer, indexedPosition,\nelementType, v, true, \"SeqCst\").\n10. Return v.\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/good-views.js", "esid": " sec-atomics.store", "description": " Test Atomics.store on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/length.js", "esid": " sec-atomics.store", "description": " >Atomics.store.length is 3.\n", "info": " |Atomics.store ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/name.js", "esid": " sec-atomics.store", "description": " >Atomics.store.name is \"store\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/non-shared-int-views-throws.js", "esid": " sec-atomics.store", "description": " >Atomics.store throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/non-views.js", "esid": " sec-atomics.store", "description": " >Test Atomics.store on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.store does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/store/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.store", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.9 Atomics.store ( typedArray, index, value )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.store", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.9 Atomics.store ( typedArray, index, value )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/bad-range.js", "esid": " sec-atomics.sub", "description": " >Test range checking of Atomics.sub on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/descriptor.js", "esid": " sec-atomics.sub", "description": " Testing descriptor property of Atomics.sub", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/expected-return-value.js", "esid": " sec-atomics.sub", "description": " >Atomics.and returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.sub( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, subtract).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/good-views.js", "esid": " sec-atomics.sub", "description": " Test Atomics.sub on arrays that allow atomic operations", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/length.js", "esid": " sec-atomics.sub", "description": " >Atomics.sub.length is 3.\n", "info": " |Atomics.sub ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/name.js", "esid": " sec-atomics.sub", "description": " >Atomics.sub.name is \"sub\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/non-shared-int-views-throws.js", "esid": " sec-atomics.sub", "description": " >Atomics.sub throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/non-views.js", "esid": " sec-atomics.sub", "description": " >Test Atomics.sub on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.sub does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.sub", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.10 Atomics.sub ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, sub).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.sub", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.10 Atomics.sub ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, sub).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bad-range.js", "esid": " sec-atomics.wait", "description": " >Test range checking of Atomics.wait on arrays that allow atomic operations\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/descriptor.js", "esid": " sec-atomics.wait", "description": " Testing descriptor property of Atomics.wait", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/false-for-timeout.js", "esid": " sec-atomics.wait", "description": " >False timeout arg should result in an +0 timeout\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nBoolean -> If argument is true, return 1. If argument is false, return +0.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/length.js", "esid": " sec-atomics.wait", "description": " >Atomics.wait.length is 4.\n", "info": " |Atomics.wait ( ia, index, expect, timeout )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/name.js", "esid": " sec-atomics.wait", "description": " >Atomics.wait.name is \"wait\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/negative-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a RangeError is index < 0\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n2.b If integerIndex < 0, throw a RangeError exception\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/negative-timeout.js", "esid": " sec-atomics.wait", "description": " >Test that Atomics.wait times out with a negative timeout\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/non-int32-typedarray-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if typedArray arg is not an Int32Array\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n5.If onlyInt32 is true, then\nIf typeName is not \"Int32Array\", throw a TypeError exception.\n", "features": ["Atomics", "Float32Array", "Float64Array", "Int8Array", "TypedArray", "Uint16Array", "Uint8Array", "Uint8ClampedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/non-shared-bufferdata-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if typedArray.buffer is not a SharedArrayBuffer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\n...\n4.If bufferData is a Data Block, return false.\n", "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/not-a-typedarray-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if the typedArray arg is not a TypedArray object\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n3.If typedArray does not have a [[TypedArrayName]] internal slot, throw a TypeError exception.\n\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/not-an-object-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if typedArray arg is not an Object\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n2. if Type(typedArray) is not Object, throw a TypeError exception\n", "features": ["Atomics", "Symbol"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/null-for-timeout.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nNull -> Return +0.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/object-for-timeout.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nObject -> Apply the following steps:\n\nLet primValue be ? ToPrimitive(argument, hint Number).\nReturn ? ToNumber(primValue).\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/out-of-range-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a RangeError if value of index arg is out of range\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex \u2265 length, throw a RangeError exception.\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/poisoned-object-for-timeout-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nObject -> Apply the following steps:\n\nLet primValue be ? ToPrimitive(argument, hint Number).\nReturn ? ToNumber(primValue).\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/symbol-for-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n\nValidateAtomicAccess( typedArray, requestIndex )\n\n2. Let accessIndex be ? ToIndex(requestIndex).\n\nToIndex ( value )\n\n2. Else,\na. Let integerIndex be ? ToInteger(value).\n\nToInteger(value)\n\n1. Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/symbol-for-timeout-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nSymbol --> Throw a TypeError exception.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/symbol-for-value-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if value arg is a Symbol\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n3. Let v be ? ToInt32(value).\n\nToInt32(value)\n\n1.Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/true-for-timeout.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nBoolean -> If argument is true, return 1. If argument is false, return +0.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.wait", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.11 Atomics.wait ( typedArray, index, value, timeout )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/validate-arraytype-before-timeout-coercion.js", "esid": " sec-atomics.notify", "description": " >TypedArray type is validated before `timeout` argument is coerced.\n", "info": " |24.4.11 Atomics.wait ( typedArray, index, value, timeout )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.notify", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.11 Atomics.wait ( typedArray, index, value, timeout )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/bad-range.js", "esid": " sec-atomics.xor", "description": " >Test range checking of Atomics.xor on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/descriptor.js", "esid": " sec-atomics.xor", "description": " Testing descriptor property of Atomics.xor", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/expected-return-value.js", "esid": " sec-atomics.xor", "description": " >Atomics.xor returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.xor( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/good-views.js", "esid": " sec-atomics.xor", "description": " Test Atomics.xor on arrays that allow atomic operations", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/length.js", "esid": " sec-atomics.xor", "description": " >Atomics.xor.length is 3.\n", "info": " |Atomics.xor ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/name.js", "esid": " sec-atomics.xor", "description": " >Atomics.xor.name is \"xor\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/non-shared-int-views-throws.js", "esid": " sec-atomics.and", "description": " >Atomics.and throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/non-views.js", "esid": " sec-atomics.xor", "description": " >Test Atomics.xor on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.xor does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.xor", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.13 Atomics.xor ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.xor", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.13 Atomics.xor ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/DataView/buffer-does-not-have-arraybuffer-data-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a TypeError if buffer does not have [[ArrayBufferData]]\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n2. If Type(buffer) is not Object, throw a TypeError exception.\n3. If buffer does not have an [[ArrayBufferData]] internal slot, throw a\nTypeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/buffer-reference-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Reuse buffer argument instead of making a new clone\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n14. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/byteoffset-is-negative-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteOffset) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let numberOffset be ? ToNumber(byteOffset).\n5. Let offset be ToInteger(numberOffset).\n6. If numberOffset \u2260 offset or offset < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/custom-proto-access-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from newTarget's custom constructor prototype\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\ninternalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "features": ["Reflect.construct", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/custom-proto-if-not-object-fallbacks-to-default-prototype-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Use DataView.prototype if newTarget's prototype is not an Object\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\ninternalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n...\n", "features": ["Reflect.construct", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/custom-proto-if-object-is-used-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Use newTarget's custom constructor prototype if Object\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\ninternalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n...\n", "features": ["Reflect.construct", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/defined-bytelength-and-byteoffset-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return new instance from defined length and offset\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/defined-byteoffset-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return new instance from defined offset\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/defined-byteoffset-undefined-bytelength-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return new instance from defined byteoffset and undefined bytelength\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. If byteLength is either not present or undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/excessive-bytelength-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws RangeError if offset + viewByteLength > bufferByteLength\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n10. If byteLength is undefined, then\n...\n11. Else,\na. Let viewByteLength be ? ToLength(byteLength).\nb. If offset+viewByteLength > bufferByteLength, throw a RangeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/excessive-byteoffset-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if offset > bufferByteLength\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. Let bufferByteLength be the value of buffer's [[ArrayBufferByteLength]]\ninternal slot.\n9. If offset > bufferByteLength, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/instance-extensibility-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >The new instance is extensible\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\ninternalSlotsList ] )\n\n...\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.12 ObjectCreate (proto [ , internalSlotsList ])\n\n...\n5. Set the [[Extensible]] internal slot of obj to true.\n...\n", "features": ["SharedArrayBuffer"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/negative-bytelength-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteLength) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. If byteLength is either not present or undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n9. Else,\na. Let viewByteLength be ? ToIndex(byteLength).\n...\n\nToIndex ( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/negative-bytelength-throws.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteLength) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. If byteLength is either not present or undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n9. Else,\na. Let viewByteLength be ? ToIndex(byteLength).\n...\n\nToIndex ( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/negative-byteoffset-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteOffset) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let offset be ? ToIndex(byteOffset).\n...\n\nToIndex ( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/newtarget-undefined-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/buffer/return-buffer-sab.js", "esid": " sec-get-dataview.prototype.buffer", "description": " >Return buffer from [[ViewedArrayBuffer]] internal slot\n", "info": " |24.2.4.1 get DataView.prototype.buffer\n\n...\n5. Let buffer be the value of O's [[ViewedArrayBuffer]] internal slot.\n6. Return buffer.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/buffer/this-has-no-dataview-internal-sab.js", "esid": " sec-get-dataview.prototype.buffer", "description": " >Throws a TypeError exception when `this` does not have a [[DataView]] internal\nslot\n", "info": " |24.2.4.1 get DataView.prototype.buffer\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteLength/return-bytelength-sab.js", "esid": " sec-get-dataview.prototype.bytelength", "description": " >Return value from [[ByteLength]] internal slot\n", "info": " |24.2.4.2 get DataView.prototype.byteLength\n\n...\n7. Let size be the value of O's [[ByteLength]] internal slot.\n8. Return size.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteLength/this-has-no-dataview-internal-sab.js", "esid": " sec-get-dataview.prototype.bytelength", "description": " >Throws a TypeError exception when `this` does not have a [[DataView]] internal\nslot\n", "info": " |24.2.4.2 get DataView.prototype.byteLength\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteOffset/return-byteoffset-sab.js", "esid": " sec-get-dataview.prototype.byteoffset", "description": " >Return value from [[ByteOffset]] internal slot\n", "info": " |24.2.4.3 get DataView.prototype.byteOffset\n\n...\n7. Let offset be the value of O's [[ByteOffset]] internal slot.\n8. Return offset.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteOffset/this-has-no-dataview-internal-sab.js", "esid": " sec-get-dataview.prototype.byteoffset", "description": " >Throws a TypeError exception when `this` does not have a [[DataView]] internal\nslot\n", "info": " |24.2.4.3 get DataView.prototype.byteOffset\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat32/toindex-byteoffset.js", "esid": " sec-dataview.prototype.getfloat32", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.5 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat64/toindex-byteoffset.js", "esid": " sec-dataview.prototype.getfloat64", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.6 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float64\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt16/toindex-byteoffset.js", "esid": " sec-dataview.prototype.getint16", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.8 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int16\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/index-is-out-of-range-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Throws a RangeError if getIndex + elementSize > viewSize\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n10. Let viewOffset be the value of view's [[ByteOffset]] internal slot.\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in\nTable 50 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/negative-byteoffset-throws-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Throws a RangeError if getIndex < 0\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-abrupt-from-tonumber-byteoffset-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return abrupt from ToNumber(byteOffset)\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-abrupt-from-tonumber-byteoffset-symbol-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-value-clean-arraybuffer-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return value from Buffer using a clean ArrayBuffer\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-values-custom-offset-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return values from Buffer using a custom offset\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-values-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return values from Buffer\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/this-has-no-dataview-internal-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Throws a TypeError if this does not have a [[DataView]] internal slot\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n2. If view does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/to-boolean-littleendian-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/toindex-byteoffset-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/toindex-byteoffset.js", "esid": " sec-dataview.prototype.getint32", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt8/toindex-byteoffset.js", "esid": " sec-dataview.prototype.getint8", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.7 DataView.prototype.getInt8 ( byteOffset )\n\n1. Let v be the this value.\n2. Return ? GetViewValue(v, byteOffset, true, \"Int8\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint16/toindex-byteoffset.js", "esid": " sec-dataview.prototype.getuint16", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.11 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint16\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint32/toindex-byteoffset.js", "esid": " sec-dataview.prototype.getuint32", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.12 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint8/toindex-byteoffset.js", "esid": " sec-dataview.prototype.getuint8", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.10 DataView.prototype.getUint8 ( byteOffset )\n\n1. Let v be the this value.\n2. Return ? GetViewValue(v, byteOffset, true, \"Uint8\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setfloat32", "description": " >RangeError exception for negative index is thrown before the value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/no-value-arg.js", "esid": " sec-dataview.prototype.setfloat32", "description": " >Set value as undefined (cast to NaN) when value argument is not present\n", "info": " |24.2.4.13 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n8. If type is \"Float32\", then\na. Set rawBytes to a List containing the 4 bytes that are the result of\nconverting value to IEEE 754-2008 binary32 format using \u201cRound to nearest,\nties to even\u201d rounding mode. If isLittleEndian is false, the bytes are\narranged in big endian order. Otherwise, the bytes are arranged in little\nendian order. If value is NaN, rawValue may be set to any implementation\nchosen IEEE 754-2008 binary32 format Not-a-Number encoding. An\nimplementation must always choose the same encoding for each implementation\ndistinguishable NaN value.\n...\n11. Store the individual bytes of rawBytes into block, in order, starting at\nblock[byteIndex].\n12. Return NormalCompletion(undefined).\n", "features": ["DataView.prototype.getFloat32"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setfloat32", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.13 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.getFloat32"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setfloat64", "description": " >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/no-value-arg.js", "esid": " sec-dataview.prototype.setfloat64", "description": " >Set value as undefined (cast to NaN) when value argument is not present\n", "info": " |24.2.4.14 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n9. Else if type is \"Float64\", then\na. Set rawBytes to a List containing the 8 bytes that are the IEEE 754-2008\nbinary64 format encoding of value. If isLittleEndian is false, the bytes are\narranged in big endian order. Otherwise, the bytes are arranged in little\nendian order. If value is NaN, rawValue may be set to any implementation\nchosen IEEE 754-2008 binary64 format Not-a-Number encoding. An\nimplementation must always choose the same encoding for each implementation\ndistinguishable NaN value.\n...\n11. Store the individual bytes of rawBytes into block, in order, starting at\nblock[byteIndex].\n12. Return NormalCompletion(undefined).\n", "features": ["DataView.prototype.getFloat64"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setfloat64", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.14 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.getFloat64"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setint16", "description": " >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/no-value-arg.js", "esid": " sec-dataview.prototype.setint16", "description": " >Set value as undefined (cast to 0) when value argument is not present\n", "info": " |24.2.4.16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n11. Store the individual bytes of rawBytes into block, in order, starting at\nblock[byteIndex].\n12. Return NormalCompletion(undefined).\n", "features": ["DataView.prototype.getInt16"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setint16", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.getInt16"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setint32", "description": " >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/no-value-arg.js", "esid": " sec-dataview.prototype.setint32", "description": " >Set value as undefined (cast to 0) when value argument is not present\n", "info": " |24.2.4.17 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n11. Store the individual bytes of rawBytes into block, in order, starting at\nblock[byteIndex].\n12. Return NormalCompletion(undefined).\n", "features": ["DataView.prototype.getInt32"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setint32", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.17 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.getInt32"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setint8", "description": " >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Int8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/no-value-arg.js", "esid": " sec-dataview.prototype.setint8", "description": " >Set value as undefined (cast to 0) when value argument is not present\n", "info": " |24.2.4.15 DataView.prototype.setInt8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Int8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n11. Store the individual bytes of rawBytes into block, in order, starting at\nblock[byteIndex].\n12. Return NormalCompletion(undefined).\n", "features": ["DataView.prototype.getInt8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setint8", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.15 DataView.prototype.setInt8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Int8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.getInt8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setuint16", "description": " >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/no-value-arg.js", "esid": " sec-dataview.prototype.setuint16", "description": " >Set value as undefined (cast to 0) when value argument is not present\n", "info": " |24.2.4.19 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n11. Store the individual bytes of rawBytes into block, in order, starting at\nblock[byteIndex].\n12. Return NormalCompletion(undefined).\n", "features": ["DataView.prototype.getUint16"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setuint16", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.19 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.getUint16"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setuint32", "description": " >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/no-value-arg.js", "esid": " sec-dataview.prototype.setuint32", "description": " >Set value as undefined (cast to 0) when value argument is not present\n", "info": " |24.2.4.20 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n11. Store the individual bytes of rawBytes into block, in order, starting at\nblock[byteIndex].\n12. Return NormalCompletion(undefined).\n", "features": ["DataView.prototype.getUint32"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setuint32", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.20 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView.prototype.getUint32"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setuint8", "description": " >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Uint8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/no-value-arg.js", "esid": " sec-dataview.prototype.setuint8", "description": " >Set value as undefined (cast to 0) when value argument is not present\n", "info": " |24.2.4.18 DataView.prototype.setUint8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Uint8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n11. Store the individual bytes of rawBytes into block, in order, starting at\nblock[byteIndex].\n12. Return NormalCompletion(undefined).\n", "features": ["Uint8Array"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setuint8", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.18 DataView.prototype.setUint8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Uint8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["Uint8Array"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-bytelength-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToLength(byteLength)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n10. If byteLength is undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n11. Else,\na. Let viewByteLength be ? ToLength(byteLength).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-bytelength-symbol-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToLength(symbol byteLength)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n10. If byteLength is undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n11. Else,\na. Let viewByteLength be ? ToLength(byteLength).\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-byteoffset-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToNumber(byteOffset)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let numberOffset be ? ToNumber(byteOffset).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-byteoffset-symbol-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let numberOffset be ? ToNumber(byteOffset).\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/return-instance-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Returns new instance\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/toindex-bytelength-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >ToIndex conversions on byteLength\n", "info": " |24.2.2.1 DataView ( buffer, byteOffset, byteLength )\n\n...\n8. If byteLength is either not present or undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n9. Else,\na. Let viewByteLength be ? ToIndex(byteLength).\nb. If offset + viewByteLength > bufferByteLength, throw a RangeError\nexception.\n...\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\nc. Let index be ! ToLength(integerIndex).\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\n3. Return index.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/toindex-byteoffset-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.2.1 DataView ( buffer, byteOffset, byteLength )\n\n...\n4. Let offset be ? ToIndex(byteOffset).\n...\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\nc. Let index be ! ToLength(integerIndex).\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\n3. Return index.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Date/UTC/return-value.js", "esid": " sec-date.utc", "description": " Return value of `Date.UTC`", "info": " |1. Let y be ? ToNumber(year).\n2. Let m be ? ToNumber(month).\n3. If date is supplied, let dt be ? ToNumber(date); else let dt be 1.\n4. If hours is supplied, let h be ? ToNumber(hours); else let h be 0.\n5. If minutes is supplied, let min be ? ToNumber(minutes); else let min be 0.\n6. If seconds is supplied, let s be ? ToNumber(seconds); else let s be 0.\n7. If ms is supplied, let milli be ? ToNumber(ms); else let milli be 0.\n8. If y is not NaN and 0 \u2264 ToInteger(y) \u2264 99, let yr be 1900+ToInteger(y);\notherwise, let yr be y.\n9. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).\n"}, {"path": "./test262-main/test/built-ins/Date/prototype/toDateString/format.js", "esid": " sec-date.prototype.todatestring", "description": " Test the format of the date from toDateString", "info": " |Date.prototype.toDateString ( )\n\n5. Return DateString(_t_).\n"}, {"path": "./test262-main/test/built-ins/Date/prototype/toString/format.js", "esid": " sec-date.prototype.tostring", "description": " Test the format of the time from toString", "info": " |Runtime Semantics: ToDateString( _tv_ )\n\n4. Return the String value formed by concatenating DateString(_t_), `\" \"`, TimeString(_t_), and TimeZoneString(_tv_).\n\n"}, {"path": "./test262-main/test/built-ins/Date/prototype/toUTCString/format.js", "esid": " sec-date.prototype.toutcstring", "description": " Test the format of the date from toUTCString", "info": " |Date.prototype.toUTCString ( )\n\n4. Return the String value formed by concatenating DateString(_tv_, `\", \"`), `\" \"`, and TimeString(_tv_).\n"}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-arrow-function.js", "esid": " sec-async-arrow-function-definitions-runtime-semantics-evaluation", "description": " Function.prototype.toString on an async arrow function", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-string-escape-ascii.js", "esid": " sec-quotejsonstring", "description": " >JSON.stringify property names and values containing ASCII\ncharacters that require escaping\n"}, {"path": "./test262-main/test/built-ins/Number/S9.3.1_A2_U180E.js", "esid": " sec-tonumber-applied-to-the-string-type", "description": " >Ensure U+180E is not recognized as whitespace, convert to Number by explicit transformation\n", "info": " |7.1.3.1 ToNumber Applied to the String Type\n\nIf the grammar cannot interpret the String as an expansion of\nStringNumericLiteral, then the result of ToNumber is NaN.\n\nStringNumericLiteral :::\nStrWhiteSpace_opt StrNumericLiteral StrWhiteSpace_opt\nStrWhiteSpace :::\nStrWhiteSpaceChar StrWhiteSpace_opt\nStrWhiteSpaceChar :::\nWhiteSpace\nLineTerminator\nWhiteSpace ::\n<TAB>\n<VT>\n<FF>\n<SP>\n<NBSP>\n<ZWNBSP>\n<USP>\n<USP> ::\nOther category \u201cZs\u201d code points\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/Number/S9.3.1_A3_T1_U180E.js", "esid": " sec-tonumber-applied-to-the-string-type", "description": " >Ensure U+180E is not recognized as whitespace, test ToNumber with static string\n", "info": " |7.1.3.1 ToNumber Applied to the String Type\n\nIf the grammar cannot interpret the String as an expansion of\nStringNumericLiteral, then the result of ToNumber is NaN.\n\nStringNumericLiteral :::\nStrWhiteSpace_opt StrNumericLiteral StrWhiteSpace_opt\nStrWhiteSpace :::\nStrWhiteSpaceChar StrWhiteSpace_opt\nStrWhiteSpaceChar :::\nWhiteSpace\nLineTerminator\nWhiteSpace ::\n<TAB>\n<VT>\n<FF>\n<SP>\n<NBSP>\n<ZWNBSP>\n<USP>\n<USP> ::\nOther category \u201cZs\u201d code points\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/Number/S9.3.1_A3_T2_U180E.js", "esid": " sec-tonumber-applied-to-the-string-type", "description": " >Ensure U+180E is not recognized as whitespace, test ToNumber with dynamic string\n", "info": " |7.1.3.1 ToNumber Applied to the String Type\n\nIf the grammar cannot interpret the String as an expansion of\nStringNumericLiteral, then the result of ToNumber is NaN.\n\nStringNumericLiteral :::\nStrWhiteSpace_opt StrNumericLiteral StrWhiteSpace_opt\nStrWhiteSpace :::\nStrWhiteSpaceChar StrWhiteSpace_opt\nStrWhiteSpaceChar :::\nWhiteSpace\nLineTerminator\nWhiteSpace ::\n<TAB>\n<VT>\n<FF>\n<SP>\n<NBSP>\n<ZWNBSP>\n<USP>\n<USP> ::\nOther category \u201cZs\u201d code points\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toExponential/range.js", "esid": " sec-number.prototype.toexponential", "description": " Number.prototype.toExponential permits fractionDigits from 0 to 100", "info": " |Number.prototype.toExponential ( fractionDigits )\n\n...\n8. If _p_ &lt; 0 or _p_ &gt; 100, throw a *RangeError* exception.\n...\n"}, {"path": "./test262-main/test/built-ins/Number/prototype/toFixed/range.js", "esid": " sec-number.prototype.tofixed", "description": " Number.prototype.toFixed permits fractionDigits from 0 to 100", "info": " |Number.prototype.toFixed ( fractionDigits )\n\n...\n3. If _f_ &lt; 0 or _f_ &gt; 100, throw a *RangeError* exception.\n...\n"}, {"path": "./test262-main/test/built-ins/Number/prototype/toPrecision/range.js", "esid": " sec-number.prototype.toprecision", "description": " Number.prototype.toPrecision permits fractionDigits from 1 to 100", "info": " |Number.prototype.toPrecision ( fractionDigits )\n\n...\n8. If _p_ &lt; 1 or _p_ &gt; 100, throw a *RangeError* exception.\n...\n"}, {"path": "./test262-main/test/built-ins/Object/entries/exception-during-enumeration.js", "esid": " sec-object.entries", "description": " Object.entries should terminate if getting a value throws an exception", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/function-length.js", "esid": " sec-object.entries", "description": " Object.entries should have length 1", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/entries/function-name.js", "esid": " sec-object.entries", "description": " Object.entries should have name property with value 'entries'", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/entries/function-property-descriptor.js", "esid": " sec-object.entries", "description": " Object.entries should be writable, non-enumerable, and configurable", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/entries/getter-adding-key.js", "esid": " sec-object.entries", "description": " Object.entries does not see a new element added by a getter that is hit during iteration", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/getter-making-future-key-nonenumerable.js", "esid": " sec-object.entries", "description": " Object.entries does not see an element made non-enumerable by a getter that is hit during iteration", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/getter-removing-future-key.js", "esid": " sec-object.entries", "description": " Object.entries does not see an element removed by a getter that is hit during iteration", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/inherited-properties-omitted.js", "esid": " sec-object.entries", "description": " Object.entries does not see inherited properties.", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/observable-operations.js", "esid": " sec-object.entries", "description": " Object.entries should perform observable operations in the correct order", "author": " Jordan Harband", "features": ["Proxy"], "includes": ["proxyTrapsHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/entries/order-after-define-property.js", "esid": " sec-object.entries", "description": " >Property names are returned in ascending chronological order of creation\nthat is unaffected by [[DefineOwnProperty]].\n", "info": " |Object.entries ( O )\n\n[...]\n2. Let nameList be ? EnumerableOwnPropertyNames(obj, key+value).\n3. Return CreateArrayFromList(nameList).\n\nEnumerableOwnPropertyNames ( O, kind )\n\n[...]\n2. Let ownKeys be ? O.[[OwnPropertyKeys]]().\n[...]\n\nOrdinaryOwnPropertyKeys ( O )\n\n[...]\n3. For each own property key P of O that is a String but is not an array index,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n[...]\n5. Return keys.\n", "features": ["arrow-function"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/entries/primitive-booleans.js", "esid": " sec-object.entries", "description": " Object.entries accepts boolean primitives.", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/primitive-numbers.js", "esid": " sec-object.entries", "description": " Object.entries accepts number primitives.", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/primitive-strings.js", "esid": " sec-object.entries", "description": " Object.entries accepts string primitives.", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/primitive-symbols.js", "esid": " sec-object.entries", "description": " Object.entries accepts Symbol primitives.", "author": " Jordan Harband", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/entries/return-order.js", "esid": " sec-object.entries", "description": " Object.entries enumeration order", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/entries/symbols-omitted.js", "esid": " sec-object.entries", "description": " Object.entries does not include Symbol keys.", "author": " Jordan Harband", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/entries/tamper-with-global-object.js", "esid": " sec-object.entries", "description": " >Object.entries should not have its behavior impacted by modifications to the global property Object\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/entries/tamper-with-object-keys.js", "esid": " sec-object.entries", "description": " >Object.entries should not have its behavior impacted by modifications to Object.keys\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/function-length.js", "description": " Object.getOwnPropertyDescriptors should have length 1", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/function-name.js", "description": " Object.getOwnPropertyDescriptors should have name property with value 'getOwnPropertyDescriptors'", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/function-property-descriptor.js", "description": " Object.getOwnPropertyDescriptors should be writable, non-enumerable, and configurable", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/inherited-properties-omitted.js", "description": " Object.getOwnPropertyDescriptors does not see inherited properties.", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/normal-object.js", "description": " Object.getOwnPropertyDescriptors should produce a normal object inheriting from Object.prototype", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/observable-operations.js", "description": " Object.getOwnPropertyDescriptors should perform observable operations in the correct order", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband", "features": ["Proxy"], "includes": ["proxyTrapsHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/order-after-define-property.js", "esid": " sec-object.getownpropertydescriptors", "description": " >Property names are returned in ascending chronological order of creation\nthat is unaffected by [[DefineOwnProperty]].\n", "info": " |Object.getOwnPropertyDescriptors ( O )\n\n[...]\n2. Let ownKeys be ? obj.[[OwnPropertyKeys]]().\n3. Let descriptors be ! OrdinaryObjectCreate(%Object.prototype%).\n4. For each element key of ownKeys in List order, do\n[...]\nc. If descriptor is not undefined,\nperform ! CreateDataPropertyOrThrow(descriptors, key, descriptor).\n5. Return descriptors.\n\nOrdinaryOwnPropertyKeys ( O )\n\n[...]\n3. For each own property key P of O that is a String but is not an array index,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n4. For each own property key P of O that is a Symbol, in ascending\nchronological order of property creation, do\na. Add P as the last element of keys.\n5. Return keys.\n", "features": ["Symbol", "Reflect"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/primitive-booleans.js", "description": " Object.getOwnPropertyDescriptors accepts boolean primitives.", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/primitive-numbers.js", "description": " Object.getOwnPropertyDescriptors accepts number primitives.", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/primitive-strings.js", "description": " Object.getOwnPropertyDescriptors accepts string primitives.", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/primitive-symbols.js", "description": " Object.getOwnPropertyDescriptors accepts Symbol primitives.", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/proxy-no-ownkeys-returned-keys-order.js", "esid": " sec-object.getownpropertydescriptors", "description": " >If Proxy \"ownKeys\" trap is missing, keys are sorted by type in ascending\nchronological order.\n", "info": " |Object.getOwnPropertyDescriptors ( O )\n\n[...]\n2. Let ownKeys be ? obj.[[OwnPropertyKeys]]().\n[...]\n4. For each element key of ownKeys in List order, do\na. Let desc be ? obj.[[GetOwnProperty]](key).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n6. If trap is undefined, then\na. Return ? target.[[OwnPropertyKeys]]().\n\nOrdinaryOwnPropertyKeys ( O )\n\n[...]\n3. For each own property key P of O such that Type(P) is String and P is\nnot an array index, in ascending chronological order of property creation, do\na. Add P as the last element of keys.\n4. For each own property key P of O such that Type(P) is Symbol,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n5. Return keys.\n", "features": ["Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/proxy-undefined-descriptor.js", "description": " Object.getOwnPropertyDescriptors should filter out undefined OwnPropertyDescriptors", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband", "features": ["Proxy"], "includes": ["proxyTrapsHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/symbols-included.js", "description": " Object.getOwnPropertyDescriptors includes Symbol keys.", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptors/tamper-with-object-keys.js", "description": " >Object.getOwnPropertyDescriptors should not have its behavior impacted by modifications to Object.getOwnPropertyDescriptor\n", "esid": " sec-object.getownpropertydescriptors", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineGetter__/define-non-configurable.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when property exists and is not configurable", "info": " |[...]\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\n", "features": ["__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineGetter__/define-non-extensible.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when \"this\" value is not extensible", "info": " |[...]\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\n", "features": ["__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineGetter__/this-non-obj.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when \"this\" value is not Object-coercible", "info": " |1. Let O be ? ToObject(this value).\n", "features": ["__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineSetter__/define-non-configurable.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when property exists and is not configurable", "info": " |[...]\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\n", "features": ["__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineSetter__/define-non-extensible.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when \"this\" value is not extensible", "info": " |[...]\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\n", "features": ["__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineSetter__/this-non-obj.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when \"this\" value is not Object-coercible", "info": " |1. Let O be ? ToObject(this value).\n", "features": ["__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupGetter__/lookup-own-get-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetOwnProperty]] of \"this\" value returns an abrupt\ncompletion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupGetter__/lookup-own-proto-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetPrototypeOf]] of \"this\" value returns an abrupt\ncompletion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupGetter__/lookup-proto-get-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetOwnProperty]] of prototype returns an abrupt completion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupGetter__/lookup-proto-proto-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetPrototypeOf]] of prototype returns an abrupt completion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupGetter__/this-non-obj.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when \"this\" value is not Object-coercible", "info": " |1. Let O be ? ToObject(this value).\n", "features": ["__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupSetter__/lookup-own-get-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetOwnProperty]] of \"this\" value returns an abrupt\ncompletion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupSetter__/lookup-own-proto-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetPrototypeOf]] of \"this\" value returns an abrupt\ncompletion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupSetter__/lookup-proto-get-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetOwnProperty]] of prototype returns an abrupt completion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupSetter__/lookup-proto-proto-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetPrototypeOf]] of prototype returns an abrupt completion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupSetter__/this-non-obj.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when \"this\" value is not Object-coercible", "info": " |1. Let O be ? ToObject(this value).\n", "features": ["__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/proxy-function-async.js", "esid": " sec-object.prototype.tostring", "description": " Proxy of async function is treated as a function.", "info": " |ProxyCreate ( target, handler )\n\n[...]\n7. If IsCallable(target) is true, then\na. Set P.[[Call]] as specified in 9.5.12.\n\nObject.prototype.toString ( )\n\n[...]\n7. Else if O has a [[Call]] internal method, let builtinTag be \"Function\".\n", "features": ["async-functions", "Proxy", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/proxy-function.js", "esid": " sec-object.prototype.tostring", "description": " Proxy of an function is treated as an function", "info": " |[...]\n\n9.5.14 ProxyCreate(target, handler)\n\n[...]\n7. If IsCallable(target) is true, then\na. Set the [[Call]] internal method of P as specified in 9.5.12.\n[...]\n\n", "features": ["generators", "async-functions", "Proxy", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/proxy-revoked-during-get-call.js", "esid": " sec-object.prototype.tostring", "description": " >If Proxy is revoked during Get call, a string is returned.\n", "info": " |Object.prototype.toString ( )\n\n[...]\n4. Let isArray be ? IsArray(O).\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIsArray ( argument )\n\n[...]\n3. If argument.[[ProxyHandler]] is null, throw a TypeError exception.\na. If argument.[[ProxyHandler]] is null, throw a TypeError exception.\nb. Let target be argument.[[ProxyTarget]].\nc. Return ? IsArray(target).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/symbol-tag-non-str-builtin.js", "esid": " sec-object.prototype.tostring", "description": " >Non-string values of `Symbol.toStringTag` property are ignored.\n", "info": " |Object.prototype.toString ( )\n\n[...]\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["Symbol.toStringTag", "Symbol.iterator", "generators", "WeakMap"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/symbol-tag-non-str-proxy-function.js", "esid": " sec-object.prototype.tostring", "description": " >Non-string values of `Symbol.toStringTag` property are ignored.\n", "info": " |ProxyCreate ( target, handler )\n\n[...]\n7. If IsCallable(target) is true, then\na. Set P.[[Call]] as specified in 9.5.12.\n\nObject.prototype.toString ( )\n\n[...]\n7. Else if O has a [[Call]] internal method, let builtinTag be \"Function\".\n[...]\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["generators", "async-functions", "Proxy", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Object/seal/seal-asyncarrowfunction.js", "esid": " sec-object.seal", "description": " >Object.seal AsyncArrowFunction\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-asyncfunction.js", "esid": " sec-object.seal", "description": " >Object.seal AsyncFunction\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-sharedarraybuffer.js", "esid": " sec-object.seal", "description": " >Object.seal SharedArrayBuffer\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Object/values/exception-during-enumeration.js", "esid": " sec-object.values", "description": " Object.values should terminate if getting a value throws an exception", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/function-length.js", "esid": " sec-object.values", "description": " Object.values should have length 1", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/values/function-name.js", "esid": " sec-object.values", "description": " Object.values should have name property with value 'values'", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/values/function-property-descriptor.js", "esid": " sec-object.values", "description": " Object.values should be writable, non-enumerable, and configurable", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/values/getter-adding-key.js", "esid": " sec-object.values", "description": " Object.values does not see a new element added by a getter that is hit during iteration", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/getter-making-future-key-nonenumerable.js", "esid": " sec-object.values", "description": " Object.values does not see an element made non-enumerable by a getter that is hit during iteration", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/getter-removing-future-key.js", "esid": " sec-object.values", "description": " Object.values does not see an element removed by a getter that is hit during iteration", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/inherited-properties-omitted.js", "esid": " sec-object.values", "description": " Object.values does not see inherited properties.", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/observable-operations.js", "esid": " sec-object.values", "description": " Object.values should perform observable operations in the correct order", "author": " Jordan Harband", "features": ["Proxy"], "includes": ["proxyTrapsHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/values/order-after-define-property.js", "esid": " sec-object.values", "description": " >Property names are returned in ascending chronological order of creation\nthat is unaffected by [[DefineOwnProperty]].\n", "info": " |Object.values ( O )\n\n[...]\n2. Let nameList be ? EnumerableOwnPropertyNames(obj, value).\n3. Return CreateArrayFromList(nameList).\n\nEnumerableOwnPropertyNames ( O, kind )\n\n[...]\n2. Let ownKeys be ? O.[[OwnPropertyKeys]]().\n[...]\n\nOrdinaryOwnPropertyKeys ( O )\n\n[...]\n3. For each own property key P of O that is a String but is not an array index,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n[...]\n5. Return keys.\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/values/primitive-booleans.js", "esid": " sec-object.values", "description": " Object.values accepts boolean primitives.", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/primitive-numbers.js", "esid": " sec-object.values", "description": " Object.values accepts number primitives.", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/primitive-strings.js", "esid": " sec-object.values", "description": " Object.values accepts string primitives.", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/primitive-symbols.js", "esid": " sec-object.values", "description": " Object.values accepts Symbol primitives.", "author": " Jordan Harband", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/values/return-order.js", "esid": " sec-object.values", "description": " Object.values enumeration order", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/values/symbols-omitted.js", "esid": " sec-object.values", "description": " Object.values does not include Symbol keys.", "author": " Jordan Harband", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/values/tamper-with-global-object.js", "esid": " sec-object.values", "description": " >Object.values should not have its behavior impacted by modifications to the global property Object\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Object/values/tamper-with-object-keys.js", "esid": " sec-object.values", "description": " >Object.values should not have its behavior impacted by modifications to Object.keys\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/Promise/reject-function-name.js", "esid": " sec-promise-reject-functions", "description": " The `name` property of Promise Reject functions", "info": " |A promise reject function is an anonymous built-in function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Promise/resolve-function-name.js", "esid": " sec-promise-resolve-functions", "description": " The `name` property of Promise Resolve functions", "info": " |A promise resolve function is an anonymous built-in function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/character-class-escape-non-whitespace-u180e.js", "esid": " sec-characterclassescape", "description": " Detect non WhiteSpace using \\S+", "info": " |The production CharacterClassEscape :: S evaluates by returning\nthe set of all characters not included in the set returned by\nCharacterClassEscape :: s\n\nThe Mongolian Vowel Separator (u180e) became a non whitespace character\nsince Unicode 6.3.0\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/RegExp/dotall/with-dotall-unicode.js", "description": " Test the characters included by . in dotAll and unicode mode", "info": " |21.2.2.8 Atom\nThe production Atom::. evaluates as follows:\n1. If DotAll is true, then\na. Let A be the set of all characters.\n2. Otherwise, let A be the set of all characters except LineTerminator.\n3. Call CharacterSetMatcher(A, false) and return its Matcher result.\n\n", "esid": " sec-atom", "features": ["regexp-dotall", "u180e"]}, {"path": "./test262-main/test/built-ins/RegExp/dotall/with-dotall.js", "description": " Test the characters included by . in dotAll and non-unicode mode", "info": " |21.2.2.8 Atom\nThe production Atom::. evaluates as follows:\n1. If DotAll is true, then\na. Let A be the set of all characters.\n2. Otherwise, let A be the set of all characters except LineTerminator.\n3. Call CharacterSetMatcher(A, false) and return its Matcher result.\n\n", "esid": " sec-atom", "features": ["regexp-dotall", "u180e"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/alternations.js", "esid": " sec-assertion", "description": " Alternations are tried left to right, and we do not backtrack into a lookbehind.", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/back-references-to-captures.js", "esid": " sec-assertion", "description": " Back references to captures inside the lookbehind.", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/back-references.js", "esid": " sec-assertion", "description": " Back references", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/captures-negative.js", "esid": " sec-assertion", "description": " >Captures inside negative lookbehind. (They never capture.)\n", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/captures.js", "esid": " sec-assertion", "description": " >Capturing matches\n", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/do-not-backtrack.js", "esid": " sec-assertion", "description": " Do not backtrack into a lookbehind.", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/greedy-loop.js", "esid": " sec-assertion", "description": " Greedy loop", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/misc.js", "esid": " sec-assertion", "description": " Misc RegExp lookbehind tests", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/mutual-recursive.js", "esid": " sec-assertion", "description": " Mutual recursive capture/back references", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/negative.js", "esid": " sec-assertion", "description": " RegExp negative lookbehind", "info": " |The production Assertion :: (?<!Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a\nContinuation c, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful\nMatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is not failure, return failure.\nd. Call c(x) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/nested-lookaround.js", "esid": " sec-assertion", "description": " Nested lookaround", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/simple-fixed-length.js", "esid": " sec-assertion", "description": " Simple fixed-length matches", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/sliced-strings.js", "esid": " sec-assertion", "description": " Sliced strings", "info": " |Rationale from https://github.com/tc39/test262/pull/999#discussion_r113807747\n\nSince this test originates from V8, this targets V8's sliced strings, which are used for\nsubstrings above a length of 13 characters. I wrote this test for exactly the reason\n@littledan mentioned. That's why the variable name is called oob_subject. The underlying string\nbacking store extends beyond the actual boundary of the sliced string.\n", "features": ["regexp-lookbehind"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/start-of-line.js", "esid": " sec-assertion", "description": " Start of line matches", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/sticky.js", "esid": " sec-assertion", "description": " Sticky", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/variable-length.js", "esid": " sec-assertion", "description": " Variable-length matches", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/word-boundary.js", "esid": " sec-assertion", "description": " Word boundary", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/builtin-failure-g-set-lastindex-err.js", "description": " >Behavior when error thrown while setting `lastIndex` after a match failure\n", "version": 6, "esid": " 21.2.5.6", "info": " |[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n7. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n3. Let length be the number of code units in S.\n[...]\n11. Let matchSucceeded be false.\n12. Repeat, while matchSucceeded is false\na. If lastIndex > length, then\ni. If global is true or sticky is true, then\n1. Perform ? Set(R, \"lastIndex\", 0, true).\nii. Return null.\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/builtin-failure-y-set-lastindex-err.js", "description": " >Behavior when error thrown while setting `lastIndex` after a \"sticky\" match\nfailure\n", "version": 6, "esid": " 21.2.5.6", "info": " |[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n7. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n14. Let matchSucceeded be false.\n15. Repeat, while matchSucceeded is false\n[...]\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n2. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/builtin-success-g-set-lastindex-err.js", "description": " >Behavior when error thrown while setting `lastIndex` after a \"global\" match\nsuccess\n", "version": 6, "esid": " 21.2.5.6", "info": " |[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n7. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n18. If global is true or sticky is true,\na. Let setStatus be Set(R, \"lastIndex\", e, true).\nb. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/builtin-success-y-set-lastindex-err.js", "description": " >Behavior when error thrown while setting `lastIndex` after a \"sticky\" match\nsuccess\n", "version": 6, "esid": " 21.2.5.6", "info": " |[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n7. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n18. If global is true or sticky is true,\na. Let setStatus be Set(R, \"lastIndex\", e, true).\nb. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/g-init-lastindex-err.js", "description": " Behavior when `lastIndex` cannot be set on \"global\" instances", "version": 6, "esid": " 21.2.5.6", "info": " |7. If global is false, then\n[...]\n8. Else global is true,\n[...]\nc. Let setStatus be Set(rx, \"lastIndex\", 0, true).\nd. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/g-match-empty-set-lastindex-err.js", "description": " >Behavior when error is thrown while setting `lastIndex` after a zero-width\nmatch\n", "version": 6, "esid": " 21.2.5.6", "info": " |7. If global is false, then\n[...]\n8. Else global is true,\n[...]\ng. Repeat,\ni. Let result be RegExpExec(rx, S).\n[...]\niv. Else result is not null,\n1. Let matchStr be ToString(Get(result, \"0\")).\n[...]\n5. If matchStr is the empty String, then\n[...]\nd. Let setStatus be Set(rx, \"lastIndex\", nextIndex, true).\ne. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/y-fail-lastindex-no-write.js", "description": " Match failure with non-writable `lastIndex` property", "version": 6, "esid": " 21.2.5.6", "info": " |21.2.5.6 RegExp.prototype [ @@match ] ( string )\n\n[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n15. Repeat, while matchSucceeded is false\n[...]\nb. Let r be matcher(S, lastIndex).\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n2. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/coerce-unicode.js", "description": " Boolean coercion of `unicode` property", "version": 6, "esid": " 21.2.5.8", "info": " |21.2.5.6 RegExp.prototype [ @@replace ] ( string )\n\n[...]\n10. If global is true, then\na. Let fullUnicode be ToBoolean(Get(rx, \"unicode\")).\n[...]\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/fn-coerce-replacement.js", "esid": " sec-regexp.prototype-@@replace", "description": " >String coercion of the value returned by functional replaceValue.\n", "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n14. For each result in results, do\n[...]\nk. If functionalReplace is true, then\n[...]\nv. Let replValue be ? Call(replaceValue, undefined, replacerArgs).\nvi. Let replacement be ? ToString(replValue).\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/g-init-lastindex-err.js", "description": " >Behavior when error is thrown while initializing `lastIndex` property for\n\"global\" instances\n", "version": 6, "esid": " 21.2.5.8", "info": " |21.2.5.8 RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n10. If global is true, then\n[...]\nc. Let setStatus be Set(rx, \"lastIndex\", 0, true).\nd. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/y-fail-lastindex-no-write.js", "description": " Match failure with non-writable `lastIndex` property", "version": 6, "esid": " 21.2.5.8", "info": " |21.2.5.8 RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n13. Repeat, while done is false\na. Let result be RegExpExec(rx, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n15. Repeat, while matchSucceeded is false\n[...]\nb. Let r be matcher(S, lastIndex).\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n2. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/y-init-lastindex.js", "description": " Honors initial value of the `lastIndex` property", "version": 6, "esid": " 21.2.5.8", "info": " |21.2.5.8 RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n13. Repeat, while done is false\na. Let result be RegExpExec(rx, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n9. ReturnIfAbrupt(sticky).\n10. If global is false and sticky is false, let lastIndex be 0.\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/y-set-lastindex.js", "description": " Sets the `lastIndex` property to the end index of the first match", "version": 6, "esid": " 21.2.5.8", "info": " |21.2.5.8 RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n13. Repeat, while done is false\na. Let result be RegExpExec(rx, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n18. If global is true or sticky is true,\na. Let setStatus be Set(R, \"lastIndex\", e, true).\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.search/lastindex-no-restore.js", "version": 6, "esid": " 21.2.5.9", "description": " Behavior when some lastIndex writes should be skipped.", "info": " |[...]\n4. Let previousLastIndex be ? Get(rx, \"lastIndex\").\n5. If SameValue(previousLastIndex, 0) is false, then\na. Perform ? Set(rx, \"lastIndex\", 0, true).\n[...]\n7. Let currentLastIndex be ? Get(rx, \"lastIndex\").\n8. If SameValue(currentLastIndex, previousLastIndex) is false, then\na. Perform ? Set(rx, \"lastIndex\", previousLastIndex, true).\n[...]\n", "features": ["Symbol.search"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.search/set-lastindex-init-err.js", "version": 6, "esid": " 21.2.5.9", "description": " >Behavior when error thrown while initially setting `lastIndex` property\n", "info": " |[...]\n7. Let status be Set(rx, \"lastIndex\", 0, true).\n8. ReturnIfAbrupt(status).\n", "features": ["Symbol.search"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.search/set-lastindex-restore-err.js", "version": 6, "esid": " 21.2.5.9", "description": " >Behavior when error thrown while restoring `lastIndex` property following\nmatch execution\n", "info": " |[...]\n8. If SameValue(currentLastIndex, previousLastIndex) is false, then\na. Perform ? Set(rx, \"lastIndex\", previousLastIndex, true).\n", "features": ["Symbol.search"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.split/str-coerce-lastindex.js", "version": 6, "esid": " 21.2.5.11", "description": " Length coercion of `lastIndex` property of splitter after a match", "info": " |[...]\n24. Repeat, while q < size\na. Let setStatus be Set(splitter, \"lastIndex\", q, true).\n[...]\nc. Let z be RegExpExec(splitter, S).\n[...]\nf. Else z is not null,\ni. Let e be ToLength(Get(splitter, \"lastIndex\")).\n[...]\n", "features": ["Symbol.split", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.split/str-result-coerce-length-err.js", "version": 6, "esid": " 21.2.5.11", "description": " >Behavior when error thrown while coercing `length` property of match result\n", "info": " |[...]\n24. Repeat, while q < size\na. Let setStatus be Set(splitter, \"lastIndex\", q, true).\n[...]\nc. Let z be RegExpExec(splitter, S).\n[...]\nf. Else z is not null,\niv. Else e \u2260 p,\n[...]\n7. Let numberOfCaptures be ToLength(Get(z, \"length\")).\n8. ReturnIfAbrupt(numberOfCaptures).\n", "features": ["Symbol.split", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.split/str-result-get-length-err.js", "version": 6, "esid": " 21.2.5.11", "description": " >Behavior when error thrown while accessing `length` property of match\nresult\n", "info": " |[...]\n24. Repeat, while q < size\na. Let setStatus be Set(splitter, \"lastIndex\", q, true).\n[...]\nc. Let z be RegExpExec(splitter, S).\n[...]\nf. Else z is not null,\niv. Else e \u2260 p,\n[...]\n7. Let numberOfCaptures be ToLength(Get(z, \"length\")).\n8. ReturnIfAbrupt(numberOfCaptures).\n", "features": ["Symbol.split", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/length.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >get RegExp.prototype.dotAll.length is 0.\n", "info": " |get RegExp.prototype.dotAll\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/name.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >RegExp.prototype.dotAll name\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nFunctions that are specified as get or set accessor functions of built-in\nproperties have \"get \" or \"set \" prepended to the property name string.\n", "includes": ["propertyHelper.js"], "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/prop-desc.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >`pending` property descriptor\n", "info": " |RegExp.prototype.dotAll is an accessor property whose set accessor\nfunction is undefined.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes\n{ [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get\naccessor function is described, the set accessor function is the default value, undefined. If\nonly a set accessor is described the get accessor is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/this-val-invalid-obj.js", "esid": " sec-get-regexp.prototype.dotall", "description": " Invoked on an object without an [[OriginalFlags]] internal slot", "info": " |get RegExp.prototype.dotAll\n\n1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\nb. Otherwise, throw a TypeError exception.\n", "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/this-val-non-obj.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >`dotAll` accessor invoked on a non-object value\n", "info": " |get RegExp.prototype.dotAll\n\n1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n", "features": ["Symbol", "regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/this-val-regexp-prototype.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >Return value of `undefined` when the \"this\" value is the RegExp prototype\nobject\n", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n", "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/this-val-regexp.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >`dotAll` accessor function invoked on a RegExp instance\n", "info": " |21.2.5.12 get RegExp.prototype.dotAll\n\n4. Let flags be the value of R\u2019s [[OriginalFlags]] internal slot.\n5. If flags contains the code unit \"s\", return true.\n6. Return false.\n", "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/exec/y-fail-lastindex-no-write.js", "description": " Match failure with non-writable `lastIndex` property", "version": 6, "esid": " 21.2.5.2", "info": " |21.2.5.2 RegExp.prototype.exec ( string )\n\n[...]\n6. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n15. Repeat, while matchSucceeded is false\n[...]\nb. Let r be matcher(S, lastIndex).\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n2. ReturnIfAbrupt(setStatus).\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/coercion-dotall.js", "esid": " sec-get-regexp.prototype.flags", "description": " Boolean coercion of the dotAll property", "info": " |get RegExp.prototype.flags\n\n...\n10. Let dotAll be ToBoolean(? Get(R, \"dotAll\")).\n...\n", "features": ["Symbol", "regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/test/y-fail-lastindex-no-write.js", "description": " Match failure with non-writable `lastIndex` property", "version": 6, "esid": " 21.2.5.13", "info": " |21.2.5.13 RegExp.prototype.test( S )\n\n[...]\n5. Let match be RegExpExec(R, string).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n15. Repeat, while matchSucceeded is false\n[...]\nb. Let r be matcher(S, lastIndex).\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n2. ReturnIfAbrupt(setStatus).\n"}, {"path": "./test262-main/test/built-ins/RegExp/u180e.js", "esid": " prod-CharacterClassEscape", "description": " >U+180E is no longer a Unicode `Space_Separator` symbol as of Unicode v6.3.0.\n", "info": " |21.2.2.12 CharacterClassEscape\n\n...\n\nThe production CharacterClassEscape::s evaluates as follows:\n\nReturn the set of characters containing the characters that are on the\nright-hand side of the WhiteSpace or LineTerminator productions.\n\nThe production CharacterClassEscape::S evaluates as follows:\n\nReturn the set of all characters not included in the set returned by\nCharacterClassEscape::s .\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/allocation-limit.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a RangeError if requested Data Block is too large.\n", "info": " |SharedArrayBuffer( length )\n\n...\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\n\n6.2.7.2 CreateSharedByteDataBlock(size)\n...\n2. Let db be a new Shared Data Block value consisting of size\nbytes. If it is impossible to create such a Shared Data Block,\nthrow a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/data-allocation-after-object-creation.js", "esid": " sec-sharedarraybuffer-length", "description": " >The new SharedArrayBuffer instance is created prior to allocating the Data Block.\n", "info": " |SharedArrayBuffer( length )\n\n...\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\n\nAllocateSharedArrayBuffer( constructor, byteLength )\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\n\u00ab[[ArrayBufferData]], [[ArrayBufferByteLength]]\u00bb ).\n...\n3. Let block be ? CreateByteDataBlock(byteLength).\n...\n", "features": ["SharedArrayBuffer", "Reflect.construct"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/init-zero.js", "esid": " sec-createsharedbytedatablock", "description": " All bytes are initialized to zero", "features": ["SharedArrayBuffer", "DataView"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >The SharedArrayBuffer constructor implements [[Construct]]\n", "info": " |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/length-is-absent.js", "esid": " sec-sharedarraybuffer-length", "description": " >Returns an empty instance if length is absent\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n3. Return ? AllocateSharedArrayBuffer(NewTarget, byteLength).\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/length-is-too-large-throws.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a RangeError if length >= 2 ** 53\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/length.js", "esid": " sec-sharedarraybuffer-constructor", "description": " >SharedArrayBuffer.length is 1.\n", "info": " |SharedArrayBuffer( length )\n\nECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/negative-length-throws.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a Range Error if length represents an integer < 0\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/newtarget-prototype-is-not-object.js", "esid": " sec-sharedarraybuffer-length", "description": " >[[Prototype]] defaults to %SharedArrayBufferPrototype% if NewTarget.prototype is not an object.\n", "info": " |SharedArrayBuffer( length )\n\nSharedArrayBuffer called with argument length performs the following steps:\n\n...\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\n\nAllocateSharedArrayBuffer( constructor, byteLength )\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\n\u00ab[[ArrayBufferData]], [[ArrayBufferByteLength]]\u00bb ).\n...\n", "features": ["SharedArrayBuffer", "Symbol", "Reflect.construct"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/Symbol.toStringTag.js", "description": " >`Symbol.toStringTag` property descriptor\n", "info": " |The initial value of the @@toStringTag property is the String value\n\"SharedArrayBuffer\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/invoked-as-accessor.js", "description": " Requires this value to have a [[ArrayBufferData]] internal slot", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/invoked-as-func.js", "description": " Throws a TypeError exception when invoked as a function", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/length.js", "description": " >get SharedArrayBuffer.prototype.byteLength.length is 0.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/name.js", "description": " >get SharedArrayBuffer.prototype.byteLength\n\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/prop-desc.js", "description": " >\"byteLength\" property of SharedArrayBuffer.prototype\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/return-bytelength.js", "description": " Return value from [[ByteLength]] internal slot", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-has-no-typedarrayname-internal.js", "description": " >Throws a TypeError exception when `this` does not have a [[ArrayBufferData]]\ninternal slot\n", "features": ["SharedArrayBuffer", "DataView", "Int8Array"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-is-arraybuffer.js", "esid": " sec-get-sharedarraybuffer.prototype.bytelength", "description": " Throws a TypeError exception when `this` is an ArrayBuffer", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-is-not-object.js", "description": " Throws a TypeError exception when `this` is not Object", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/constructor.js", "description": " >The `SharedArrayBuffer.prototype.constructor` property descriptor.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/context-is-not-arraybuffer-object.js", "description": " >Throws a TypeError if `this` does not have an [[ArrayBufferData]] internal slot.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/context-is-not-object.js", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/descriptor.js", "description": " >SharedArrayBuffer.prototype.slice has default data property attributes.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery other data property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/end-default-if-absent.js", "description": " >The `end` index defaults to [[ArrayBufferByteLength]] if absent.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/end-default-if-undefined.js", "description": " >The `end` index defaults to [[ArrayBufferByteLength]] if undefined.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/end-exceeds-length.js", "description": " >Large `end` index is clamped to [[ArrayBufferByteLength]].\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/extensible.js", "description": " >SharedArrayBuffer.prototype.slice is extensible.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/length.js", "description": " >SharedArrayBuffer.prototype.slice.length is 2.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/name.js", "description": " >SharedArrayBuffer.prototype.slice.name is \"slice\".\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/negative-end.js", "description": " >Negative `end` index is relative to [[ArrayBufferByteLength]].\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/negative-start.js", "description": " >Negative `start` index is relative to [[ArrayBufferByteLength]].\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/nonconstructor.js", "description": " >SharedArrayBuffer.prototype.slice is not a constructor function.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >SharedArrayBuffer.prototype.slice does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "SharedArrayBuffer", "arrow-function"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/number-conversion.js", "description": " >ToInteger(start) is called before ToInteger(end).\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-constructor-is-not-object.js", "description": " >Throws TypeError if `constructor` property is not an object.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-constructor-is-undefined.js", "description": " >Uses default constructor is `constructor` property is undefined.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-not-constructor.js", "description": " >Throws a TypeError if species constructor is not a constructor function.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-not-object.js", "description": " >Throws a TypeError if species constructor is not an object.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-null.js", "description": " >Uses default constructor is species constructor is null.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-undefined.js", "description": " >Uses default constructor is species constructor is undefined.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-larger-arraybuffer.js", "description": " >Does not throw TypeError if new SharedArrayBuffer is too large.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-not-arraybuffer.js", "description": " >Throws a TypeError if new object is not an SharedArrayBuffer instance.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-same-arraybuffer.js", "description": " >Throws a TypeError if species constructor returns `this` value.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-smaller-arraybuffer.js", "description": " >Throws a TypeError if new SharedArrayBuffer is too small.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species.js", "description": " >New SharedArrayBuffer instance is created from SpeciesConstructor.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/start-default-if-absent.js", "description": " >The `start` index defaults to 0 if absent.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/start-default-if-undefined.js", "description": " >The `start` index defaults to 0 if undefined.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/start-exceeds-end.js", "description": " >Returns zero-length buffer if `start` index exceeds `end` index.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/start-exceeds-length.js", "description": " >Large `start` index is clamped to [[ArrayBufferByteLength]].\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/this-is-arraybuffer.js", "esid": " sec-sharedarraybuffer.prototype.slice", "description": " >Throws a TypeError if `this` is an ArrayBuffer\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/tointeger-conversion-end.js", "description": " >The `end` index parameter is converted to an integral numeric value.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/tointeger-conversion-start.js", "description": " >The `start` index parameter is converted to an integral numeric value.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype-from-newtarget.js", "esid": " sec-sharedarraybuffer-length", "description": " >The [[Prototype]] internal slot is computed from NewTarget.\n", "info": " |SharedArrayBuffer( length )\n\nSharedArrayBuffer called with argument length performs the following steps:\n\n...\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\n\nAllocateSharedArrayBuffer( constructor, byteLength )\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\n\u00ab[[ArrayBufferData]], [[ArrayBufferByteLength]]\u00bb ).\n...\n", "features": ["SharedArrayBuffer", "Reflect.construct"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/return-abrupt-from-length-symbol.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a TypeError if length is a symbol\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/return-abrupt-from-length.js", "esid": " sec-sharedarraybuffer-length", "description": " >Return abrupt from ToIndex(length)\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/toindex-length.js", "esid": " sec-sharedarraybuffer-length", "description": " >The `length` parameter is converted to a value numeric index value.\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n3. Return ? AllocateSharedArrayBuffer(NewTarget, byteLength).\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\nc. Let index be ! ToLength(integerIndex).\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\n3. Return index.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/undefined-newtarget-throws.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a TypeError if SharedArrayBuffer is called as a function.\n", "info": " |SharedArrayBuffer( length )\n\nSharedArrayBuffer called with argument length performs the following steps:\n\n1. If NewTarget is undefined, throw a TypeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/zero-length.js", "esid": " sec-sharedarraybuffer-length", "description": " >The `length` parameter can be zero.\n", "info": " |SharedArrayBuffer( length )\n\n...\n2. Let numberLength be ToNumber(length).\n3. Let byteLength be ToLength(numberLength).\n4. ReturnIfAbrupt(byteLength).\n5. If SameValueZero(numberLength, byteLength) is false, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/String/prototype/Symbol.iterator/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >String.prototype[Symbol.iterator] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.iterator", "arrow-function"]}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/exception-not-object-coercible.js", "esid": " sec-string.prototype.padend", "description": " >String#padEnd should fail if given a null or undefined value,\nor an object not coercible to a string.\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/fill-string-empty.js", "esid": " sec-string.prototype.padend", "description": " >String#padEnd should return the string unchanged when\nan explicit empty string is provided\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/fill-string-non-strings.js", "esid": " sec-string.prototype.padend", "description": " String#padEnd should stringify a non-string fillString value", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/fill-string-omitted.js", "esid": " sec-string.prototype.padend", "description": " String#padEnd should default to a fillString of \" \" when omitted", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/function-length.js", "esid": " sec-string.prototype.padend", "description": " String#padEnd should have length 1", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/function-name.js", "esid": " sec-string.prototype.padend", "description": " String#padEnd should have name property with value 'padEnd'", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/function-property-descriptor.js", "esid": " sec-string.prototype.padend", "description": " String#padEnd should be writable, non-enumerable, and configurable", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/max-length-not-greater-than-string.js", "esid": " sec-string.prototype.padend", "description": " >String#padEnd should return the string unchanged when an integer max\nlength is not greater than the string length\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/normal-operation.js", "esid": " sec-string.prototype.padend", "description": " String#padEnd should work in the general case", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/observable-operations.js", "esid": " sec-string.prototype.padend", "description": " String#padEnd should perform observable operations in the correct order", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/exception-not-object-coercible.js", "esid": " sec-string.prototype.padstart", "description": " >String#padStart should fail if given a null or undefined value,\nor an object not coercible to a string.\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/fill-string-empty.js", "esid": " sec-string.prototype.padstart", "description": " >String#padStart should return the string unchanged when\nan explicit empty string is provided\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/fill-string-non-strings.js", "esid": " sec-string.prototype.padstart", "description": " String#padStart should stringify a non-string fillString value", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/fill-string-omitted.js", "esid": " sec-string.prototype.padstart", "description": " String#padStart should default to a fillString of \" \" when omitted", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/function-length.js", "esid": " sec-string.prototype.padstart", "description": " String#padStart should have length 1", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/function-name.js", "esid": " sec-string.prototype.padstart", "description": " String#padStart should have name property with value 'padStart'", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/function-property-descriptor.js", "esid": " sec-string.prototype.padstart", "description": " String#padStart should be writable, non-enumerable, and configurable", "author": " Jordan Harband", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/max-length-not-greater-than-string.js", "esid": " sec-string.prototype.padstart", "description": " >String#padStart should return the string unchanged when an integer max\nlength is not greater than the string length\n", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/normal-operation.js", "esid": " sec-string.prototype.padstart", "description": " String#padStart should work in the general case", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/observable-operations.js", "esid": " sec-string.prototype.padstart", "description": " String#padStart should perform observable operations in the correct order", "author": " Jordan Harband"}, {"path": "./test262-main/test/built-ins/String/prototype/replace/cstm-replace-is-null.js", "esid": " sec-string.prototype.replace", "description": " >If searchValue's Symbol.replace property is null, no error is thrown.\n", "info": " |String.prototype.replace ( searchValue, replaceValue )\n\n[...]\n2. If searchValue is neither undefined nor null, then\na. Let replacer be ? GetMethod(searchValue, @@replace).\nb. If replacer is not undefined, then\n[...]\n[...]\n12. Return newString.\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replace/replaceValue-evaluation-order-regexp-object.js", "esid": " sec-string.prototype.replace", "description": " >Non-callable replaceValue is evaluated via toString\n", "info": " |String.prototype.replace ( searchValue, replaceValue )\n\nIf functionalReplace is false, then\nSet replaceValue to ? ToString(replaceValue).\n"}, {"path": "./test262-main/test/built-ins/String/prototype/replace/replaceValue-evaluation-order.js", "esid": " sec-string.prototype.replace", "description": " >Non-callable replaceValue is evaluated before searching the string.\n", "info": " |String.prototype.replace ( searchValue, replaceValue )\n\n...\n6. If functionalReplace is false, then\na. Set replaceValue to ? ToString(replaceValue).\n7. Search string for the first occurrence of searchString and let pos be the\nindex within string of the first code unit of the matched substring and let\nmatched be searchString. If no occurrences of searchString were found, return string.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/split/cstm-split-is-null.js", "esid": " sec-string.prototype.split", "description": " >If separator's Symbol.split property is null, no error is thrown.\n", "info": " |String.prototype.split ( separator, limit )\n\n[...]\n2. If separator is neither undefined nor null, then\na. Let splitter be ? GetMethod(separator, @@split).\nb. If splitter is not undefined, then\n[...]\n[...]\n17. Return A.\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "includes": ["compareArray.js"], "features": ["Symbol.split"]}, {"path": "./test262-main/test/built-ins/String/prototype/split/separator-undef-limit-custom.js", "esid": " sec-string.prototype.split", "description": " Separator is undefined, limit is a positive number, return a new array with the string ", "info": " |...\n3. Let S be ? ToString(O).\n4. Let A be ! ArrayCreate(0).\n...\n6. If limit is undefined, let lim be 232 - 1; else let lim be ? ToUint32(limit).\n7. Let R be ? ToString(separator).\n8. If lim = 0, return A.\n9. If separator is undefined, then\na. Perform ! CreateDataPropertyOrThrow(A, \"0\", S).\nb. Return A.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/split/separator-undef-limit-zero.js", "esid": " sec-string.prototype.split", "description": " Separator is undefined, limit is zero, return a new empty array", "info": " |...\n3. Let S be ? ToString(O).\n4. Let A be ! ArrayCreate(0).\n...\n6. If limit is undefined, let lim be 2**32 - 1; else let lim be ? ToUint32(limit).\n7. Let R be ? ToString(separator).\n8. If lim = 0, return A.\n\nToUint32 ( argument )\n\n1. Let number be ? ToNumber(argument).\n2. If number is NaN, +0, -0, +\u221e, or -\u221e, return +0.\n3. Let int be the Number value that is the same sign as number and whose magnitude is floor(abs(number)).\n4. Let int32bit be int modulo 2**32.\n5. Return int32bit.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleLowerCase/Final_Sigma_U180E.js", "esid": " sec-string.prototype.tolocalelowercase", "description": " >Check if String.prototype.toLocaleLowerCase supports conditional mappings defined in SpecialCasings,\ntest Final_Sigma context with Mongolian Vowel Separator\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleLowerCase/special_casing_conditional.js", "description": " >Check if String.prototype.toLocaleLowerCase supports conditional mappings defined in SpecialCasings\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleLowerCase/supplementary_plane.js", "description": " String.prototype.toLocaleLowerCase() iterates over code points", "info": " |21.1.3.20 String.prototype.toLocaleLowerCase()\n...\nThis function interprets a String value as a sequence of UTF-16 encoded\ncode points, as described in 6.1.4.\n\nThis function works exactly the same as toLowerCase [...].\n\n21.1.3.20 String.prototype.toLowerCase ( )\n\n...\n4. Let cpList be a List containing in order the code points as defined in\n6.1.4 of S, starting at the first element of S.\n5. For each code point c in cpList, if the Unicode Character Database\nprovides a language insensitive lower case equivalent of c then replace\nc in cpList with that equivalent code point(s).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleUpperCase/supplementary_plane.js", "description": " String.prototype.toLocaleUpperCase() iterates over code points", "info": " |21.1.3.21 String.prototype.toLocaleUpperCase()\n...\nThis function interprets a String value as a sequence of UTF-16 encoded\ncode points, as described in 6.1.4.\n\nThis function works exactly the same as toUpperCase [...].\n\n21.1.3.24 String.prototype.toUpperCase ( )\n\nThis function behaves in exactly the same way as String.prototype.toLowerCase,\nexcept that code points are mapped to their uppercase equivalents as specified\nin the Unicode Character Database.\n\n21.1.3.22 String.prototype.toLowerCase ( )\n\n...\n4. Let cpList be a List containing in order the code points as defined in\n6.1.4 of S, starting at the first element of S.\n5. For each code point c in cpList, if the Unicode Character Database\nprovides a language insensitive lower case equivalent of c then replace\nc in cpList with that equivalent code point(s).\n", "version": 6, "esid": " 21.1.3.21"}, {"path": "./test262-main/test/built-ins/String/prototype/toLowerCase/Final_Sigma_U180E.js", "esid": " sec-string.prototype.tolowercase", "description": " >Check if String.prototype.toLowerCase supports conditional mappings defined in SpecialCasings,\ntest Final_Sigma context with Mongolian Vowel Separator\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/String/prototype/toLowerCase/special_casing_conditional.js", "description": " >Check if String.prototype.toLowerCase supports conditional mappings defined in SpecialCasings\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.22"}, {"path": "./test262-main/test/built-ins/String/prototype/toLowerCase/supplementary_plane.js", "description": " String.prototype.toLowerCase() iterates over code points", "info": " |21.1.3.22 String.prototype.toLowerCase ( )\n\n...\n4. Let cpList be a List containing in order the code points as defined in\n6.1.4 of S, starting at the first element of S.\n5. For each code point c in cpList, if the Unicode Character Database\nprovides a language insensitive lower case equivalent of c then replace\nc in cpList with that equivalent code point(s).\n", "version": 6, "esid": " 21.1.3.22"}, {"path": "./test262-main/test/built-ins/String/prototype/toUpperCase/supplementary_plane.js", "description": " String.prototype.toUpperCase() iterates over code points", "info": " |21.1.3.24 String.prototype.toUpperCase ( )\n\nThis function behaves in exactly the same way as String.prototype.toLowerCase,\nexcept that code points are mapped to their uppercase equivalents as specified\nin the Unicode Character Database.\n\n21.1.3.22 String.prototype.toLowerCase ( )\n\n...\n4. Let cpList be a List containing in order the code points as defined in\n6.1.4 of S, starting at the first element of S.\n5. For each code point c in cpList, if the Unicode Character Database\nprovides a language insensitive lower case equivalent of c then replace\nc in cpList with that equivalent code point(s).\n", "version": 6, "esid": " 21.1.3.24"}, {"path": "./test262-main/test/built-ins/String/prototype/trim/u180e.js", "esid": " sec-white-space", "description": " >U+180E is no longer a Unicode `Space_Separator` symbol as of Unicode v6.3.0.\n", "info": " |String.prototype.trim ( )\n\n3. [...] The definition of white space is the union of |WhiteSpace| and\n|LineTerminator|.\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/ThrowTypeError/forbidden-arguments.js", "esid": " sec-%throwtypeerror%", "description": " >%ThrowTypeError% does not have an own \"arguments\" property.\n", "info": " |%ThrowTypeError% ( )\n\nThe %ThrowTypeError% intrinsic is an anonymous built-in function\nobject that is defined once for each realm.\n\n16.2 Forbidden Extensions\n\nOther than as defined in this specification, ECMAScript Function\nobjects defined using syntactic constructors in strict mode code\nmust not be created with own properties named \"caller\" or\n\"arguments\" other than those that are created by applying the\nAddRestrictedFunctionProperties abstract operation (9.2.7) to\nthe function. [...] Built-in functions, strict mode functions\ncreated using the Function constructor, generator functions\ncreated using the Generator constructor, and functions created\nusing the bind method also must not be created with such own\nproperties.\n"}, {"path": "./test262-main/test/built-ins/ThrowTypeError/forbidden-caller.js", "esid": " sec-%throwtypeerror%", "description": " >%ThrowTypeError% does not have an own \"caller\" property.\n", "info": " |%ThrowTypeError% ( )\n\nThe %ThrowTypeError% intrinsic is an anonymous built-in function\nobject that is defined once for each realm.\n\n16.2 Forbidden Extensions\n\nOther than as defined in this specification, ECMAScript Function\nobjects defined using syntactic constructors in strict mode code\nmust not be created with own properties named \"caller\" or\n\"arguments\" other than those that are created by applying the\nAddRestrictedFunctionProperties abstract operation (9.2.7) to\nthe function. [...] Built-in functions, strict mode functions\ncreated using the Function constructor, generator functions\ncreated using the Generator constructor, and functions created\nusing the bind method also must not be created with such own\nproperties.\n"}, {"path": "./test262-main/test/built-ins/ThrowTypeError/unique-per-realm-function-proto.js", "esid": " sec-%throwtypeerror%", "description": " >%ThrowTypeError% is defined once for each realm.\n", "info": " |%ThrowTypeError% ( )\n\nThe %ThrowTypeError% intrinsic is an anonymous built-in function\nobject that is defined once for each realm.\n"}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteLength/prop-desc.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " >\"byteLength\" property of TypedArrayPrototype\n", "info": " |%TypedArray%.prototype.byteLength is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteOffset/prop-desc.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " >\"byteOffset\" property of TypedArrayPrototype\n", "info": " |%TypedArray%.prototype.byteOffset is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Unreachable abrupt from Get(O, \"length\") as [[ArrayLength]] is returned.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.every", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-conversion-once.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with non numeric values values.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let _value_ be ? ToNumber(_value_).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Unreachable abrupt from Get(O, \"length\") as [[ArrayLength]] is returned.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Uses internal ArrayLength instead of length property", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.find", "description": " >[[Get]] of \"length\" uses [[ArrayLength]]\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >[[Get]] of \"length\" uses [[ArrayLength]]\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.includes", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.join", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n5. If len is zero, return the empty String.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/length/prop-desc.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " >\"length\" property of TypedArrayPrototype\n", "info": " |%TypedArray%.prototype.length is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-negative-integer-offset-throws.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Throw a RangeError exception if targetOffset < 0\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n7. If targetOffset < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-target-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n10. Let targetLength be the value of target's [[ArrayLength]] internal slot.\n...\n17. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-negative-integer-offset-throws.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Throw a RangeError exception if targetOffset < 0\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n7. If targetOffset < 0, throw a RangeError exception.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-other-type-conversions-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set converted values from different buffer of different types and different type instances\n", "includes": ["byteConversionValues.js", "testTypedArray.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-other-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and different\ntype.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-same-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and same\nconstructor. srcBuffer values are cached.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-same-buffer-same-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the same buffer and same\nconstructor. srcBuffer values are cached.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-src-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses typedArray's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n20. Let srcLength be the value of typedArray's [[ArrayLength]] internal slot.\n...\n22. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-src-byteoffset-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses typedArray's internal [[ByteOffset]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n21. Let srcByteOffset be typedArray.[[ByteOffset]].\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-target-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n2. Let target be the this value.\n...\n10. Let targetLength be the value of target's [[ArrayLength]] internal slot.\n...\n22. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-target-byteoffset-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n2. Let target be the this value.\n...\n16. Let targetByteOffset be target.[[ByteOffset]].\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Use internal ArrayLength instead of getting a length property", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.some", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.sort", "description": " Use internal ArrayLength instead of getting a length property", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\n...\n3. Let len be the value of obj's [[ArrayLength]] internal slot.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-ctor-abrupt.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Return abrupt from SpeciesConstructor's get Constructor", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-ctor-inherited.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " get inherited constructor on SpeciesConstructor", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-ctor-returns-throws.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Throws if O.constructor returns a non-Object and non-undefined value\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-ctor.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " get constructor on SpeciesConstructor", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-species-abrupt.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Returns abrupt from get @@species on found constructor\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-species-custom-ctor-invocation.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Verify arguments on custom @@species construct call\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-species-custom-ctor-returns-another-instance.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Custom @@species constructor may return a totally different TypedArray\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-species-custom-ctor-throws.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Custom @@species constructor throws if it does not return a compatible object\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-species-custom-ctor.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Use custom @@species constructor if available\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-species-returns-throws.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Throws if returned @@species is not a constructor, null or undefined.\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-species.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >get @@species from found constructor\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/calls-tolocalestring-from-each-value.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Calls toLocaleString from each property's value", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/calls-tostring-from-each-value.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Calls toString from each property's value return from toLocaleString \n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/calls-valueof-from-each-value.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Calls valueOf from each property's value return from toLocaleString \n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": "  Get \"length\" uses internal ArrayLength", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n1. Let array be ? ToObject(this value).\n2.Let len be ? ToLength(? Get(array, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/return-abrupt-from-firstelement-tolocalestring.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Returns abrupt from firstElement's toLocaleString", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n4. If len is zero, return the empty String.\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/return-abrupt-from-firstelement-tostring.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Return abrupt from firstElement's toLocaleString => toString\n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/return-abrupt-from-firstelement-valueof.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Return abrupt from firstElement's toLocaleString => valueOf\n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/return-abrupt-from-nextelement-tolocalestring.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Returns abrupt from a nextElement's toLocaleString", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/return-abrupt-from-nextelement-tostring.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Return abrupt from nextElement's toLocaleString => valueOf\n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/return-abrupt-from-nextelement-valueof.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Return abrupt from nextElement's toLocaleString => valueOf\n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/bufferbyteoffset-throws-from-modulo-element-size-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if bufferByteLength modulo elementSize \u2260 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n\nLet elementSize be the Number value of the Element Size value in Table 56 for constructorName.*\n...\nIf length is either not present or undefined, then\na. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.\n...\n\n* Int8Array, Uint8Array, Uint8ClampedArray all have element size 1, so will never fail.\n\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-negative-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) is < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n8. If offset < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-negative-zero-sab.js", "esid": " pending", "description": " >TypedArray's [[ByteOffset]] internal slot is always a positive number, test with negative zero.\n", "info": " |%TypedArray% ( buffer [ , byteOffset [ , length ] ] )\n\n...\n6. Let offset be ? ToInteger(byteOffset).\n7. If offset < 0, throw a RangeError exception.\n8. If offset is -0, let offset be +0.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-symbol-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset as a symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-throws-from-modulo-element-size-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) modulo elementSize is not 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n\nLet elementSize be the Number value of the Element Size value in Table 56 for constructorName.*\n\n...\nIf offset modulo elementSize \u2260 0, throw a RangeError exception.\n...\n\n* Int8Array, Uint8Array, Uint8ClampedArray all have element size 1, so will never fail.\n\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-to-number-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/custom-proto-access-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt completion getting newTarget's prototype\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-length-and-offset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined length and offset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-length-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined length\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-negative-length-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws RangeError for negative ToInteger(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-offset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined offset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/excessive-length-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >If offset + newByteLength > bufferByteLength, throw a RangeError exception.\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\nb. Let newByteLength be newLength \u00d7 elementSize.\nc. If offset+newByteLength > bufferByteLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/excessive-offset-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if bufferByteLength - ToInteger(byteOffset) < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n13. If length is undefined, then\na. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.\nb. Let newByteLength be bufferByteLength - offset.\nc. If newByteLength < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/invoked-with-undefined-newtarget-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n2. If NewTarget is undefined, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/is-referenced-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Reuse buffer argument instead of making a new clone\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n15. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/length-access-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Returns abrupt from ToLength(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/length-is-symbol-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if length is a Symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/new-instance-extensibility-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >The new typedArray instance from a buffer argument is extensible\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/returns-new-instance-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from undefined offset and length\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/toindex-bytelength-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >ToIndex(length) operations\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n11. If length is either not present or undefined, then\n...\n12. Else,\na. Let newLength be ? ToIndex(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/toindex-byteoffset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >ToIndex(byteOffset) operations\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToIndex(byteOffset).\n8. If offset modulo elementSize \u2260 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/typedarray-backed-by-sharedarraybuffer.js", "esid": " sec-typedarray-typedarray", "description": " >Passing a SharedArrayBuffer-backed TypedArray to a TypedArray constructor\nproduces an ArrayBuffer-backed TypedArray.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/use-custom-proto-if-object-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Use prototype from new target if it's an Object\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/use-default-proto-if-custom-proto-is-not-object-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Use prototype from %TypedArray% if newTarget's prototype is not an Object\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/length-arg/is-symbol-throws.js", "esid": " sec-typedarray-length", "description": " >If length is a Symbol, throw a TypeError exception.\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n4. Let numberLength be ? ToNumber(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/length-arg/toindex-length.js", "esid": " sec-typedarray-length", "description": " >ToIndex(length) operations\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n3. Let elementLength be ? ToIndex(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-greater-than-last-index.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is >= [[ArrayLength]]\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nii. Let intIndex be numericIndex.\n...\nv. Let length be the value of O's [[ArrayLength]] internal slot.\nvi. If intIndex \u2265 length, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-lower-than-zero.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is < 0\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nii. Let intIndex be numericIndex.\niv. If intIndex < 0, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-minus-zero.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is \"-0\"\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. If IsInteger(numericIndex) is false, return false.\nii. Let intIndex be numericIndex.\niii. If intIndex = -0, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is not an integer\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. If IsInteger(numericIndex) is false, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-numericindex-desc-not-writable.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if key is a numeric index and Desc.[[Writable]] is false\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nx. If Desc has a [[Writable]] field and if Desc.[[Writable]] is false,\nreturn false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/indexed-value-sab-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return value from valid numeric index, with SharedArrayBuffer\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/indexed-value-sab-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Throws TypeError exception in strict mode.\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/indexed-value-sab-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return value from valid numeric index, with SharedArrayBuffer\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/indexed-value-sab-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Throws TypeError exception in strict mode.\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/indexed-value-sab.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return value from valid numeric index, with SharedArrayBuffer\n", "includes": ["testTypedArray.js"], "features": ["TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/parseFloat/S15.1.2.3_A2_T10_U180E.js", "esid": " sec-parsefloat-string", "description": " >Leading U+180E is not recognized as whitespace\n", "info": " |18.2.4 parseFloat (string)\n\n...\n3. Let trimmedString be a substring of inputString consisting of the\nleftmost code unit that is not a StrWhiteSpaceChar and all code units\nto the right of that code unit. (In other words, remove leading white\nspace.) If inputString does not contain any such code units, let\ntrimmedString be the empty string.\n4. If neither trimmedString nor any prefix of trimmedString satisfies the\nsyntax of a StrDecimalLiteral (see 7.1.3.1), return NaN.\n...\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/parseInt/S15.1.2.2_A2_T10_U180E.js", "esid": " sec-parseint-string-radix", "description": " >Leading U+180E is not recognized as whitespace\n", "info": " |18.2.5 parseInt (string , radix)\n\n...\n3. Let S be a newly created substring of inputString consisting of the\nfirst code unit that is not a StrWhiteSpaceChar and all code units\nfollowing that code unit. (In other words, remove leading white\nspace.) If inputString does not contain any such code unit, let S\nbe the empty string\n...\n13. If S contains a code unit that is not a radix-R digit, let Z be\nthe substring of S consisting of all code units before the first\nsuch code unit; otherwise, let Z be S.\n14. If Z is empty, return NaN.\n...\n", "features": ["u180e"]}, {"path": "./test262-main/test/intl402/Collator/ignore-invalid-unicode-ext-values.js", "version": 5, "esid": " 10.2.3_b", "description": " >Tests that Intl.Collator does not accept Unicode localeextension\nkeys and values that are not allowed.\n", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Collator/legacy-regexp-statics-not-modified.js", "version": 5, "esid": " 10.1.1_a", "description": " >Tests that constructing a Collator doesn't create or modify\nunwanted properties on the RegExp constructor.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/compare-function-name.js", "esid": " sec-Intl.Collator.prototype.compare", "description": " >The bound Collator compare function is an anonymous function.\n", "info": " |10.3.3 get Intl.Collator.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/name.js", "esid": " sec-Intl.Collator.prototype.compare", "description": " >get Intl.Collator.prototype.compare.name is \"get compare\".\n", "info": " |10.3.3 get Intl.Collator.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/resolvedOptions/basic.js", "version": 5, "esid": " 10.3.3", "description": " >Tests that the object returned by\nIntl.Collator.prototype.resolvedOptionshas the right properties.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js", "propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/supportedLocalesOf/taint-Object-prototype.js", "version": 5, "esid": " 10.2.2_b", "description": " >Tests that Intl.Collator.supportedLocalesOfdoesn't access\narguments that it's not given.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Collator/taint-Object-prototype.js", "version": 5, "esid": " 10.1.1_10", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Collator/test-option-ignorePunctuation.js", "version": 5, "esid": " 10.1.1_23", "description": " Tests that the option ignorePunctuation is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Collator/test-option-localeMatcher.js", "version": 5, "esid": " 10.1.1_11", "description": " Tests that the option localeMatcher is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Collator/test-option-numeric-and-caseFirst.js", "version": 5, "esid": " 10.1.1_13", "description": " >Tests that the options numeric and caseFirst are processed\ncorrectly.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Collator/test-option-sensitivity.js", "version": 5, "esid": " 10.1.1_20", "description": " Tests that the option sensitivity is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Collator/test-option-usage.js", "version": 5, "esid": " 10.1.1_6", "description": " Tests that the option usage is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Collator/this-value-ignored.js", "version": 5, "esid": " 10.1.1_1", "description": " Tests that the this-value is ignored in Collator.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Date/prototype/taint-Intl-DateTimeFormat.js", "version": 5, "esid": " 13.3.0_6_2", "description": " >Tests that Date.prototype.toLocaleString & Co. use the standard\nbuilt-in Intl.DateTimeFormat constructor.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/date-time-options.js", "version": 5, "esid": " 12.1.1_TDTO", "description": " >Tests that the set of options for the date and time components is\nprocessed correctly.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/legacy-regexp-statics-not-modified.js", "version": 5, "esid": " 12.1.1_a", "description": " >Tests that constructing a DateTimeFormat doesn't create or modify\nunwanted properties on the RegExp constructor.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/numbering-system-calendar-options.js", "esid": " sec-initializedatetimeformat", "description": " >Tests that the options numberingSystem and calendar can beset through\neither the locale or the options.\n", "author": " Norbert Lindenberg, Daniel Ehrenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-length.js", "esid": " sec-intl.datetimeformat.prototype.format", "description": " >The length of the bound DateTime Format function is 1.\n", "info": " |get Intl.DateTimeFormat.prototype.format\n\n...\n4. If dtf.[[BoundFormat]] is undefined, then\na. Let F be a new built-in function object as defined in DateTime Format Functions (12.1.5).\nb. Let bf be BoundFunctionCreate(F, dft, \u00ab \u00bb).\nc. Perform ! DefinePropertyOrThrow(bf, \"length\", PropertyDescriptor {[[Value]]: 1,\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n...\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-name.js", "esid": " sec-Intl.DateTimeFormat.prototype.format", "description": " >The bound DateTimeFormat format function is an anonymous function.\n", "info": " |12.4.3 get Intl.DateTimeFormat.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/name.js", "esid": " sec-Intl.DateTimeFormat.prototype.format", "description": " >get Intl.DateTimeFormat.prototype.format.name is \"get format\".\n", "info": " |12.4.3 get Intl.DateTimeFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/taint-Object-prototype.js", "version": 5, "esid": " 12.3.2_TLT_2", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/date-constructor-not-called.js", "esid": " sec-partitiondatetimepattern", "description": " |The Date constructor is not called to convert the input value.\n", "info": " >12.4.4 Intl.DateTimeFormat.prototype.formatToParts ( date )\n\n...\n4. If date is undefined, then\n...\n5. Else,\na. Let x be ? ToNumber(date).\n5. Return ? FormatDateTimeToParts(dtf, x).\n\n12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. ...\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/date-is-infinity-throws.js", "description": " >Throws a RangeError if date arg is cast to an Infinity value\n", "info": " |Intl.DateTimeFormat.prototype.formatToParts ([ date ])\n\n4. If _date_ is not provided or is *undefined*, then\na. Let _x_ be *%Date_now%*().\n5. Else,\na. Let _x_ be ? ToNumber(_date_).\n6. Return ? FormatDateTimeToParts(_dtf_, _x_).\n\nFormatDateTimeToParts(dateTimeFormat, x)\n\n1. Let _parts_ be ? PartitionDateTimePattern(_dateTimeFormat_, _x_).\n\nPartitionDateTimePattern (dateTimeFormat, x)\n\n1. If _x_ is not a finite Number, throw a *RangeError* exception.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/date-is-nan-throws.js", "description": " >Throws a RangeError if date arg is cast to NaN\n", "info": " |Intl.DateTimeFormat.prototype.formatToParts ([ date ])\n\n4. If _date_ is not provided or is *undefined*, then\na. Let _x_ be *%Date_now%*().\n5. Else,\na. Let _x_ be ? ToNumber(_date_).\n6. Return ? FormatDateTimeToParts(_dtf_, _x_).\n\nFormatDateTimeToParts(dateTimeFormat, x)\n\n1. Let _parts_ be ? PartitionDateTimePattern(_dateTimeFormat_, _x_).\n\nPartitionDateTimePattern (dateTimeFormat, x)\n\n1. If _x_ is not a finite Number, throw a *RangeError* exception.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/formatToParts.js", "description": " Property type and descriptor. ", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/length.js", "description": " Intl.DateTimeFormat.prototype.formatToParts.length. ", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/name.js", "description": " Intl.DateTimeFormat.prototype.formatToParts.name value and descriptor. ", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/pattern-on-calendar.js", "esid": " sec-initializedatetimeformat", "description": " >Checks the DateTimeFormat choose different patterns based\non calendar.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/return-abrupt-tonumber-date.js", "description": " >Return abrupt completions from ToNumber(date)\n", "info": " |Intl.DateTimeFormat.prototype.formatToParts ([ date ])\n\n4. If _date_ is not provided or is *undefined*, then\na. Let _x_ be *%Date_now%*().\n5. Else,\na. Let _x_ be ? ToNumber(_date_).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/time-clip-to-integer.js", "esid": " sec-partitiondatetimepattern", "description": " |TimeClip applies ToInteger on its input value.\n", "info": " >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. ...\n\n20.3.1.15 TimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/basic.js", "version": 5, "esid": " 12.3.3", "description": " >Tests that the object returned by\nIntl.DateTimeFormat.prototype.resolvedOptionshas the right\nproperties.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js", "propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/required-date-time-formats.js", "version": 5, "esid": " 12.2.3_c", "description": " >Tests that Intl.DateTimeFormat provides the required date-time\nformat component subsets.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/taint-Object-prototype.js", "version": 5, "esid": " 12.2.2_b", "description": " >Tests that Intl.DateTimeFormat.supportedLocalesOfdoesn't access\narguments that it's not given.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/taint-Object-prototype-date-time-components.js", "version": 5, "esid": " 12.1.1_22", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/taint-Object-prototype-dayPeriod.js", "esid": " sec-initializedatetimeformat", "description": " >Tests that the behavior of a Record is not affected by\nadversarial changes to Object.prototype.\n", "includes": ["testIntl.js"], "features": ["Intl.DateTimeFormat-dayPeriod"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/taint-Object-prototype-fractionalSecondDigits.js", "esid": " sec-initializedatetimeformat", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "includes": ["testIntl.js"], "features": ["Intl.DateTimeFormat-fractionalSecondDigits"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/taint-Object-prototype.js", "version": 5, "esid": " 12.1.1_5", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/test-option-date-time-components.js", "version": 5, "esid": " 12.1.1_23", "description": " >Tests that the options for the date and time components are\nprocessed correctly.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/test-option-formatMatcher.js", "version": 5, "esid": " 12.1.1_25", "description": " Tests that the option formatMatcher is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/test-option-hour12.js", "version": 5, "esid": " 12.1.1_18", "description": " Tests that the option hour12 is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/test-option-localeMatcher.js", "version": 5, "esid": " 12.1.1_6", "description": " Tests that the option localeMatcher is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/this-value-ignored.js", "esid": " sec-intl-datetimeformat-constructor", "description": " >Tests that the this-value is ignored in DateTimeFormat, if the this-value\nisn't a DateTimeFormat instance.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/canonicalized-unicode-ext-seq.js", "esid": " sec-intl.getcanonicallocales", "description": " >Implementations are allowed to canonicalize extension subtag sequences.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. Let canonicalizedTag be CanonicalizeLanguageTag(tag).\n...\n\n6.2.3 CanonicalizeLanguageTag (locale)\nThe specifications for extensions to BCP 47 language tags, such as\nRFC 6067, may include canonicalization rules for the extension subtag\nsequences they define that go beyond the canonicalization rules of\nRFC 5646 section 4.5. Implementations are allowed, but not required,\nto apply these additional rules.\n"}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/descriptor.js", "esid": " sec-intl.getcanonicallocales", "description": " >Intl.getCanonicalLocales property attributes.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n\n17 ECMAScript Standard Built-in Objects:\nEvery other data property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/duplicates.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests the getCanonicalLocales function for duplicate locales scenario.", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/elements-not-reordered.js", "esid": " sec-intl.getcanonicallocales", "description": " >Language tags are not reordered.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nvi. If canonicalizedTag is not an element of seen, append canonicalizedTag as the last element of seen.\n...\n"}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/error-cases.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests the getCanonicalLocales function for error tags.", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/get-locale.js", "esid": " sec-intl.getcanonicallocales", "description": " Test Intl.getCanonicalLocales for step 7.c.i. ", "info": " |9.2.1 CanonicalizeLocaleList (locales)\n7. Repeat, while k < len.\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\n"}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/getCanonicalLocales.js", "esid": " sec-intl.getcanonicallocales", "description": " Property type and descriptor. ", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/has-property.js", "esid": " sec-intl.getcanonicallocales", "description": " Test Intl.getCanonicalLocales.name for step 7.b. ", "info": " |9.2.1 CanonicalizeLocaleList (locales)\n7. Repeat, while k < len.\nb. Let kPresent be HasProperty(O, Pk).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/length.js", "esid": " sec-intl.getcanonicallocales", "description": " Intl.getCanonicalLocales.length. ", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/locales-is-not-a-string.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests for scenario where locales is not a string", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["compareArray.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/main.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests for existance and behavior of Intl.getCanonicalLocales", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/name.js", "esid": " sec-intl.getcanonicallocales", "description": " Intl.getCanonicalLocales.name value and descriptor. ", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/overriden-arg-length.js", "esid": " sec-intl.getcanonicallocales", "description": " Test Intl.getCanonicalLocales for step 5. ", "info": " |9.2.1 CanonicalizeLocaleList (locales)\n5. Let len be ? ToLength(? Get(O, \"length\")).\n", "includes": ["compareArray.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/overriden-push.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests the getCanonicalLocales function for overridden Array.push().", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/returned-object-is-an-array.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests that the value returned by getCanonicalLocales is an Array.", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n"}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/returned-object-is-mutable.js", "esid": " sec-intl.getcanonicallocales", "description": " >Tests that the value returned by getCanonicalLocales is a mutable array.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/to-string.js", "esid": " sec-intl.getcanonicallocales", "description": " Test Intl.getCanonicalLocales.name for step 7.c.iii ", "info": " |9.2.1 CanonicalizeLocaleList (locales)\n7. Repeat, while k < len.\nc. If kPresent is true, then\niii. Let tag be ? ToString(kValue).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/transformed-ext-valid.js", "esid": " sec-intl.getcanonicallocales", "description": " >No RangeError is thrown when a language tag includes a valid transformed extension subtag.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-calendar.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"ca\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-col-strength.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"ks\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-measurement-system.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"ms\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-timezone.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"tz\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/weird-cases.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests the getCanonicalLocales function for weird tags.", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Number/prototype/toLocaleString/taint-Intl-NumberFormat.js", "version": 5, "esid": " 13.2.1_4_2", "description": " >Tests that Number.prototype.toLocaleString uses the standard\nbuilt-in Intl.NumberFormat constructor.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/default-minimum-singificant-digits.js", "description": " Tests that the default value of minimumSignificantDigits is 1.", "esid": " sec-setnfdigitoptions"}, {"path": "./test262-main/test/intl402/NumberFormat/fraction-digit-options-read-once.js", "esid": " sec-setnfdigitoptions", "description": " >The maximum and minimum fraction digits properties should be read from\nthe options bag exactly once from the NumberFormat constructor.\n", "info": " Regression test for https"}, {"path": "./test262-main/test/intl402/NumberFormat/legacy-regexp-statics-not-modified.js", "version": 5, "esid": " 11.1.1_a", "description": " >Tests that constructing a NumberFormat doesn't create or modify\nunwanted properties on the RegExp constructor.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/numbering-system-options.js", "esid": " sec-initializenumberformat", "description": " >Tests that the options numberingSystem and calendar can beset through\neither the locale or the options.\n", "author": " Norbert Lindenberg, Daniel Ehrenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-fraction-digits-precision.js", "version": 5, "esid": " 11.3.2_TRF", "description": " >Tests that the digits are determined correctly when specifying\npre/post decimal digits.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-function-name.js", "esid": " sec-Intl.NumberFormat.prototype.format", "description": " >The bound NumberFormat format function is an anonymous function.\n", "info": " |11.4.3 get Intl.NumberFormat.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-significant-digits-precision.js", "version": 5, "esid": " 11.3.2_TRP", "description": " >Tests that the digits are determined correctly when specifying\nsignificant digits.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/name.js", "esid": " sec-Intl.NumberFormat.prototype.format", "description": " >get Intl.NumberFormat.prototype.format.name is \"get format\".\n", "info": " |11.4.3 get Intl.NumberFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/basic.js", "version": 5, "esid": " 11.3.3", "description": " >Tests that the object returned by\nIntl.NumberFormat.prototype.resolvedOptionshas the right\nproperties.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js", "propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/significant-digits-options-get-sequence.js", "version": 5, "esid": " 11.1.1_32", "description": " >Tests that the options minimumSignificantDigits and\nmaximumSignificantDigits are read in the right sequence.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/supportedLocalesOf/taint-Object-prototype.js", "version": 5, "esid": " 11.2.2_b", "description": " >Tests that Intl.NumberFormat.supportedLocalesOfdoesn't access\narguments that it's not given.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/taint-Object-prototype.js", "version": 5, "esid": " 11.1.1_6", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/test-option-currencyDisplay.js", "version": 5, "esid": " 11.1.1_21", "description": " Tests that the option currencyDisplay is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/test-option-localeMatcher.js", "version": 5, "esid": " 11.1.1_7", "description": " Tests that the option localeMatcher is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/test-option-style.js", "version": 5, "esid": " 11.1.1_15", "description": " Tests that the option style is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/test-option-useGrouping.js", "version": 5, "esid": " 11.1.1_34", "description": " Tests that the option useGrouping is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/this-value-ignored.js", "esid": " sec-intl-numberformat-constructor", "description": " >Tests that the this-value is ignored in NumberFormat, if the this-value\nisn't a NumberFormat instance.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/PluralRules/undefined-newtarget-throws.js", "esid": " sec-Intl.PluralRules", "description": " Tests that PluralRules throws when called as a function", "author": " Zibi Braniecki", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/String/prototype/localeCompare/taint-Intl-Collator.js", "version": 5, "esid": " 13.1.1_6_2", "description": " >Tests that String.prototype.localeCompare uses the standard\nbuilt-in Intl.Collator constructor.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Azeri.js", "description": " >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Azeri)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Lithuanian.js", "description": " >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Lithuanian)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Turkish.js", "description": " >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Turkish)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Azeri.js", "description": " >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Azeri)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.21"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Lithuanian.js", "description": " >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Lithuanian)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.21"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Turkish.js", "description": " >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Turkish)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.21"}, {"path": "./test262-main/test/intl402/constructors-string-and-single-element-array.js", "version": 5, "esid": " 9.2.1_3", "description": " >Tests that a single string instead of a locale list is treatedas\nthe locale list containing that string.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/constructors-taint-Object-prototype-2.js", "version": 5, "esid": " 9.2.5_6", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/constructors-taint-Object-prototype.js", "version": 5, "esid": " 9.2.3_5", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/default-locale-is-canonicalized.js", "version": 5, "esid": " 6.2.4", "description": " >Tests that the default locale is a String value representing the\nstructurally valid and canonicalized BCP 47 language tag.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/fallback-locales-are-supported.js", "version": 5, "esid": " 9.1_b", "description": " >Tests that appropriate fallback locales are provided for\nsupported locales.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/language-tags-canonicalized.js", "version": 5, "esid": " 6.2.3", "description": " Tests that language tags are canonicalized in return values.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/language-tags-valid.js", "version": 5, "esid": " 6.2.2_a", "description": " Tests that structurally valid language tags are accepted.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/language-tags-with-underscore.js", "version": 5, "esid": " 6.2.2_b", "description": " Tests that language tags with \"_\" are not accepted.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-consistent-with-resolvedOptions.js", "version": 5, "esid": " 9.2.2", "description": " >Tests that locales that are reported by resolvedOptionsare also\nreported by supportedLocalesOf.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-duplicate-elements-removed.js", "version": 5, "esid": " 9.2.1_8_c_vi", "description": " >Tests that canonicalization of locale lists removes duplicate\nlanguage tags.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-empty-and-undefined.js", "version": 5, "esid": " 9.2.1_1", "description": " >Tests that canonicalization of locale lists treats undefined and\nempty lists the same.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-locales-arg-coered-to-object.js", "version": 5, "esid": " 9.2.1_4", "description": " >Tests that non-objects are converted to objects before\ncanonicalization.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-locales-arg-empty-array.js", "version": 5, "esid": " 9.2.6_4", "description": " >Tests that LookupSupportedLocales returns an empty list when\ngiven an empty list.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-taint-Array-2.js", "version": 5, "esid": " 9.2.6_2", "description": " >Tests that the behavior of a List is not affected by adversarial\nchanges to Array.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-taint-Array.js", "version": 5, "esid": " 9.2.1_2", "description": " >Tests that the behavior of a List is not affected by adversarial\nchanges to Array.prototype.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-test-option-localeMatcher.js", "version": 5, "esid": " 9.2.8_1_c", "description": " Tests that the option localeMatcher is processed correctly.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-throws-if-element-not-string-or-object.js", "version": 5, "esid": " 9.2.1_8_c_ii", "description": " Tests that values other than strings are not accepted as locales.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-unicode-extensions-ignored.js", "version": 5, "esid": " 9.2.6_4_b", "description": " >Tests that Unicode locale extension sequences do not affect\nwhether a locale is considered supported, but are reported back.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-static-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-static-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-static-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-static-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-gen-meth-static-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (class declaration generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-static-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (static class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-static-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (static class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-static-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (static class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-static-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (static class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-decl-meth-static-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (static class declaration method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-static-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (static class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-static-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (static class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-static-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (static class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-static-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (static class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-gen-meth-static-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (static class expression generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-static-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (static class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-static-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (static class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-static-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (static class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-static-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (static class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/cls-expr-meth-static-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (static class expression method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-decl-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (function declaration)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-decl-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (function declaration)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-decl-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (function declaration)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-decl-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (function declaration)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-decl-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (function declaration)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-expr-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (function expression)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-expr-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (function expression)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-expr-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (function expression)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-expr-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (function expression)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/func-expr-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (function expression)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-decl-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (generator function declaration)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-decl-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (generator function declaration)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-decl-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (generator function declaration)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-decl-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (generator function declaration)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-decl-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (generator function declaration)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-expr-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (generator function expression)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-expr-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (generator function expression)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-expr-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (generator function expression)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-expr-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (generator function expression)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-func-expr-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (generator function expression)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-meth-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-meth-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-meth-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-meth-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/gen-meth-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (generator method)", "esid": " sec-arguments-exotic-objects", "features": ["generators"], "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/meth-args-trailing-comma-multiple.js", "description": " A trailing comma should not increase the arguments.length, using multiple args (method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/meth-args-trailing-comma-null.js", "description": " A trailing comma after null should not increase the arguments.length (method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/meth-args-trailing-comma-single-args.js", "description": " A trailing comma should not increase the arguments.length, using a single arg (method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/meth-args-trailing-comma-spread-operator.js", "description": " A trailing comma should not increase the arguments.length, using spread args (method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/arguments-object/meth-args-trailing-comma-undefined.js", "description": " A trailing comma after undefined should not increase the arguments.length (method)", "esid": " sec-arguments-exotic-objects", "flags": ["generated"], "info": " |9.4.4 Arguments Exotic Objects\n\nMost ECMAScript functions make an arguments object available to their code. Depending upon the\ncharacteristics of the function definition, its arguments object is either an ordinary object\nor an arguments exotic object.\n\nTrailing comma in the arguments list\n\nLeft-Hand-Side Expressions\n\nArguments :\n( )\n( ArgumentList )\n( ArgumentList , )\n\nArgumentList :\nAssignmentExpression\n... AssignmentExpression\nArgumentList , AssignmentExpression\nArgumentList , ... AssignmentExpression\n"}, {"path": "./test262-main/test/language/eval-code/direct/var-env-lower-lex-non-strict.js", "esid": " sec-evaldeclarationinstantiation", "description": " Variable collision with lexical binding in lower scope", "info": " |[...]\n5. If strict is false, then\n[...]\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n[...]\n", "flags": ["noStrict"], "features": ["let"]}, {"path": "./test262-main/test/language/expressions/array/spread-err-mult-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-sngl-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-mult-obj-ident.js", "description": " Object Spread operator following other properties (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-mult-obj-null.js", "description": " Object Spread operator following other arguments with null value (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-mult-obj-undefined.js", "description": " Object Spread operator following other arguments with undefined (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-getter-descriptor.js", "description": " Spread operation with getter results in data property descriptor (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-getter-init.js", "description": " Getter in object literal is not evaluated (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-manipulate-outter-obj-in-getter.js", "description": " Getter manipulates outter object before it's spread operation (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-mult-spread-getter.js", "description": " Multiple Object Spread usage calls getter multiple times (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-mult-spread.js", "description": " Multiple Object Spread operation (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-null.js", "description": " Null Object Spread is ignored (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-override-immutable.js", "description": " Object Spread overriding immutable properties (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-overrides-prev-properties.js", "description": " Object Spread properties overrides previous definitions (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-skip-non-enumerable.js", "description": " Object Spread doesn't copy non-enumerable properties (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-spread-order.js", "description": " Spread operation follows [[OwnPropertyKeys]] order (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-symbol-property.js", "description": " Spread operation where source object contains Symbol properties (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-undefined.js", "description": " Undefined Object Spread is ignored (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-with-overrides.js", "description": " Object Spread properties being overriden (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-sngl-obj-ident.js", "description": " Object Spread operator without other arguments (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/scope-body-lex-distinct.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["let"]}, {"path": "./test262-main/test/language/expressions/assignment/destructuring/obj-prop-__proto__dup.js", "esid": " 12.14.5", "version": 6, "description": " Duplicate __proto__ property names", "info": " |Annex B defines an early error for duplicate PropertyName of `__proto__`,\nin object initializers, but this does not apply to Object Assignment\npatterns\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-thrw-close-skip.js", "description": " Abrupt completion returned during iteration for rest element (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-thrw-close-skip.js", "description": " IteratorClose is not called when iteration produces an abrupt completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-computed-property-no-strict.js", "description": " Destructuring field can be a computed property, i.e it can be defined only at runtime. Rest operantion needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated", "noStrict"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-computed-property.js", "description": " Destructuring field can be a computed property, i.e it can be defined only at runtime. Rest operantion needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-descriptors.js", "description": " Object created from rest deconstruction doesn't copy source object property descriptors. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-empty-obj.js", "description": " RestBindingInitialization creates a new object even if lhs is an empty object (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-getter-abrupt-get-error.js", "description": " Rest deconstruction doesn't happen if getter return is abrupt (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-1dot.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-1dot0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-1e0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-array-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-array-1e0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-string-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-number.js", "description": " RestBindingInitialization creates a new object even if lhs is a Number (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-order.js", "description": " Rest operation follows [[OwnPropertyKeys]] order (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol", "object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-put-const.js", "description": " The object rest deconstruction assignment target should obey `const` semantics. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-same-name.js", "description": " Proper setting in the values for rest name equal to a property name. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-str-val.js", "description": " RestBindingInitialization creats an object with indexes as property name (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-symbol-val.js", "description": " RestBindingInitialization creates a new object if lhs is a Symbol (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol", "object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-to-property-with-setter.js", "description": " When DestructuringAssignmentTarget is an object property setter, its value should be binded as rest object. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-to-property.js", "description": " When DestructuringAssignmentTarget is an object property, its value should be binded as rest object. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-val-null.js", "description": " TypeError is thrown when rhs is null because of 7.1.13 ToObject ( argument ) used by CopyDataProperties (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-val-undefined.js", "description": " TypeError is thrown when rhs is ```undefined``` because of 7.1.13 ToObject ( argument ) used by CopyDataProperties (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-valid-object.js", "description": " Rest object contains just unextracted data (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-arrow-function/name.js", "esid": " sec-async-arrow-function-definitions-runtime-semantics-evaluation", "description": " Assignment of function `name` attribute", "info": " |AsyncArrowFunction : async AsyncArrowBindingIdentifier => AsyncConciseBody\n\n1. Let scope be the LexicalEnvironment of the running execution context.\n2. Let parameters be AsyncArrowBindingIdentifier.\n3. Let closure be ! AsyncFunctionCreate(Arrow, parameters, AsyncConciseBody,\nscope, \"\").\n...\n5. Return closure.\n\nAsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\n\n1. Let scope be the LexicalEnvironment of the running execution context.\n2. Let head be CoveredAsyncArrowHead of CoverCallExpressionAndAsyncArrowHead.\n3. Let parameters be the ArrowFormalParameters of head.\n4. Let closure be ! AsyncFunctionCreate(Arrow, parameters, AsyncConciseBody,\nscope, \"\").\n...\n6. Return closure. \n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/async-function/expression-returns-promise.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Async function expressions return promises\n"}, {"path": "./test262-main/test/language/expressions/async-function/name.js", "esid": " sec-async-function-definitions-runtime-semantics-evaluation", "description": " Assignment of function `name` attribute", "info": " |AsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }\n\n1. Let scope be the LexicalEnvironment of the running execution context.\n2. Let closure be ! AsyncFunctionCreate(Normal, FormalParameters,\nAsyncFunctionBody, scope, \"\").\n...\n4. Return closure.\n\nAsyncFunctionExpression : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\n\n1. Let scope be the running execution context's LexicalEnvironment.\n2. Let funcEnv be ! NewDeclarativeEnvironment(scope).\n3. Let envRec be funcEnv's EnvironmentRecord.\n4. Let name be StringValue of BindingIdentifier.\n5. Perform ! envRec.CreateImmutableBinding(name).\n6. Let closure be ! AsyncFunctionCreate(Normal, FormalParameters,\nAsyncFunctionBody, funcEnv, name).\n...\n9. Return closure.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/async-function/syntax-expression-is-PrimaryExpression.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Async function expressions are PrimaryExpressions\n"}, {"path": "./test262-main/test/language/expressions/await/await-BindingIdentifier-in-global.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Await is allowed as a binding identifier in global scope\n"}, {"path": "./test262-main/test/language/expressions/await/await-in-nested-function.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Await is allowed as an identifier in functions nested in async functions\n"}, {"path": "./test262-main/test/language/expressions/await/await-in-nested-generator.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Await is allowed as an identifier in generator functions nested in async functions\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/await/await-throws-rejections.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Await throws errors from rejected promises\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-obj-ident.js", "description": " Object Spread operator following other properties (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-obj-null.js", "description": " Object Spread operator following other arguments with null value (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-obj-undefined.js", "description": " Object Spread operator following other arguments with undefined (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-getter-descriptor.js", "description": " Spread operation with getter results in data property descriptor (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-getter-init.js", "description": " Getter in object literal is not evaluated (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-manipulate-outter-obj-in-getter.js", "description": " Getter manipulates outter object before it's spread operation (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-mult-spread-getter.js", "description": " Multiple Object Spread usage calls getter multiple times (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-mult-spread.js", "description": " Multiple Object Spread operation (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-null.js", "description": " Null Object Spread is ignored (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-override-immutable.js", "description": " Object Spread overriding immutable properties (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-overrides-prev-properties.js", "description": " Object Spread properties overrides previous definitions (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-skip-non-enumerable.js", "description": " Object Spread doesn't copy non-enumerable properties (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-spread-order.js", "description": " Spread operation follows [[OwnPropertyKeys]] order (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-symbol-property.js", "description": " Spread operation where source object contains Symbol properties (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-undefined.js", "description": " Undefined Object Spread is ignored (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-with-overrides.js", "description": " Object Spread properties being overriden (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-sngl-obj-ident.js", "description": " Object Spread operator without other arguments (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/trailing-comma.js", "description": " >Check that trailing commas are permitted after spread arguments\nin a call expression.\n", "info": " http", "author": " Jeff Morrison <lbljeffmo@gmail.com>"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-special-prototype-async-meth-valid.js", "description": " Async Methods can be named \"prototype\" (class expression)", "esid": " prod-ClassElement", "features": ["async-functions", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\nClassTail : ClassHeritage_opt { ClassBody_opt }\n\n[...]\n6. Let proto be OrdinaryObjectCreate(protoParent).\n[...]\n14. Perform MakeConstructor(F, false, proto).\n[...]\n20. For each ClassElement m in order from methods, do\na. If IsStatic of m is false, then\ni. Let status be PropertyDefinitionEvaluation of m with arguments proto and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nWith parameters object and enumerable.\n\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\n\n[...]\n8. Let desc be the PropertyDescriptor { [[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true }.\n9. Return ? DefinePropertyOrThrow(object, propKey, desc).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-static-ctor-async-meth-valid.js", "description": " Static Methods can be named constructor (class expression)", "esid": " prod-ClassElement", "features": ["async-functions", "class"], "flags": ["generated"], "info": " |Class Definitions / Static Semantics: Early Errors\n\nClassElement : MethodDefinition\nIt is a Syntax Error if PropName of MethodDefinition is not \"constructor\" and HasDirectSuper of MethodDefinition is true.\nIt is a Syntax Error if PropName of MethodDefinition is \"constructor\" and SpecialMethod of MethodDefinition is true.\nClassElement : static MethodDefinition\nIt is a Syntax Error if HasDirectSuper of MethodDefinition is true.\nIt is a Syntax Error if PropName of MethodDefinition is \"prototype\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method/yield-spread-obj.js", "description": " Use yield value in a object spread position (Generator method as a ClassExpression element)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\n\nMethodDefinition :\nGeneratorMethod\n\n14.4 Generator Function Definitions\n\nGeneratorMethod :\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method-static/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method-static/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method-static/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method-static/yield-spread-obj.js", "description": " Use yield value in a object spread position (Static generator method as a ClassExpression element)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |ClassElement :\nstatic MethodDefinition\n\nMethodDefinition :\nGeneratorMethod\n\n14.4 Generator Function Definitions\n\nGeneratorMethod :\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/class/heritage-arrow-function.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >Throw a TypeError exception if IsConstructor(superclass) is false (async arrow)\n", "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\nClassTail : ClassHeritage { ClassBody }\n...\n\n5. Else,\nSet the running execution context's LexicalEnvironment to classScope.\nLet superclassRef be the result of evaluating ClassHeritage.\nSet the running execution context's LexicalEnvironment to env.\nLet superclass be ? GetValue(superclassRef).\nIf superclass is null, then\nLet protoParent be null.\nLet constructorParent be %Function.prototype%.\nElse if IsConstructor(superclass) is false, throw a TypeError exception.\n...\n", "features": ["class"]}, {"path": "./test262-main/test/language/expressions/class/heritage-async-arrow-function.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >Throw a TypeError exception if IsConstructor(superclass) is false (async arrow)\n", "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\nClassTail : ClassHeritage { ClassBody }\n...\n\n5. Else,\nSet the running execution context's LexicalEnvironment to classScope.\nLet superclassRef be the result of evaluating ClassHeritage.\nSet the running execution context's LexicalEnvironment to env.\nLet superclass be ? GetValue(superclassRef).\nIf superclass is null, then\nLet protoParent be null.\nLet constructorParent be %Function.prototype%.\nElse if IsConstructor(superclass) is false, throw a TypeError exception.\n...\n", "features": ["class"]}, {"path": "./test262-main/test/language/expressions/class/method/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/method/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/method/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/method-static/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/method-static/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/method-static/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/class/subclass-builtins/subclass-SharedArrayBuffer.js", "description": " new SubSharedArrayBuffer() instanceof SharedArrayBuffer (Subclass instanceof Heritage)", "features": ["SharedArrayBuffer"], "flags": ["generated"]}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A1.js", "esid": " sec-applying-the-exp-operator", "description": " If exponent is NaN, the result is NaN."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A11.js", "esid": " sec-applying-the-exp-operator", "description": " If base is +\u221e and exponent > 0, the result is +\u221e."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A12.js", "esid": " sec-applying-the-exp-operator", "description": " If base is +\u221e and exponent < 0, the result is +0."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A13.js", "esid": " sec-applying-the-exp-operator", "description": " If base is \u2212\u221e and exponent > 0 and exponent is an odd integer, the result is \u2212\u221e."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A14.js", "esid": " sec-applying-the-exp-operator", "description": " If base is \u2212\u221e and exponent > 0 and exponent is not an odd integer, the result is +\u221e."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A15.js", "esid": " sec-applying-the-exp-operator", "description": " If base is \u2212\u221e and exponent < 0 and exponent is an odd integer, the result is \u22120."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A16.js", "esid": " sec-applying-the-exp-operator", "description": " If base is \u2212\u221e and exponent < 0 and exponent is not an odd integer, the result is +0."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A17.js", "esid": " sec-applying-the-exp-operator", "description": " If base is +0 and exponent > 0, the result is +0."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A18.js", "esid": " sec-applying-the-exp-operator", "description": " If base is +0 and exponent < 0, the result is +\u221e."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A19.js", "esid": " sec-applying-the-exp-operator", "description": " If base is \u22120 and exponent > 0 and exponent is an odd integer, the result is \u22120."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A2.js", "esid": " sec-applying-the-exp-operator", "description": " >If exponent is +0, the result is 1, even if base is NaN.\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A20.js", "esid": " sec-applying-the-exp-operator", "description": " If base is \u22120 and exponent > 0 and exponent is not an odd integer, the result is +0."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A21.js", "esid": " sec-applying-the-exp-operator", "description": " If base is \u22120 and exponent < 0 and exponent is an odd integer, the result is \u2212\u221e."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A22.js", "esid": " sec-applying-the-exp-operator", "description": " If base is \u22120 and exponent < 0 and exponent is not an odd integer, the result is +\u221e."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A23.js", "esid": " sec-applying-the-exp-operator", "description": " If base < 0 and base is finite and exponent is finite and exponent is not an integer, the result is NaN."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A3.js", "esid": " sec-applying-the-exp-operator", "description": " >If exponent is \u22120, the result is 1, even if base is NaN.\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A4.js", "esid": " sec-applying-the-exp-operator", "description": " If base is NaN and exponent is nonzero, the result is NaN."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A5.js", "esid": " sec-applying-the-exp-operator", "description": " If abs(base) > 1 and exponent is +\u221e, the result is +\u221e."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A6.js", "esid": " sec-applying-the-exp-operator", "description": " If abs(base) > 1 and exponent is \u2212\u221e, the result is +0."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A7.js", "esid": " sec-applying-the-exp-operator", "description": " If abs(base) is 1 and exponent is +\u221e, the result is NaN."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A8.js", "esid": " sec-applying-the-exp-operator", "description": " If abs(base) is 1 and exponent is \u2212\u221e, the result is NaN."}, {"path": "./test262-main/test/language/expressions/exponentiation/applying-the-exp-operator_A9.js", "esid": " sec-applying-the-exp-operator", "description": " If abs(base) < 1 and exponent is +\u221e, the result is +0.\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/exp-assignment-operator.js", "author": " Rick Waldron", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " Compound Exponentiation Assignment Operator", "info": " |AssignmentExpression:\nLeftHandSideExpression AssignmentOperator AssignmentExpression\n\n1. Let lref be the result of evaluating LeftHandSideExpression.\n2. Let lval be ? GetValue(lref).\n3. Let rref be the result of evaluating AssignmentExpression.\n4. Let rval be ? GetValue(rref).\n5. Let op be the @ where AssignmentOperator is @=.\n6. Let r be the result of applying op to lval and rval as if evaluating the expression lval op rval.\n7. Perform ? PutValue(lref, r).\n8. Return r.\n\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/exp-operator-evaluation-order.js", "author": " Rick Waldron, Andr\u00e9 Bargull", "esid": " sec-exp-operator-runtime-semantics-evaluation", "description": " Exponentiation Operator expression order of evaluation", "info": " |ExponentiationExpression:\nUpdateExpression ** ExponentiationExpression\n\n1. Let left be the result of evaluating UpdateExpression.\n2. Let leftValue be ? GetValue(left).\n3. Let right be the result of evaluating ExponentiationExpression.\n4. Let rightValue be ? GetValue(right).\n5. Let base be ? ToNumber(leftValue).\n6. Let exponent be ? ToNumber(rightValue).\n7. Return the result of Applying the ** operator with base and exponent as specified in 12.7.3.4.\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/exp-operator-precedence-unary-expression-semantics.js", "author": " Rick Waldron", "esid": " sec-unary-operators", "description": " Exponentiation Operator expression precedence of unary operators", "info": " |ExponentiationExpression :\nUnaryExpression\n...\n\nUnaryExpression :\n...\n`delete` UnaryExpression\n`void` UnaryExpression\n`typeof` UnaryExpression\n`+` UnaryExpression\n`-` UnaryExpression\n`~` UnaryExpression\n`!` UnaryExpression\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/exp-operator-precedence-update-expression-semantics.js", "author": " Rick Waldron", "esid": " sec-update-expressions", "description": " Exponentiation Operator expression precedence of update operators", "info": " |ExponentiationExpression :\n...\nUpdateExpression `**` ExponentiationExpression\n\nUpdateExpression :\nLeftHandSideExpression `++`\nLeftHandSideExpression `--`\n`++` UnaryExpression\n`--` UnaryExpression\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/exp-operator.js", "author": " Rick Waldron", "esid": " sec-exp-operator", "description": " >Performs exponential calculation on operands. Same algorithm as %MathPow%(base, exponent)\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/int32_min-exponent.js", "esid": " sec-applying-the-exp-operator", "description": " >Using -(2**31) as exponent with the exponentiation operator should behave\nas expected.\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/order-of-evaluation.js", "esid": " sec-exp-operator-runtime-semantics-evaluation", "description": " Type coercion order of operations for exponentiation operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/function/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/function/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/function/scope-body-lex-distinct.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["let"]}, {"path": "./test262-main/test/language/expressions/generators/default-proto.js", "esid": " 14.4.11", "version": 6, "description": " Intrinsic default prototype of GeneratorFunctions", "info": " |1. Let G be ? OrdinaryCreateFromConstructor(functionObject,\n\"%GeneratorPrototype%\", \u00ab [[GeneratorState]], [[GeneratorContext]] \u00bb).\n[...]\n\n9.1.13 OrdinaryCreateFromConstructor\n\n[...]\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.14 GetPrototypeFromConstructor\n\n[...]\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n[...]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/named-yield-identifier-spread-non-strict.js", "description": " Mixed use of object spread and yield as a valid identifier in a function body inside a generator body in non strict mode (Generator named expression - valid for non-strict only cases)", "esid": " prod-GeneratorExpression", "features": ["Symbol", "object-spread", "generators"], "flags": ["generated", "noStrict"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-yield-spread-obj.js", "description": " Use yield value in a object spread position (Named generator expression)", "esid": " prod-GeneratorExpression", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/generators/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/generators/scope-body-lex-distinct.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["generators", "let"]}, {"path": "./test262-main/test/language/expressions/generators/yield-identifier-spread-non-strict.js", "description": " Mixed use of object spread and yield as a valid identifier in a function body inside a generator body in non strict mode (Generator expression - valid for non-strict only cases)", "esid": " prod-GeneratorExpression", "features": ["Symbol", "object-spread", "generators"], "flags": ["generated", "noStrict"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/yield-spread-obj.js", "description": " Use yield value in a object spread position (Unnamed generator expression)", "esid": " prod-GeneratorExpression", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/import.meta/syntax/goal-async-function-params-or-body.js", "esid": " sec-left-hand-side-expressions-static-semantics-early-errors", "description": " >An Syntax Error is thrown when the syntactic goal symbol is AsyncFunctionBody or FormalParameters.\n", "info": " |It is an early Syntax Error if Module is not the syntactic goal symbol.\n", "features": ["import.meta", "async-functions"]}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-obj-ident.js", "description": " Object Spread operator following other properties (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-obj-null.js", "description": " Object Spread operator following other arguments with null value (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-obj-undefined.js", "description": " Object Spread operator following other arguments with undefined (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-getter-descriptor.js", "description": " Spread operation with getter results in data property descriptor (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-getter-init.js", "description": " Getter in object literal is not evaluated (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-manipulate-outter-obj-in-getter.js", "description": " Getter manipulates outter object before it's spread operation (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-mult-spread-getter.js", "description": " Multiple Object Spread usage calls getter multiple times (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-mult-spread.js", "description": " Multiple Object Spread operation (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-null.js", "description": " Null Object Spread is ignored (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-override-immutable.js", "description": " Object Spread overriding immutable properties (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-overrides-prev-properties.js", "description": " Object Spread properties overrides previous definitions (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-skip-non-enumerable.js", "description": " Object Spread doesn't copy non-enumerable properties (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-spread-order.js", "description": " Spread operation follows [[OwnPropertyKeys]] order (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-symbol-property.js", "description": " Spread operation where source object contains Symbol properties (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-undefined.js", "description": " Undefined Object Spread is ignored (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-with-overrides.js", "description": " Object Spread properties being overriden (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-sngl-obj-ident.js", "description": " Object Spread operator without other arguments (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/object-rest-proxy-get-not-called-on-dontenum-keys.js", "esid": " sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization", "description": " >Proxy's \"get\" trap is not invoked for non-enumerable keys.\n", "info": " |BindingRestProperty : ... BindingIdentifier\n\n[...]\n3. Perform ? CopyDataProperties(restObj, value, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\nii. If desc is not undefined and desc.[[Enumerable]] is true, then\n1. Let propValue be ? Get(from, nextKey).\n2. Perform ! CreateDataPropertyOrThrow(target, nextKey, propValue).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-rest", "destructuring-binding", "Proxy", "Symbol"], "includes": ["compareArray.js", "propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/dstr/object-rest-proxy-ownkeys-returned-keys-order.js", "esid": " sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization", "description": " >Proxy keys are iterated in order they were provided by \"ownKeys\" trap.\n", "info": " |BindingRestProperty : ... BindingIdentifier\n\n[...]\n3. Perform ? CopyDataProperties(restObj, value, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-rest", "destructuring-binding", "Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-yield-identifier-spread-non-strict.js", "description": " Mixed use of object spread and yield as a valid identifier in a function body inside a generator body in non strict mode (Generator method - valid for non-strict only cases)", "esid": " prod-GeneratorMethod", "features": ["Symbol", "object-spread", "generators"], "flags": ["generated", "noStrict"], "info": " |14.4 Generator Function Definitions\n\nGeneratorMethod[Yield, Await]:\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-yield-spread-obj.js", "description": " Use yield value in a object spread position (Generator method)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorMethod[Yield, Await]:\n* PropertyName[?Yield, ?Await] ( UniqueFormalParameters[+Yield, ~Await] ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (method)", "esid": " sec-runtime-semantics-definemethod", "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (method)", "esid": " sec-runtime-semantics-definemethod", "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (method)", "esid": " sec-runtime-semantics-definemethod", "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/object-method-returns-promise.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Async function method definitions return promises\n"}, {"path": "./test262-main/test/language/expressions/object/object-spread-proxy-get-not-called-on-dontenum-keys.js", "esid": " sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "description": " >Proxy's \"get\" trap is not invoked for non-enumerable keys.\n", "info": " |PropertyDefinition : ... AssignmentExpression\n\n[...]\n3. Let excludedNames be a new empty List.\n4. Return ? CopyDataProperties(object, fromValue, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\nii. If desc is not undefined and desc.[[Enumerable]] is true, then\n1. Let propValue be ? Get(from, nextKey).\n2. Perform ! CreateDataPropertyOrThrow(target, nextKey, propValue).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-spread", "Proxy", "Symbol"], "includes": ["compareArray.js", "propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/object-spread-proxy-no-excluded-keys.js", "esid": " sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "description": " >Proxy's \"getOwnPropertyDescriptor\" trap is invoked for all keys.\n", "info": " |PropertyDefinition : ... AssignmentExpression\n\n[...]\n3. Let excludedNames be a new empty List.\n4. Return ? CopyDataProperties(object, fromValue, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-spread", "Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/expressions/object/object-spread-proxy-ownkeys-returned-keys-order.js", "esid": " sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "description": " >Proxy keys are iterated in order they were provided by \"ownKeys\" trap.\n", "info": " |PropertyDefinition : ... AssignmentExpression\n\n[...]\n3. Let excludedNames be a new empty List.\n4. Return ? CopyDataProperties(object, fromValue, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-spread", "Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-body-lex-distinct.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["generators", "let"]}, {"path": "./test262-main/test/language/expressions/object/scope-getter-body-lex-distinc.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["let"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-body-lex-distinct.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["let"]}, {"path": "./test262-main/test/language/expressions/object/scope-setter-body-lex-distinc.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["let"]}, {"path": "./test262-main/test/language/expressions/super/call-spread-err-mult-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-err-sngl-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-mult-obj-ident.js", "description": " Object Spread operator following other properties (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-mult-obj-null.js", "description": " Object Spread operator following other arguments with null value (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-mult-obj-undefined.js", "description": " Object Spread operator following other arguments with undefined (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-getter-descriptor.js", "description": " Spread operation with getter results in data property descriptor (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-getter-init.js", "description": " Getter in object literal is not evaluated (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-manipulate-outter-obj-in-getter.js", "description": " Getter manipulates outter object before it's spread operation (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-mult-spread-getter.js", "description": " Multiple Object Spread usage calls getter multiple times (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-mult-spread.js", "description": " Multiple Object Spread operation (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-null.js", "description": " Null Object Spread is ignored (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-override-immutable.js", "description": " Object Spread overriding immutable properties (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-overrides-prev-properties.js", "description": " Object Spread properties overrides previous definitions (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-skip-non-enumerable.js", "description": " Object Spread doesn't copy non-enumerable properties (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-spread-order.js", "description": " Spread operation follows [[OwnPropertyKeys]] order (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-symbol-property.js", "description": " Spread operation where source object contains Symbol properties (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-undefined.js", "description": " Undefined Object Spread is ignored (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-with-overrides.js", "description": " Object Spread properties being overriden (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-sngl-obj-ident.js", "description": " Object Spread operator without other arguments (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/prop-dot-cls-null-proto.js", "esid": " 12.3.5", "version": 6, "description": " >SuperProperty evaluation when the \"home\" object's prototype is not\nobject-coercible.\n", "info": " |1. Let propertyKey be StringValue of IdentifierName.\n2. If the code matched by the syntactic production that is being evaluated is\nstrict mode code, let strict be true, else let strict be false.\n3. Return ? MakeSuperPropertyReference(propertyKey, strict).\n\n12.3.5.3 Runtime Semantics: MakeSuperPropertyReference\n\n1. Let env be GetThisEnvironment( ).\n2. If env.HasSuperBinding() is false, throw a ReferenceError exception.\n3. Let actualThis be ? env.GetThisBinding().\n4. Let baseValue be ? env.GetSuperBase().\n5. Let bv be ? RequireObjectCoercible(baseValue).\n", "features": ["class"]}, {"path": "./test262-main/test/language/expressions/super/prop-dot-obj-null-proto.js", "esid": " 12.3.5", "version": 6, "description": " >SuperProperty evaluation when the \"home\" object's prototype is not\nobject-coercible.\n", "info": " |1. Let propertyKey be StringValue of IdentifierName.\n2. If the code matched by the syntactic production that is being evaluated is\nstrict mode code, let strict be true, else let strict be false.\n3. Return ? MakeSuperPropertyReference(propertyKey, strict).\n\n12.3.5.3 Runtime Semantics: MakeSuperPropertyReference\n\n1. Let env be GetThisEnvironment( ).\n2. If env.HasSuperBinding() is false, throw a ReferenceError exception.\n3. Let actualThis be ? env.GetThisBinding().\n4. Let baseValue be ? env.GetSuperBase().\n5. Let bv be ? RequireObjectCoercible(baseValue).\n"}, {"path": "./test262-main/test/language/expressions/super/prop-expr-cls-null-proto.js", "esid": " 12.3.5", "version": 6, "description": " >SuperProperty evaluation when the \"home\" object's prototype is not\nobject-coercible.\n", "info": " |[...]\n4. If the code matched by the syntactic production that is being evaluated is\nstrict mode code, let strict be true, else let strict be false.\n5. Return ? MakeSuperPropertyReference(propertyKey, strict).\n\n12.3.5.3 Runtime Semantics: MakeSuperPropertyReference\n\n1. Let env be GetThisEnvironment( ).\n2. If env.HasSuperBinding() is false, throw a ReferenceError exception.\n3. Let actualThis be ? env.GetThisBinding().\n4. Let baseValue be ? env.GetSuperBase().\n5. Let bv be ? RequireObjectCoercible(baseValue).\n", "features": ["class"]}, {"path": "./test262-main/test/language/expressions/super/prop-expr-obj-null-proto.js", "esid": " 12.3.5", "version": 6, "description": " >SuperProperty evaluation when the \"home\" object's prototype is not\nobject-coercible.\n", "info": " |[...]\n4. If the code matched by the syntactic production that is being evaluated is\nstrict mode code, let strict be true, else let strict be false.\n5. Return ? MakeSuperPropertyReference(propertyKey, strict).\n\n12.3.5.3 Runtime Semantics: MakeSuperPropertyReference\n\n1. Let env be GetThisEnvironment( ).\n2. If env.HasSuperBinding() is false, throw a ReferenceError exception.\n3. Let actualThis be ? env.GetThisBinding().\n4. Let baseValue be ? env.GetSuperBase().\n5. Let bv be ? RequireObjectCoercible(baseValue).\n"}, {"path": "./test262-main/test/language/expressions/yield/in-rltn-expr.js", "esid": " 14.4", "version": 6, "description": " >YieldExpression contextually recognizes the `in` keyword as part of a\nRelationalExpression\n", "info": " |Syntax\n\nyield [no LineTerminator here] AssignmentExpression[?In, +Yield]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/star-in-rltn-expr.js", "esid": " 14.4", "version": 6, "description": " >YieldExpression contextually recognizes the `in` keyword as part of a\nRelationalExpression\n", "info": " |Syntax\n\nyield [no LineTerminator here] AssignmentExpression[?In, +Yield]\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-res-done-no-value.js", "esid": " 14.4.14", "version": 6, "description": " >`value` property is not accessed when iteration is incomplete\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\nv. If Type(innerReturnResult) is not Object, throw a TypeError\nexception.\nvi. Let done be ? IteratorComplete(innerReturnResult).\nvii. If done is true, then\n1. Let value be ? IteratorValue(innerReturnResult).\n2. Return Completion{[[Type]]: return, [[Value]]: value,\n[[Target]]: empty}.\nviii. Let received be GeneratorYield(innerReturnResult).\n\n7.4.3 IteratorComplete\n\n1. Assert: Type(iterResult) is Object.\n2. Return ToBoolean(? Get(iterResult, \"done\")).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-res-value-final.js", "esid": " 14.4.14", "version": 6, "description": " Value received from invocation of generator's `return` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\nv. If Type(innerReturnResult) is not Object, throw a TypeError\nexception.\nvi. Let done be ? IteratorComplete(innerReturnResult).\nvii. If done is true, then\n1. Let value be ? IteratorValue(innerReturnResult).\n2. Return Completion{[[Type]]: return, [[Value]]: value,\n[[Target]]: empty}.\nviii. Let received be GeneratorYield(innerReturnResult).\n\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-violation-no-rtrn.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned after protocol violation (and a `return` method\nis not defined)\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n[...]\niii. Else,\n1. NOTE: If iterator does not have a throw method, this throw is\ngoing to terminate the yield* loop. But first we need to give\niterator a chance to clean up.\n2. Perform ? IteratorClose(iterator, Completion{[[Type]]: normal,\n[[Value]]: empty, [[Target]]: empty}).\n3. NOTE: The next step throws a TypeError to indicate that there\nwas a yield* protocol violation: iterator does not have a throw\nmethod.\n4. Throw a TypeError exception.\n\n7.4.6 IteratorClose\n\n1. Assert: Type(iterator) is Object.\n2. Assert: completion is a Completion Record.\n3. Let return be ? GetMethod(iterator, \"return\").\n4. If return is undefined, return Completion(completion).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-throw-is-null.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " >If iterator's \"throw\" method is `null`,\nIteratorClose is called before rising TypeError.\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n[...]\n7. Repeat,\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n[...]\niii. Else,\n[...]\n4. Else, perform ? IteratorClose(iteratorRecord, closeCompletion).\n[...]\n6. Throw a TypeError exception.\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n\nIteratorClose ( iteratorRecord, completion )\n\n[...]\n4. Let innerResult be GetMethod(iterator, \"return\").\n5. If innerResult.[[Type]] is normal, then\na. Let return be innerResult.[[Value]].\nb. If return is undefined, return Completion(completion).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/identifiers/part-unicode-10.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v10.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-10.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v10.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-8.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v8.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-8.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v8.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-9.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v9.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-9.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v9.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-10.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v10.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-10.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v10.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-8.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v8.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-8.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v8.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-9.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v9.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-9.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v9.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/statementList/eval-class-block.js", "description": " Block (Valid syntax of StatementList starting with a Class Declaration)", "esid": " prod-StatementList", "features": ["class"], "flags": ["generated"], "info": " |StatementList:\nStatementListItem\nStatementList StatementListItem\n\nStatementListItem:\nStatement\nDeclaration\n\nDeclaration:\nClassDeclaration\n\n\nStatement:\nBlockStatement\nVariableStatement\nEmptyStatement\nExpressionStatement\n...\n\n// lookahead here prevents capturing an Object literal\nExpressionStatement:\n[lookahead \u2209 { {, function, async [no LineTerminator here] function, class, let [ }]\nExpression ;\n"}, {"path": "./test262-main/test/language/statements/async-function/cptn-decl.js", "esid": " sec-async-function-definitions-runtime-semantics-evaluation", "description": " Async function declaration completion value is empty.", "info": " |AsyncFunctionDeclaration : async [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/async-function/declaration-returns-promise.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Async functions return promises\n"}, {"path": "./test262-main/test/language/statements/async-function/syntax-declaration-line-terminators-allowed.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Declarations allow line breaks after function and after arguments list\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cptn-decl.js", "esid": " sec-class-definitions-runtime-semantics-evaluation", "description": " Class declaration completion value is empty.", "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Perform ? BindingClassDeclarationEvaluation of this ClassDeclaration.\n2. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/definition/class-method-returns-promise.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "features": ["async-functions"], "description": " >Async function expressions return promises\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-special-prototype-async-meth-valid.js", "description": " Async Methods can be named \"prototype\" (class declaration)", "esid": " prod-ClassElement", "features": ["async-functions", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\nClassTail : ClassHeritage_opt { ClassBody_opt }\n\n[...]\n6. Let proto be OrdinaryObjectCreate(protoParent).\n[...]\n14. Perform MakeConstructor(F, false, proto).\n[...]\n20. For each ClassElement m in order from methods, do\na. If IsStatic of m is false, then\ni. Let status be PropertyDefinitionEvaluation of m with arguments proto and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nWith parameters object and enumerable.\n\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\n\n[...]\n8. Let desc be the PropertyDescriptor { [[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true }.\n9. Return ? DefinePropertyOrThrow(object, propKey, desc).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-static-ctor-async-meth-valid.js", "description": " Static Methods can be named constructor (class declaration)", "esid": " prod-ClassElement", "features": ["async-functions", "class"], "flags": ["generated"], "info": " |Class Definitions / Static Semantics: Early Errors\n\nClassElement : MethodDefinition\nIt is a Syntax Error if PropName of MethodDefinition is not \"constructor\" and HasDirectSuper of MethodDefinition is true.\nIt is a Syntax Error if PropName of MethodDefinition is \"constructor\" and SpecialMethod of MethodDefinition is true.\nClassElement : static MethodDefinition\nIt is a Syntax Error if HasDirectSuper of MethodDefinition is true.\nIt is a Syntax Error if PropName of MethodDefinition is \"prototype\".\n\n"}, {"path": "./test262-main/test/language/statements/class/gen-method/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/gen-method/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/gen-method/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/gen-method/yield-spread-obj.js", "description": " Use yield value in a object spread position (Generator method as a ClassDeclaration element)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\n\nMethodDefinition :\nGeneratorMethod\n\n14.4 Generator Function Definitions\n\nGeneratorMethod :\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/statements/class/gen-method-static/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/gen-method-static/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/gen-method-static/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/gen-method-static/yield-spread-obj.js", "description": " Use yield value in a object spread position (Static generator method as a ClassDeclaration element)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |ClassElement :\nstatic MethodDefinition\n\nMethodDefinition :\nGeneratorMethod\n\n14.4 Generator Function Definitions\n\nGeneratorMethod :\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/statements/class/method/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/method/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/method/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/method-static/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/method-static/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/method-static/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/class/subclass/superclass-async-function.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >IsConstructor check is performed before \"prototype\" lookup.\nAsync functions are not constructors (MakeConstructor is not called on them).\n", "info": " |ClassDefinitionEvaluation\n\n[...]\n5. Else,\n[...]\nd. Let superclass be ? GetValue(superclassRef).\ne. If superclass is null, then\n[...]\nf. Else if IsConstructor(superclass) is false, throw a TypeError exception.\n", "features": ["async-functions", "class", "Proxy"]}, {"path": "./test262-main/test/language/statements/class/subclass-builtins/subclass-SharedArrayBuffer.js", "description": " new SubSharedArrayBuffer() instanceof SharedArrayBuffer (Subclass instanceof Heritage)", "features": ["SharedArrayBuffer"], "flags": ["generated"]}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/head-init-async-of.js", "description": " for statement beginning with `async of`", "info": " |`for (async of =>` is the begining of a regular for loop, rather than a for-of\n", "esid": " sec-for-statement"}, {"path": "./test262-main/test/language/statements/for-in/12.6.4-2.js", "version": 5, "esid": " 12.6.4-2", "description": " >The for-in Statement - the values of [[Enumerable]] attributes are\nnot considered when determining if a property of a prototype\nobject is shadowed by a previous object on the prototype chain\n"}, {"path": "./test262-main/test/language/statements/for-in/order-enumerable-shadowed.js", "esid": " sec-enumerate-object-properties", "description": " Enumerable properties the prototype which are shadowed by non-enumerable properties on the object are not enumerated", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-thrw-close-skip.js", "description": " Abrupt completion returned during iteration for rest element (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-thrw-close-skip.js", "description": " IteratorClose is not called when iteration produces an abrupt completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-computed-property-no-strict.js", "description": " Destructuring field can be a computed property, i.e it can be defined only at runtime. Rest operantion needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated", "noStrict"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-computed-property.js", "description": " Destructuring field can be a computed property, i.e it can be defined only at runtime. Rest operantion needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-descriptors.js", "description": " Object created from rest deconstruction doesn't copy source object property descriptors. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-empty-obj.js", "description": " RestBindingInitialization creates a new object even if lhs is an empty object (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-getter-abrupt-get-error.js", "description": " Rest deconstruction doesn't happen if getter return is abrupt (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-1dot.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-1dot0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-1e0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-array-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-array-1e0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-string-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-number.js", "description": " RestBindingInitialization creates a new object even if lhs is a Number (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-order.js", "description": " Rest operation follows [[OwnPropertyKeys]] order (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol", "object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-put-const.js", "description": " The object rest deconstruction assignment target should obey `const` semantics. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-same-name.js", "description": " Proper setting in the values for rest name equal to a property name. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-str-val.js", "description": " RestBindingInitialization creats an object with indexes as property name (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-symbol-val.js", "description": " RestBindingInitialization creates a new object if lhs is a Symbol (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol", "object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-to-property-with-setter.js", "description": " When DestructuringAssignmentTarget is an object property setter, its value should be binded as rest object. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-to-property.js", "description": " When DestructuringAssignmentTarget is an object property, its value should be binded as rest object. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-val-null.js", "description": " TypeError is thrown when rhs is null because of 7.1.13 ToObject ( argument ) used by CopyDataProperties (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-val-undefined.js", "description": " TypeError is thrown when rhs is ```undefined``` because of 7.1.13 ToObject ( argument ) used by CopyDataProperties (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-valid-object.js", "description": " Rest object contains just unextracted data (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/iterator-next-result-value-attr-error.js", "version": 6, "esid": " 13.6.4.13 S5.g", "description": " >If `nextValue` is an abrupt completion as per IteratorValue (ES6 7.4.4),\nreturn the completion.\n", "info": " |[...]\n5. Repeat\na. Let nextResult be ? IteratorStep(iterator).\nb. If nextResult is false, return NormalCompletion(V).\nc. Let nextValue be ? IteratorValue(nextResult).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/function/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/function/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/function/scope-body-lex-distinct.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["let"]}, {"path": "./test262-main/test/language/statements/generators/default-proto.js", "esid": " 14.4.11", "version": 6, "description": " Intrinsic default prototype of GeneratorFunctions", "info": " |1. Let G be ? OrdinaryCreateFromConstructor(functionObject,\n\"%GeneratorPrototype%\", \u00ab [[GeneratorState]], [[GeneratorContext]] \u00bb).\n[...]\n\n9.1.13 OrdinaryCreateFromConstructor\n\n[...]\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.14 GetPrototypeFromConstructor\n\n[...]\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n[...]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/dflt-params-trailing-comma.js", "description": " A trailing comma should not increase the respective length, using default parameters (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/params-trailing-comma-multiple.js", "description": " A trailing comma should not increase the respective length, using multiple parameters (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/generators/params-trailing-comma-single.js", "description": " A trailing comma should not increase the respective length, using a single parameter (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nTrailing comma in the parameters list\n\n14.1 Function Definitions\n\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\n"}, {"path": "./test262-main/test/language/statements/generators/scope-body-lex-distinct.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Creation of new lexical environment (distinct from the variable\nenvironment) for the function body outside of strict mode\n", "info": " |[...]\n29. If strict is false, then\na. Let lexEnv be NewDeclarativeEnvironment(varEnv).\nb. NOTE: Non-strict functions use a separate lexical Environment Record\nfor top-level lexical declarations so that a direct eval can\ndetermine whether any var scoped declarations introduced by the eval\ncode conflict with pre-existing top-level lexically scoped\ndeclarations.This is not needed for strict functions because a\nstrict direct eval always places all declarations into a new\nEnvironment Record.\n[...]\n\n18.2.1.3 Runtime Semantics: EvalDeclarationInstantiation\n\n[...]\n5. If strict is false, then\n[...]\nb. Let thisLex be lexEnv.\nc. Assert: The following loop will terminate.\nd. Repeat while thisLex is not the same as varEnv,\ni. Let thisEnvRec be thisLex's EnvironmentRecord.\nii. If thisEnvRec is not an object Environment Record, then\n1. NOTE: The environment of with statements cannot contain any\nlexical declaration so it doesn't need to be checked for\nvar/let hoisting conflicts.\n2. For each name in varNames, do\na. If thisEnvRec.HasBinding(name) is true, then\ni. Throw a SyntaxError exception.\nii. NOTE: Annex B.3.5 defines alternate semantics for the\nabove step.\nb. NOTE: A direct eval will not hoist var declaration over a\nlike-named lexical declaration.\niii. Let thisLex be thisLex's outer environment reference.\n", "flags": ["noStrict"], "features": ["generators", "let"]}, {"path": "./test262-main/test/language/statements/generators/yield-identifier-spread-non-strict.js", "description": " Mixed use of object spread and yield as a valid identifier in a function body inside a generator body in non strict mode (Generator function declaration - valid for non-strict only cases)", "esid": " prod-GeneratorDeclaration", "features": ["Symbol", "object-spread", "generators"], "flags": ["generated", "noStrict"], "info": " |14.4 Generator Function Definitions\n\nGeneratorDeclaration[Yield, Await, Default]:\nfunction * BindingIdentifier[?Yield, ?Await] ( FormalParameters[+Yield, ~Await] ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/statements/generators/yield-spread-obj.js", "description": " Use yield value in a object spread position (Generator Function declaration)", "esid": " prod-GeneratorDeclaration", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorDeclaration :\nfunction * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/switch/scope-lex-async-function.js", "esid": " sec-switch-statement-runtime-semantics-evaluation", "description": " Creation of new lexical environment (into `default` clause)", "info": " |1. Let exprRef be the result of evaluating Expression.\n2. Let switchValue be ? GetValue(exprRef).\n3. Let oldEnv be the running execution context's LexicalEnvironment.\n4. Let blockEnv be NewDeclarativeEnvironment(oldEnv).\n5. Perform BlockDeclarationInstantiation(CaseBlock, blockEnv).\n6. Set the running execution context's LexicalEnvironment to blockEnv.\n7. Let R be the result of performing CaseBlockEvaluation of CaseBlock with\nargument switchValue.\n[...]\n", "negative": {"phase": "runtime", "type": "ReferenceError"}}, {"path": "./test262-main/test/language/statements/switch/scope-lex-generator.js", "esid": " sec-switch-statement-runtime-semantics-evaluation", "description": " Creation of new lexical environment (into `default` clause)", "info": " |1. Let exprRef be the result of evaluating Expression.\n2. Let switchValue be ? GetValue(exprRef).\n3. Let oldEnv be the running execution context's LexicalEnvironment.\n4. Let blockEnv be NewDeclarativeEnvironment(oldEnv).\n5. Perform BlockDeclarationInstantiation(CaseBlock, blockEnv).\n6. Set the running execution context's LexicalEnvironment to blockEnv.\n7. Let R be the result of performing CaseBlockEvaluation of CaseBlock with\nargument switchValue.\n[...]\n", "negative": {"phase": "runtime", "type": "ReferenceError"}}, {"path": "./test262-main/test/language/statements/try/cptn-catch-finally-empty-break.js", "esid": " sec-try-statement-runtime-semantics-evaluation", "description": " Abrupt completion from finally block calls UpdatEmpty()", "info": " |13.15.8 Runtime Semantics: Evaluation\nTryStatement : try Block Catch Finally\n...\n4. Let F be the result of evaluating Finally.\n...\n6. Return Completion(UpdateEmpty(F, undefined)).\n"}, {"path": "./test262-main/test/language/statements/try/cptn-catch-finally-empty-continue.js", "esid": " sec-try-statement-runtime-semantics-evaluation", "description": " Abrupt completion from finally block calls UpdatEmpty()", "info": " |13.15.8 Runtime Semantics: Evaluation\nTryStatement : try Block Catch Finally\n...\n4. Let F be the result of evaluating Finally.\n...\n6. Return Completion(UpdateEmpty(F, undefined)).\n"}, {"path": "./test262-main/test/language/statements/try/cptn-finally-empty-break.js", "esid": " sec-try-statement-runtime-semantics-evaluation", "description": " Abrupt completion from finally block calls UpdatEmpty()", "info": " |13.15.8 Runtime Semantics: Evaluation\nTryStatement : try Block Finally\n...\n2. Let F be the result of evaluating Finally.\n...\n4. Return Completion(UpdateEmpty(F, undefined)).\n"}, {"path": "./test262-main/test/language/statements/try/cptn-finally-empty-continue.js", "esid": " sec-try-statement-runtime-semantics-evaluation", "description": " Abrupt completion from finally block calls UpdatEmpty()", "info": " |13.15.8 Runtime Semantics: Evaluation\nTryStatement : try Block Finally\n...\n2. Let F be the result of evaluating Finally.\n...\n4. Return Completion(UpdateEmpty(F, undefined)).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/try/scope-catch-block-lex-open.js", "esid": " sec-runtime-semantics-catchclauseevaluation", "description": " Creation of new lexical environment for `catch` block", "info": " |[...]\n8. Let B be the result of evaluating Block.\n[...]\n", "features": ["let"]}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/white-space/mongolian-vowel-separator-eval.js", "esid": " sec-white-space", "description": " >Mongolian Vowel Separator is not recognized as white space (eval code).\n", "info": " |11.2 White Space\n\nWhiteSpace ::\n<TAB>\n<VT>\n<FF>\n<SP>\n<NBSP>\n<ZWNBSP>\n<USP>\n<USP> ::\nOther category \u201cZs\u201d code points\n\nGeneral Category of U+180E is \u201cCf\u201d (Format).\n", "features": ["u180e"]}]